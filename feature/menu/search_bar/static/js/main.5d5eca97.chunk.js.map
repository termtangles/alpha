{"version":3,"sources":["interfaces/ModelInterfaces.ts","containers/LocalImportExport/LocalImportExport.tsx","containers/LocalImportExport/LocalImportExportViewModel.ts","containers/SearchPanel/SearchPanelViewModel.tsx","models/Filters/FilterModel.ts","models/CourseModel.ts","models/Filters/Filters.ts","config/ResetButtonStyle.ts","containers/SearchPanel/Filter/FilterSection.tsx","containers/SearchPanel/Filter/FilterMenuView.tsx","containers/SearchPanel/SearchPanelStyles.ts","models/TermModel.ts","containers/SearchPanel/Results/CourseResultView.tsx","containers/SearchPanel/Results/CourseResultCollectionView.tsx","containers/SearchPanel/SearchTab/CourseSearchTab.tsx","containers/SearchPanel/Results/ProgramResultView.tsx","containers/SearchPanel/Results/ProgramResultCollectionView.tsx","containers/SearchPanel/SearchTab/ProgramSearchTab.tsx","containers/SearchPanel/Results/SpecialisationResultView.tsx","containers/SearchPanel/Results/SpecialisationResultCollectionView.tsx","containers/SearchPanel/SearchTab/SpecialisationSearchTab.tsx","containers/SearchPanel/SearchPanel.tsx","containers/MenuBar/MenuBar.tsx","containers/Planner/CourseView/CourseView.tsx","containers/Planner/CourseGroupView/CourseGroupView.tsx","containers/Planner/YearView/YearView.tsx","containers/Planner/Planner.tsx","containers/Planner/PlannerViewModel.tsx","helpers/ConditionalTreeTraverser.ts","states/CourseState.ts","models/Validations/Validations.ts","models/CurriculumModel.ts","models/ProgramModel.ts","models/SpecialisationModel.ts","states/ProgressionState.ts","states/SearchDataState.ts","states/UserState.ts","contexts/ApplicationContext.ts","containers/ProgressionPlanner/CurriculumView/CurriculumElementsView.tsx","containers/ProgressionPlanner/CurriculumView/CurriculumContainerView.tsx","containers/ProgressionPlanner/ProgressionEntityView.tsx","containers/ProgressionPlanner/ProgressionPlanner.tsx","containers/ProgressionPlanner/ProgressionPlannerViewModel.ts","containers/AutoPlan/AutoPlannerView.tsx","containers/AutoPlan/AutoPlannerModel.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ProgressionStatus","ErrorCode","StudyLevel","ImportExportButton","styled","button","props","primary","css","ImportExportButtonContainer","div","LocalImportExport","localImportExportViewModel","inputRef","React","useRef","Fragment","onClick","export","current","click","ref","onChange","event","import","type","style","display","accept","SerializableVersionNumber","_versionNumber","this","imported","a","_version","console","log","LocalImportExportViewModel","userState","progressionState","courseState","_serializables","Map","set","data","FileSaver","saveAs","Blob","JSON","stringify","DateTime","now","toFormat","studyLevel","forEach","serializable","key","serialize","serializeToFile","json","parse","Promise","resolve","get","deserialize","then","catch","error","message","file","target","files","reader","FileReader","onload","ev","result","deserializeFromString","toString","value","readAsText","SearchPanelItem","FilterModel","name","fnGetTargetValue","_possibleValues","Set","_selectedValues","filterResultMapping","initializeFilter","allSearchData","map","flat","filter","applyFilter","searchResults","results","size","values","filterValue","includes","length","makeAutoObservable","isNumerical","isNaN","Number","sort","b","possibleFilterValue","filterElementName","numMatchingRecords","has","delete","add","CourseStatus","SearchPanelViewModel","searchDataState","queryText","isLoading","resultsPerPage","searchFilters","courseFilters","programFilters","specialisationFilters","courseSearchResults","programSearchResults","specialisationSearchResults","activeItem","COURSES","setActiveItem","item","reaction","courseSearchData","setIsLoading","filters","course","termOffering","facultyName","schoolName","creditPoints","getCourseFilters","fireImmediately","programSearchData","program","intakePeriod","academicItemType","getProgramFilters","specialisationSearchData","specialisation","getSpecialisationFilters","autorun","searchCourses","searchPrograms","searchSpecialisations","code","toLowerCase","title","runInAction","ResetButtonStyle","backgroundColor","border","color","padding","textDecoration","fontSize","margin","cursor","width","height","FilterSection","observer","useState","expandedFilters","setExpandedFilters","filterState","getFilterState","Menu","Item","Accordion","Title","active","content","newExpandedFilters","Content","Form","Group","grouped","filterElementState","Checkbox","label","checked","isSelected","toggleValue","FilterMenuView","className","element","resetValue","fluid","as","vertical","ResultItem","ResultItemHeader","Header","ResultItemContent","ResultItemExtra","Extra","ResultCollection","ResultsPagination","Pagination","FilterColumn","Grid","Column","ResultsColumn","TermModel","year","checkTermConstraints","Error","mappingName","parseInt","split","update","obj","term","tryGetTermNumber","serializedTerm","CourseModel","contentTypeLabel","corequisites","description","effectiveDate","enrolmentRules","exclusion","implementationYear","keywords","prerequisites","urlMap","allocatedTerm","undefined","id","courseStatus","UNPLANNED","_errors","ALLOCATED","clear","COMPLETED","PLANNED","status","period","setPlanned","setCompleted","termModel","termFromSerializedData","setAllocated","e","CourseResultView","showOptions","setShowOptions","onMouseOver","onMouseLeave","Description","Button","basic","icon","setUnplanned","url","newWindow","window","open","opener","openInNewTab","Icon","CourseResultCollectionView","divided","CourseSearchTab","activePageNumber","setActivePageNumber","columns","container","Row","searchPanelViewModel","slice","Math","min","totalPages","ceil","onPageChange","activePage","ProgramResultView","onMouseEnter","progressionStatus","ProgramResultCollectionView","ProgramSearchTab","SpecialisationResultView","SpecialisationResultCollectionView","SpecialisationSearchTab","ResultsSubtextContainer","FoundResults","h4","SearchPanel","getNumResults","numResults","PROGRAMS","SPECIALISATIONS","Container","pointing","secondary","marginRight","Dropdown","text","selection","options","setResultsPerPage","MenuBarView","SearchPanelView","isActive","SearchInputItem","MenuBar","studyLevelChangeAction","setStudyLevelChangeAction","searchPanelActive","setSearchPanelActive","header","UNDERGRADUATE","setStudyLevel","POSTGRADUATE","RESEARCH","position","onOutsideClick","Input","iconPosition","placeholder","loading","onFocus","setQueryText","Modal","onClose","Actions","negative","positive","isPrerequisiteOfCurrentDraggable","hasErrors","isDragging","horizontal","tooltipStyle","CourseView","droppableIndex","prerequisitesOfCurrentDraggable","allocatedPeriod","output","join","formatTermOffering","errorList","errors","missing","missingFormatted","regex","replace","i","push","formatErrors","draggableId","index","provided","snapshot","draggableProps","dragHandleProps","innerRef","Tooltip","aria-label","aria-multiline","arrow","h3","CourseList","isDraggingOver","isValidDroppable","isPossibleTermOfCurrentDraggable","courseID","TermHeader","UocLabel","Label","CourseGroupView","courses","currentDraggableProps","isPossibleTerm","possibleTerms","_term","equals","totalUoc","reduce","droppableId","direction","droppableProps","prerequisiteCourseIds","YearView","courseGroups","courseGroup","YearPlanner","Planner","plannerViewModel","plannerState","onBeforeCapture","onDragStart","initial","getCourseById","calculateDisplayableTerms","getMissingRequirementsWhenAssigningCourseToTerm","getFlattenedPrerequisiteList","onDragEnd","destination","source","sourceGroup","getCourseGroupById","destinationGroup","splice","fromMappingName","synchronizePlannerState","clearCurrentDraggableProps","plannedGroup","yearGroups","yearGroup","completedGroup","PlannerViewModel","_courseState","_plannerState","_currentDraggableProps","makeObservable","observable","computed","action","allocatedGroups","referenceCourses","targetCourses","expectedCourses","actualCourses","coursesToRemove","coursesToAdd","indexOf","maxAllocatedYear","getMaxAllocatedYear","displayableTerms","Date","getFullYear","uniqueYears","getMappingName","getFullName","find","group","newPlannerState","synchronizeCourseList","termCourseMap","plannedCourses","completedCourses","groupId","conditionalTreeTraverser","treeNode","fnIsLeafValid","invalidations","or","childNode","and","isAndConditionalTree","CourseState","_userState","validations","getTermName","addError","COURSE_NOT_OFFERED_IN_SELECTED_TERM","getMissingPrerequisitesBeforeTerm","PREREQUISITE_REQUIREMENT_NOT_MET","getMissingPrerequisitesPlanned","PREREQUISITES_NOT_PLANNED","conflictingExclusionCourses","exclusionCourseCode","exclusionCourse","EXCLUSION_COURSE_CONFLICT","coursesMapById","coursesMapByActiveStatus","_isUpdated","_updateStudyLevel","registerStudyLevelUpdateActionCallback","axios","response","transaction","_resetCourseMap","courseObj","addCourse","_loadAllCourses","mapping","courseList","allCourses","concat","allocatedCourses","uniqueTerms","keys","maxYear","courseStatusEnum","runValidations","_course","clearErrors","fnValidate","prerequisiteTree","courseCode","isBefore","resp","courseIsOffered","activeCourses","courseModel","serializedCourseState","when","resetHard","serializedCourse","CurriculumContainer","elements","containers","order","uuidv4","CurriculumElement","itemCode","parseCurriculumContainers","childrenData","rootContainerList","childContainerList","elementList","children","relationships","parseCurriculumElements","relationData","relationshipList","relationshipObj","ProgramModel","additionalInfo","structureSummary","curriculumStructure","programConstraints","SpecialisationModel","ProgressionState","_programMapById","_specialisationMapById","loadAllPrograms","loadAllSpecialisations","programObj","addProgram","specialisationObj","addSpecialisation","allPrograms","allSpecialisations","plannedPrograms","plannedSpecialisations","programs","programModel","specialisations","specialisationModel","serializedProgressionState","serializedProgram","getProgramById","serializedSpecialisation","getSpecialisationById","SearchDataState","_progressionState","stringToStudyLevelMap","str","_studyLevel","_studyLevelUpdateActionCallbacks","studyLevelPromises","callback","all","isUpdated","updateAction","serializedUserState","level","ApplicationContext","createContext","CurriculumElementsView","applicationContext","useContext","curriculumElements","isCourse","isSpecialisation","CurriculumAccordionCreditPoints","CurriculumAccordionTitle","CurriculumDescriptionDiv","CurriculumExpandCollapseLink","CurriculumContent","CurriculumContainerView","getCreditPointsView","uocOfChildren","progressionPlannerViewModel","calculateUocOfChildren","curriculumContainer","exclusive","panels","isContainerActive","sanitizeHtml","href","toggleAllContainers","isAnySubContainerActive","entityId","onTitleClick","toggleContainer","ProgressionEntityTitle","ProgressionEntityView","entity","ProgressionContainer","ProgresionPlanner","plannedProgressionEntities","ProgressionPlannerViewModel","_progressionPlannerState","_displayableContainerPanels","getUniqueUocOfCurriculumContainer","allChildren","containerId","rootContainer","setAllContainersInactive","setAllContainersActive","AutoPlanButton","AutoPlanner","autoPlannerViewModel","autoPlan","AutoPlannerViewModel","canAllocateCourses","listYearsToTryAllocate","getYearsToTryAllocate","listTermsToTryAllocate","coursesToBeAllocated","hasChanged","counter","termAllocatedFlag","j","canAssignToTerm","termHasSpaceToAllocate","termHasLessThanThreeCourses","termIsDisabled","assignCourseToTerm","dictKey","list","App","localImportExportModel","Provider","defaultSize","ProgressionPlanner","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSA6GYA,EAaAC,EAeAC,E,mGCrINC,EAAqBC,IAAOC,OAAV,iWAkBpB,SAAAC,GAAK,OAAIA,EAAMC,SAAWC,YAAjB,iHASPC,EAA8BL,IAAOM,IAAV,6HAkClBC,EA1BW,SAAC,GAAmF,IAAjFC,EAAgF,EAAhFA,2BACrBC,EAAWC,IAAMC,OAAyB,MAEhD,OACE,eAAC,IAAMC,SAAP,WACE,cAACP,EAAD,UACE,cAACN,EAAD,CAAoBI,SAAO,EAACU,QAAS,WAAQL,EAA2BM,UAAxE,sBAIF,eAACT,EAAD,WACE,cAACN,EAAD,CAAoBc,QAAS,WAAO,IAAD,EAAE,UAAAJ,EAASM,eAAT,SAAkBC,SAAvD,oBAGA,uBACEC,IAAKR,EACLS,SAAU,SAACC,GAAD,OAAWX,EAA2BY,OAAOD,IACvDE,KAAK,OACLC,MAAO,CAAEC,QAAS,QAClBC,OAAO,4B,oEClDJC,EAAb,iDACUC,eAAyB,EADnC,6CAGE,WACE,OAAOC,KAAKD,iBAJhB,gEAOE,WAAkBE,GAAlB,SAAAC,EAAA,yDACOD,EAASE,SADhB,qBAEU,+BAFV,OAKEC,QAAQC,IAAI,4BAA8BJ,EAASE,UALrD,2CAPF,8DAgBaG,EAAb,WAGE,WAAaC,EAAsBC,EAAoCC,GAA2B,yBAF1FC,eAAiB,IAAIC,IAG3BX,KAAKU,eAAeE,IAAI,WAAY,IAAId,GACxCE,KAAKU,eAAeE,IAAI,YAAaL,GACrCP,KAAKU,eAAeE,IAAI,mBAAoBJ,GAC5CR,KAAKU,eAAeE,IAAI,cAAeH,GAP3C,mDAUE,SAAgBI,GACdC,IAAUC,OACR,IAAIC,KAAK,CAACC,KAAKC,UAAUL,IAAQ,CAAEnB,KAAM,mCAD3C,sBAEiByB,WAASC,MAAMC,SAAS,sBAFzC,YAXJ,oBAiBE,WACE,IAAMR,EAA8B,CAClCV,SAAU,EACVI,UAAW,CAACe,WAAY,KAE1BtB,KAAKU,eAAea,SAAQ,SAACC,EAAcC,GACzCZ,EAAKY,GAAOD,EAAaE,eAE3B1B,KAAK2B,gBAAgBd,KAzBzB,0EA4BE,WAA6BA,GAA7B,wBAAAX,EAAA,sEAEU0B,EAA8BX,KAAKY,MAAMhB,GAFnD,kBAIWiB,QAAQC,QAAR,UACL/B,KAAKU,eAAesB,IAAI,mBADnB,aACL,EAAqCC,YAAYL,GAAMM,MAAK,kCAC1D,EAAKxB,eAAesB,IAAI,oBADkC,aAC1D,EAAsCC,YAAYL,GAAMM,MAAK,0BAC3DJ,QAAQC,QAAQ,WACd,EAAKrB,eAAesB,IAAI,2BADV,aACd,EAA6CC,YAAYL,GAD3C,UAEd,EAAKlB,eAAesB,IAAI,sBAFV,aAEd,EAAwCC,YAAYL,YAI1DO,OAAM,SAACC,GAAYhC,QAAQgC,MAAMA,OAbvC,gCAeIhC,QAAQgC,MAAR,+BAAsC,KAAEC,QAAxC,MAfJ,wDA5BF,2EA+CE,SAAQ7C,GAA6C,IAAD,OAC5C8C,EAAa9C,EAAM+C,OAAOC,MAAO,GAEnCC,EAAS,IAAIC,WACjBD,EAAOE,OAAP,uCAAgB,WAAOC,GAAP,eAAA1C,EAAA,qEACV0C,EAAGL,cADO,aACV,EAAWM,QADD,gCAEN,EAAKC,sBAAsBF,EAAGL,OAAOM,OAAOE,YAFtC,OAGZvD,EAAM+C,OAAOS,MAAQ,GAHT,2CAAhB,sDAMAP,EAAOQ,WAAWX,OAzDtB,K,sEFqFYrE,O,yBAAAA,I,sBAAAA,M,cAaAC,O,qBAAAA,I,6EAAAA,I,yDAAAA,I,uEAAAA,I,qEAAAA,I,0DAAAA,M,cAeAC,K,8BAAAA,E,4BAAAA,E,qBAAAA,M,SGhHA+E,E,wBCjBCC,EAAb,WAGE,WACkBC,EACCC,GAChB,IAAD,gCAFgBD,OAEhB,KADiBC,mBACjB,KALMC,gBAAoC,IAAIC,IAK9C,KAJMC,gBAAoC,IAAID,IAI9C,KAIME,oBAAsB,IAAI9C,IAJhC,KAKK+C,iBAAmB,SAACC,GACzB,EAAKL,gBAAkB,IAAIC,IAAII,EAC5BC,KAAI,SAAAf,GAAM,OAAI,EAAKQ,iBAAiBR,MACpCgB,OACAC,QAAO,SAAAd,GAAK,MAAc,KAAVA,OATnB,KAaKe,YAAc,SAACC,GACpB,IAAIC,EAAUD,EAQd,OAPI,EAAKR,gBAAgBU,KAAO,IAC9BD,EAAUD,EACPF,QAAO,SAAAjB,GAAM,OAAI,YAAI,EAAKW,gBAAgBW,UACxCL,QAAO,SAAAM,GAAW,OAAI,EAAKf,iBAAiBR,GAAQwB,SAASD,MAC7DE,OAAS,MAGTL,GArBPM,YAAmBvE,MAPvB,kDA+BE,SAAsBgE,GAA4C,IAAD,OACzDQ,EAAkG,IAApF,YAAIxE,KAAKsD,gBAAgBa,UAAUL,QAAO,SAAAd,GAAK,OAAIyB,MAAMC,OAAO1B,OAASsB,OAC7F,OAAO,YAAItE,KAAKsD,gBAAgBa,UAC7BQ,MAAK,SAACzE,EAAG0E,GACR,OAAIJ,EACKE,OAAOxE,GAAKwE,OAAOE,GAEnB1E,EAAI0E,EAAI,GAAK,KAGvBhB,KAAI,SAAAiB,GACH,MAAO,CACLC,kBAAmBD,EAAoB9B,WACvCgC,mBAAoBf,EAAcF,QAAO,SAAAjB,GAAM,OAAI,EAAKQ,iBAAiBR,GAAQwB,SAASQ,MAAsBP,aA5C1H,wBAiDE,SAAkBtB,GAChB,OAAOhD,KAAKwD,gBAAgBwB,IAAIhC,KAlDpC,yBAqDE,SAAmBA,GACZhD,KAAKsD,gBAAgB0B,IAAIhC,GAI1BhD,KAAKwD,gBAAgBwB,IAAIhC,GAC3BhD,KAAKwD,gBAAgByB,OAAOjC,GAE5BhD,KAAKwD,gBAAgB0B,IAAIlC,GANzB5C,QAAQC,IAAR,iCAAsC2C,MAvD5C,wBAiEE,SAAkBA,GACXhD,KAAKsD,gBAAgB0B,IAAIhC,GAI1BhD,KAAKwD,gBAAgBwB,IAAIhC,IAC3BhD,KAAKwD,gBAAgByB,OAAOjC,GAJ5B5C,QAAQC,IAAR,iCAAsC2C,QAnE5C,M,SDiBYE,O,qBAAAA,I,uBAAAA,I,sCAAAA,M,KAML,I,gBE1BKiC,EF0BCC,EAAb,WACE,WACkBC,GACf,IAAD,gCADgBA,kBAChB,KA+BKC,UAAoB,GA/BzB,KAgCKC,WAAqB,EAhC1B,KAiCKC,eAAyB,GAjC9B,KAmCKC,cAAgC,CACrCC,cAAe,GACfC,eAAgB,GAChBC,sBAAuB,IAtCvB,KAwCK5B,cAAgC,CACrC6B,oBAAqB,GACrBC,qBAAsB,GACtBC,4BAA6B,IA3C7B,KA6CKC,WAA8B9C,EAAgB+C,QA7CnD,KA+CKC,cAAgB,SAACC,GACtB,EAAKH,WAAaG,GA/ClB5B,YAAyCvE,MAEzCoG,aAAS,kBAAMf,EAAgBgB,oBAAkB,WAC/C,EAAKC,cAAa,GAClB,EAAKb,cAAcC,cGlCO,SAAC/B,GAC/B,IAAM4C,EAAsC,CAC1C,IAAIpD,EAAyB,oBAAoB,SAACqD,GAAD,OAAYA,EAAOC,gBACpE,IAAItD,EAAyB,WAAW,SAACqD,GAAD,MAAY,CAACA,EAAOE,gBAC5D,IAAIvD,EAAyB,UAAU,SAACqD,GAAD,MAAY,CAACA,EAAOG,eAC3D,IAAIxD,EAAyB,iBAAiB,SAACqD,GAAD,MAAY,CAACA,EAAOI,aAAa7D,gBAGjF,OADAwD,EAAQhF,SAAQ,SAAAuC,GAAM,OAAIA,EAAOJ,iBAAiBC,MAC3C4C,EH0BgCM,CAAiBxB,EAAgBgB,oBACnE,CAACS,iBAAiB,IAErBV,aAAS,kBAAMf,EAAgB0B,qBAAmB,WAChD,EAAKT,cAAa,GAClB,EAAKb,cAAcE,eG5BQ,SAAChC,GAChC,IAAM4C,EAAuC,CAC3C,IAAIpD,EAA0B,kBAAkB,SAAC6D,GAAD,OAAaA,EAAQC,gBACrE,IAAI9D,EAA0B,WAAW,SAAC6D,GAAD,MAAa,CAACA,EAAQN,gBAC/D,IAAIvD,EAA0B,UAAU,SAAC6D,GAAD,MAAa,CAACA,EAAQL,eAC9D,IAAIxD,EAA0B,iBAAiB,SAAC6D,GAAD,MAAa,CAACA,EAAQJ,aAAa7D,eAClF,IAAII,EAA0B,sBAAsB,SAAC6D,GAAD,MAAa,CAACA,EAAQE,sBAG5E,OADAX,EAAQhF,SAAQ,SAAAuC,GAAM,OAAIA,EAAOJ,iBAAiBC,MAC3C4C,EHmBiCY,CAAkB9B,EAAgB0B,qBACrE,CAACD,iBAAiB,IAErBV,aAAS,kBAAMf,EAAgB+B,4BAA0B,WACvD,EAAKd,cAAa,GAClB,EAAKb,cAAcG,sBGrBe,SAACjC,GACvC,IAAM4C,EAA8C,CAClD,IAAIpD,EAAiC,WAAW,SAACkE,GAAD,MAAoB,CAACA,EAAeX,gBACpF,IAAIvD,EAAiC,UAAU,SAACkE,GAAD,MAAoB,CAACA,EAAeV,eACnF,IAAIxD,EAAiC,iBAAiB,SAACkE,GAAD,MAAoB,CAACA,EAAeT,aAAa7D,eACvG,IAAII,EAAiC,sBAAsB,SAACkE,GAAD,MAAoB,CAACA,EAAeH,sBAGjG,OADAX,EAAQhF,SAAQ,SAAAuC,GAAM,OAAIA,EAAOJ,iBAAiBC,MAC3C4C,EHawCe,CAAyBjC,EAAgB+B,4BACnF,CAACN,iBAAiB,IAErBS,aAAQ,WACN,EAAKC,mBAGPD,aAAQ,WACN,EAAKE,oBAGPF,aAAQ,WACN,EAAKG,2BA9BX,gDA8DE,SAAapC,GACXtF,KAAKsF,UAAYA,IA/DrB,0BAkEE,SAAaC,GACXvF,KAAKuF,UAAYA,IAnErB,+BAsEE,SAAkBC,GAChBxF,KAAKwF,eAAiBA,IAvE1B,2BA0EE,WAAiB,IAAD,OACVvB,EAAUjE,KAAKqF,gBAAgBgB,iBACZ,KAAnBrG,KAAKsF,YACPrB,EAAUjE,KAAKqF,gBAAgBgB,iBAC5BvC,QAAO,SAAA0C,GACN,OAAOA,EAAOmB,KAAKC,cAAcvD,SAAS,EAAKiB,UAAUsC,gBACpDpB,EAAOqB,MAAMD,cAAcvD,SAAS,EAAKiB,UAAUsC,mBAG9D5H,KAAKyF,cAAcC,cAAcnE,SAAQ,SAACuC,GACxCG,EAAUH,EAAOC,YAAYE,MAE/B6D,aAAY,kBAAM,EAAK9D,cAAc6B,oBAAsB5B,OAtF/D,4BA0FE,WAAkB,IAAD,OACXA,EAAUjE,KAAKqF,gBAAgB0B,kBACZ,KAAnB/G,KAAKsF,YACPrB,EAAUjE,KAAKqF,gBAAgB0B,kBAC5BjD,QAAO,SAAAkD,GACN,OAAOA,EAAQW,KAAKC,cAAcvD,SAAS,EAAKiB,UAAUsC,gBACrDZ,EAAQa,MAAMD,cAAcvD,SAAS,EAAKiB,UAAUsC,mBAG/D5H,KAAKyF,cAAcE,eAAepE,SAAQ,SAACuC,GACzCG,EAAUH,EAAOC,YAAYE,MAE/B6D,aAAY,kBAAM,EAAK9D,cAAc8B,qBAAuB7B,OAtGhE,mCAyGE,WAAyB,IAAD,OAClBA,EAAUjE,KAAKqF,gBAAgB+B,yBACZ,KAAnBpH,KAAKsF,YACPrB,EAAUjE,KAAKqF,gBAAgB+B,yBAC5BtD,QAAO,SAAAuD,GACN,OAAOA,EAAeM,KAAKC,cAAcvD,SAAS,EAAKiB,UAAUsC,gBAC5DP,EAAeQ,MAAMD,cAAcvD,SAAS,EAAKiB,UAAUsC,mBAGtE5H,KAAKyF,cAAcG,sBAAsBrE,SAAQ,SAACuC,GAChDG,EAAUH,EAAOC,YAAYE,MAE/B6D,aAAY,kBAAM,EAAK9D,cAAc+B,4BAA8B9B,SArHvE,K,mBI7Ba8D,GAAmB,CAC9BC,gBAAiB,UACjBC,OAAQ,OACRC,MAAO,QACPC,QAAS,YACTC,eAAgB,OAChBxI,QAAS,eACTyI,SAAU,OACVC,OAAQ,UACRC,OAAQ,UACRC,MAAO,OACPC,OAAQ,Q,UCHGC,GAAgBC,aAAS,SAAKpK,GAAmC,IAAD,EAC7BqK,mBAAS,IAAIrF,KADgB,mBACpEsF,EADoE,KACnDC,EADmD,KAG3E,OAAO,cAAC,IAAD,UAEH,WACE,IAAIC,EAAcxK,EAAMuF,OAAOkF,eAAezK,EAAMyF,eACpD,OACI,eAACiF,EAAA,EAAKC,KAAN,WACE,cAACC,GAAA,EAAUC,MAAX,CACEC,OAAQR,EAAgB7D,IAAIzG,EAAMuF,OAAOV,MACzCkG,QAAS/K,EAAMuF,OAAOV,KACtBlE,QAAS,WACP,IAAIqK,EAAqB,IAAIhG,IAAIsF,GAC7BA,EAAgB7D,IAAIzG,EAAMuF,OAAOV,MACnCmG,EAAmBtE,OAAO1G,EAAMuF,OAAOV,MAEvCmG,EAAmBrE,IAAI3G,EAAMuF,OAAOV,MAEtC0F,EAAmBS,MAGvB,cAACJ,GAAA,EAAUK,QAAX,CACEH,OAAQR,EAAgB7D,IAAIzG,EAAMuF,OAAOV,MACzCkG,QACE,cAACG,GAAA,EAAD,UACE,cAACA,GAAA,EAAKC,MAAN,CAAYC,SAAO,EAAnB,SAEIZ,EAAYnF,KAAI,SAAAgG,GACd,OAAO,cAACH,GAAA,EAAKI,SAAN,CAELC,MAAK,UAAKF,EAAmB9E,mBAC7B1B,KAAM7E,EAAMuF,OAAOV,KACnB1D,KAAK,WACLsD,MAAO4G,EAAmB9E,kBAC1BiF,QAASxL,EAAMuF,OAAOkG,WAAWJ,EAAmB9E,mBACpD5F,QAAS,WACPX,EAAMuF,OAAOmG,YAAYL,EAAmB9E,qBAPzC8E,EAAmB9E,8BAtBxBvG,EAAMuF,OAAOV,YCP5B8G,I,OAAiBvB,aAAS,SAAKpK,GAS1C,OACE,cAAC,IAAD,UAEI,WACE,OAAO,gCACL,qBAAK4L,UAAU,cAAf,SACE,wBAAQxK,MAAOoI,GAAkB7I,QAAS,WAbpDX,EAAMgI,QAAQhF,SAAQ,SAACuC,GACrBA,EAAOkF,eAAezK,EAAMyF,eAAezC,SAAQ,SAAC6I,GAClDtG,EAAOuG,WAAWD,EAAQtF,0BAWpB,4BAEF,cAACqE,GAAA,EAAD,CAAWmB,OAAK,EAACC,GAAItB,IAAMuB,UAAQ,EAAnC,SAEIjM,EAAMgI,QAAQ3C,KAAI,SAAAE,GAChB,OAAO,cAAC4E,GAAD,CACL1E,cAAezF,EAAMyF,cACrBF,OAAQA,mB,oBC7Bf2G,GAAapM,YAAO6K,KAAP7K,CAAH,+QAiBVqM,GAAmBrM,YAAO6K,KAAKyB,OAAZtM,CAAH,4BAGhBuM,GAAoBvM,YAAO6K,KAAKM,QAAZnL,CAAH,0EAOjBwM,GAAkBxM,YAAO6K,KAAK4B,MAAZzM,CAAH,iGAQf0M,GAAmB1M,YAAO6K,KAAKQ,MAAZrL,CAAH,4FAOhB2M,GAAoB3M,YAAO4M,KAAP5M,CAAH,iDAIjB6M,GAAe7M,YAAO8M,IAAKC,OAAZ/M,CAAH,4FAMZgN,GAAgBhN,YAAO8M,IAAKC,OAAZ/M,CAAH,4F,SCrDbiN,GAAb,WAII,WACIC,EACAnI,GACD,yBANHmI,UAME,OALFnI,UAKE,EACEmB,YAAmBvE,MACnBA,KAAKwL,qBAAqBD,EAAMnI,GAEhCpD,KAAKuL,KAAOA,EACZvL,KAAKoD,KAAOA,EAZpB,wDAmBI,SAA6BmI,EAAenI,GACxC,IAAKmI,EAAM,MAAME,MAAM,UAAD,OAAWF,EAAX,+BACtB,IAAKnI,EAAM,MAAMqI,MAAM,UAAD,OAAWrI,EAAX,iCArB9B,0BAiCI,WACI,MAAM,GAAN,OAAUpD,KAAKuL,KAAf,YAAuBvL,KAAKoD,QAlCpC,oBAqCI,SAAOmI,EAAcnI,GACjBpD,KAAKuL,KAAOA,EACZvL,KAAKoD,KAAOA,IAvCpB,mCA0CI,SAAsBsI,GAClB,IAAIH,EAAOI,SAASD,EAAYE,MAAM,KAAK,IACvCxI,EAAOsI,EAAYE,MAAM,KAAK,GAClC5L,KAAK6L,OAAON,EAAMnI,KA7C1B,uBAgDI,WACI,MAAM,GAAN,OAAUpD,KAAKuL,KAAf,YAAuBvL,KAAKoD,QAjDpC,uBAoDI,WACI,MAAM,GAAN,OAAUpD,KAAKoD,QArDvB,8BA+DI,WACI,OAAQpD,KAAKoD,MACT,IAAK,cACD,OAAO,EACX,IAAK,SACD,OAAO,EACX,IAAK,SACD,OAAO,EACX,IAAK,SACD,OAAO,EACX,QACI,UA1EhB,oBA8EI,SAAc0I,GACV,QAAKA,IAGE9L,KAAKuL,OAASO,EAAIP,MAAQvL,KAAKoD,OAAS0I,EAAI1I,QAlF3D,sBAqFI,SAAgB2I,GAAkB,IAAD,IAC7B,OAAO/L,KAAKuL,KAAOQ,EAAKR,MAChBQ,EAAKR,OAASvL,KAAKuL,OAAU,UAACvL,KAAKgM,0BAAN,QAA4B,KAA5B,UAAmCD,EAAKC,0BAAxC,QAA8D,MAvF3G,uBA0FI,WACI,MAAO,CACHT,KAAMvL,KAAKuL,KACXnI,KAAMpD,KAAKoD,QA7FvB,yBAiGI,SAAY6I,GACR,MAAMR,MAAM,8FAAD,OAA+FQ,EAA/F,SAlGnB,qCAeI,SAA8BA,GAC1B,OAAO,IAAIX,EAAUW,EAAeV,KAAMU,EAAe7I,QAhBjE,6BAwDI,SAAuBsI,GAInB,OAAO,IAAIJ,EAHAK,SAASD,EAAYE,MAAM,KAAK,IAC3BF,EAAYE,MAAM,KAAK,QA1D/C,M,SNEYzG,O,yBAAAA,I,qBAAAA,I,yBAAAA,I,0BAAAA,M,KAOL,I,qBAAM+G,GAAb,WAOE,WACkBvE,EACAwE,EACAC,EACAxF,EACAyF,EACAC,EACAC,EACAC,EACA9F,EACA+F,EACAC,EACAC,EACAhG,EACArF,EACAmF,EACAoB,EACA+E,GACf,yBAjBejF,OAiBhB,KAhBgBwE,mBAgBhB,KAfgBC,eAehB,KAdgBxF,eAchB,KAbgByF,cAahB,KAZgBC,gBAYhB,KAXgBC,iBAWhB,KAVgBC,YAUhB,KATgB9F,cAShB,KARgB+F,qBAQhB,KAPgBC,WAOhB,KANgBC,gBAMhB,KALgBhG,aAKhB,KAJgBrF,aAIhB,KAHgBmF,eAGhB,KAFgBoB,QAEhB,KADgB+E,SAChB,KAxBFC,mBAAuCC,EAwBrC,KAvBcC,QAuBd,OAtBKC,aAA6B7H,EAAa8H,UAsB/C,KApBMC,QAAuB,IAAI3J,IAqBjCvD,KAAK+M,GAAKpF,EACVpD,YAAmBvE,MA3BvB,gDA8BE,SAAa+L,GACX/L,KAAKgN,aAAe7H,EAAagI,UACjCnN,KAAK6M,cAAgBd,IAhCzB,0BAmCE,WACE/L,KAAKkN,QAAQE,QACbpN,KAAKgN,aAAe7H,EAAa8H,UACjCjN,KAAK6M,mBAAgBC,IAtCzB,0BAyCE,WACE9M,KAAKkN,QAAQE,QACbpN,KAAKgN,aAAe7H,EAAakI,UACjCrN,KAAK6M,mBAAgBC,IA5CzB,wBA+CE,WACE9M,KAAKgN,aAAe7H,EAAamI,QACjCtN,KAAK6M,mBAAgBC,IAjDzB,sBAqDE,SAAS1K,GACPpC,KAAKkN,QAAQhI,IAAI9C,KAtDrB,yBAyDE,SAAaA,GACXpC,KAAKkN,QAAQjI,OAAO7C,KA1DxB,uBA6DE,WACE,OAAOpC,KAAKkN,QAAQhJ,KAAO,IA9D/B,yBAiEE,WACElE,KAAKkN,QAAQE,UAlEjB,kBAqEE,WACE,OAAO,YAAIpN,KAAKkN,WAtEpB,uBA0EE,WACE,OAAIlN,KAAKgN,eAAiB7H,EAAagI,UAC9B,CACLJ,GAAI/M,KAAK+M,GACTQ,OAAQpI,EAAanF,KAAKgN,eAGrB,CACLD,GAAI/M,KAAK+M,GACTQ,OAAQpI,EAAanF,KAAKgN,cAC1BQ,OAAM,UAAExN,KAAK6M,qBAAP,aAAE,EAAoBnL,aAJxB,IAAD,IAhFX,gEAyFE,WAAkB8E,GAAlB,eAAAtG,EAAA,yDACMsG,EAAOuG,KAAO/M,KAAK+M,GADzB,uBAEI3M,QAAQgC,MAAR,oCAA2CoE,EAAOuG,GAAlD,iBAA6D/M,KAAK+M,GAAlE,MAFJ,+BAMSvG,EAAO+G,OANhB,cAOUpI,EAAaA,EAAamI,SAPpC,SAWUnI,EAAaA,EAAakI,WAXpC,SAeUlI,EAAaA,EAAagI,WAfpC,0BAQMnN,KAAKyN,aARX,mCAYMzN,KAAK0N,eAZX,6BAgBM,GAAIlH,EAAOgH,OACT,IACMG,EAAYrC,GAAUsC,uBAAuBpH,EAAOgH,QACxDxN,KAAK6N,aAAaF,GAClB,MAAOG,GACP1N,QAAQgC,MAAR,+CAAsDoE,EAAOgH,OAA7D,aAAwEM,EAAEzL,QAA1E,WAIFjC,QAAQgC,MAAR,wDAA+DoE,EAAOuG,KAzB9E,oCA8BM3M,QAAQgC,MAAR,iBAAwBoE,EAAO+G,OAA/B,2BA9BN,iDAzFF,6EA4HE,WACE,MAAM,WAAN,OAAkBvN,KAAK+M,GAAvB,aAA8B/M,KAAK2H,KAAnC,cAA6C3H,KAAK6H,WA7HtD,KOFakG,GAAmBpF,aAAS,SAACpK,GAA0C,IAAD,EAC3CqK,oBAAS,GADkC,mBAC1EoF,EAD0E,KAC7DC,EAD6D,KAQjF,OAAO,cAAC,IAAD,UAEH,WACE,OACE,eAACxD,GAAD,CACEyD,YAAa,kBAAMD,GAAe,IAClCE,aAAc,kBAAMF,GAAe,IAFrC,UAIE,eAACrD,GAAD,WACE,cAACF,GAAD,UAAmBnM,EAAMiI,OAAOmB,OAChC,cAACuB,GAAA,EAAKkF,YAAN,UAAmB7P,EAAMiI,OAAOqB,WAG/BmG,EAkBC,cAACpD,GAAD,UACE,cAACC,GAAD,UACE,eAACwD,EAAA,EAAO3E,MAAR,WACE,cAAC2E,EAAA,EAAD,CACEC,MAAS/P,EAAMiI,OAAOwG,eAAiB7H,EAAamI,SAAW/O,EAAMiI,OAAOwG,eAAiB7H,EAAagI,UAC1GoB,KAAMhQ,EAAMiI,OAAOwG,eAAiB7H,EAAagI,UAAY,6BAA+B,WAC5F7D,QAAS/K,EAAMiI,OAAOwG,eAAiB7H,EAAagI,UAAY,YAAc,aAC9EjF,MAAO3J,EAAMiI,OAAOwG,eAAiB7H,EAAagI,UAAY,SAAW,OACzEjJ,KAAK,SACLhF,QAAU,WACJX,EAAMiI,OAAOwG,eAAiB7H,EAAamI,SAAW/O,EAAMiI,OAAOwG,eAAiB7H,EAAagI,UACnG5O,EAAMiI,OAAOgI,eAEbjQ,EAAMiI,OAAOiH,gBAInB,cAACY,EAAA,EAAD,CACEC,MAAS/P,EAAMiI,OAAOwG,eAAiB7H,EAAakI,UACpDkB,KAAK,QACLjF,QAAQ,OACRpB,MAAM,QACNhE,KAAK,SACLhF,QAAU,WACJX,EAAMiI,OAAOwG,eAAiB7H,EAAakI,UAC7C9O,EAAMiI,OAAOgI,eAEbjQ,EAAMiI,OAAOkH,kBAInB,cAACW,EAAA,EAAD,CACEC,OAAS,EACTC,KAAM,OACNjF,QAAS,WACTpB,MAAO,MACPhE,KAAK,SACLhF,QAAU,kBAzEX,SAACuP,GACpB,IAAMC,EAAYC,OAAOC,KAAKH,EAAK,SAAU,uBACzCC,IAAWA,EAAUG,OAAS,MAuEEC,CAAa,mCAAD,OAAoCvQ,EAAMiI,OAAOoG,mBArDrF,eAAChC,GAAD,WACE,eAACC,GAAD,WAAkBtM,EAAMiI,OAAOI,aAA/B,UACA,cAACiE,GAAD,UAEItM,EAAMiI,OAAOwG,eAAiB7H,EAAamI,QACvC,cAACyB,GAAA,EAAD,CAAM7G,MAAM,MAAMiC,UAAU,aAC5B5L,EAAMiI,OAAOwG,eAAiB7H,EAAagI,UACzC,cAAC4B,GAAA,EAAD,CAAM7G,MAAM,SAASiC,UAAU,+BAC/B5L,EAAMiI,OAAOwG,eAAiB7H,EAAakI,UACzC,cAAC0B,GAAA,EAAD,CAAM7G,MAAM,QAAQiC,UAAU,UAC9B,iBCzBjB6E,IANY3Q,YAAO6K,KAAKQ,MAAZrL,CAAH,6EAMoBsK,aAAS,SAACpK,GAClD,OAAO,cAAC,IAAD,UAEH,WACE,OACE,cAACwM,GAAD,CAAkBkE,SAAO,EAAzB,SAEI1Q,EAAM0F,QAAQL,KAAI,SAAA4C,GAChB,OACE,cAACuH,GAAD,CAAkBvH,OAAQA,gBClB/B0I,GAAkBvG,aAAS,SAACpK,GAA4B,IAAD,EAClBqK,mBAAS,GADS,mBAC3DuG,EAD2D,KACzCC,EADyC,KAIlE,OAAO,cAAC,IAAD,UAEH,WACE,OACE,mCACE,cAACjE,EAAA,EAAD,CAAMkE,QAAS,GAAIJ,SAAO,EAACK,WAAS,EAApC,SACE,eAACnE,EAAA,EAAKoE,IAAN,WACE,cAACrE,GAAD,CAA2B1C,MAAO,EAAlC,SACE,cAAC0B,GAAD,CACElG,cAAezF,EAAMiR,qBAAqBxL,cAAc6B,oBACxDU,QAAShI,EAAMiR,qBAAqB/J,cAAcC,iBAHpC,UAMlB,eAAC2F,GAAD,CAA6B7C,MAAO,GAApC,UACE,cAACwG,GAAD,CAA4B/K,QAC1B1F,EAAMiR,qBAAqBxL,cAAc6B,oBACtC4J,MACClR,EAAMiR,qBAAqBhK,gBAAkB2J,EAAmB,GAChEO,KAAKC,IAAIpR,EAAMiR,qBAAqBxL,cAAc6B,oBAAoBvB,OAAQ/F,EAAMiR,qBAAqBhK,eAAiB2J,MAGhI,cAACnE,GAAD,CACE4E,WAAYF,KAAKG,KAAKtR,EAAMiR,qBAAqBxL,cAAc6B,oBAAoBvB,OAAS/F,EAAMiR,qBAAqBhK,gBACvHsK,aAAc,SAAChC,EAAGjN,GAChBuO,EAAoB1K,OAAO7D,EAAKkP,cAGlCA,WAAYZ,MAdG,wBCftBa,GAAoBrH,aAAS,SAACpK,GAA2C,IAAD,EAC7CqK,oBAAS,GADoC,mBAC5EoF,EAD4E,KAC/DC,EAD+D,KAQnF,OAAO,cAAC,IAAD,UAEH,WACE,OACE,eAACxD,GAAD,CACEwF,aAAc,kBAAMhC,GAAe,IACnCE,aAAc,kBAAMF,GAAe,IAFrC,UAIE,eAACrD,GAAD,WACE,cAAC1B,GAAA,EAAKyB,OAAN,UAAcpM,EAAMyI,QAAQa,QAC5B,eAACqB,GAAA,EAAKkF,YAAN,WAAmB7P,EAAMyI,QAAQE,iBAAjC,MAAsD3I,EAAMyI,QAAQW,WAGnEqG,EAaC,cAACpD,GAAD,UACE,cAACC,GAAD,UACE,eAACwD,EAAA,EAAO3E,MAAR,WACE,cAAC2E,EAAA,EAAD,CACEC,MAAS/P,EAAMyI,QAAQkJ,oBAAsBjS,EAAkBgP,UAC/DsB,KAAMhQ,EAAMyI,QAAQkJ,oBAAsBjS,EAAkBgP,UAAY,cAAgB,eACxF3D,QAAS/K,EAAMyI,QAAQkJ,oBAAsBjS,EAAkBgP,UAAY,MAAQ,SACnF/E,MAAO3J,EAAMyI,QAAQkJ,oBAAsBjS,EAAkBgP,UAAY,QAAU,MACnF/I,KAAK,SACLhF,QAAU,WACJX,EAAMyI,QAAQkJ,oBAAsBjS,EAAkBgP,UACxD1O,EAAMyI,QAAQyG,aAEdlP,EAAMyI,QAAQwH,kBAIpB,cAACH,EAAA,EAAD,CACEC,OAAS,EACTC,KAAM,OACNjF,QAAS,WACTpB,MAAO,MACPhE,KAAK,SACLhF,QAAU,kBAtDX,SAACuP,GACpB,IAAMC,EAAYC,OAAOC,KAAKH,EAAK,SAAU,uBACzCC,IAAWA,EAAUG,OAAS,MAoDEC,CAAa,mCAAD,OAAoCvQ,EAAMyI,QAAQ4F,mBAlCtF,eAAChC,GAAD,WACE,eAACC,GAAD,WAAkBtM,EAAMyI,QAAQJ,aAAhC,UACA,cAACiE,GAAD,UAEItM,EAAMyI,QAAQkJ,oBAAsBjS,EAAkBqP,QAClD,cAACyB,GAAA,EAAD,CAAM7G,MAAM,QAAQiC,UAAU,+BAC9B,2CC/BbgG,GAA8BxH,aAAS,SAACpK,GACnD,OAAO,cAAC,IAAD,UAEH,WACE,OACE,cAACwM,GAAD,CAAkBkE,SAAO,EAAzB,SAEI1Q,EAAM0F,QAAQL,KAAI,SAAAoD,GAChB,OACE,cAACgJ,GAAD,CAAmBhJ,QAASA,eCTjCoJ,GAAmBzH,aAAS,SAACpK,GAA4B,IAAD,EACnBqK,mBAAS,GADU,mBAC5DuG,EAD4D,KAC1CC,EAD0C,KAInE,OAAO,cAAC,IAAD,UAEH,WACE,OACE,mCACE,cAACjE,EAAA,EAAD,CAAMkE,QAAS,GAAIJ,SAAO,EAACK,WAAS,EAApC,SACE,eAACnE,EAAA,EAAKoE,IAAN,WACE,cAACrE,GAAD,CAA2B1C,MAAO,EAAlC,SACE,cAAC0B,GAAD,CACElG,cAAezF,EAAMiR,qBAAqBxL,cAAc8B,qBACxDS,QAAShI,EAAMiR,qBAAqB/J,cAAcE,kBAHpC,UAMlB,eAAC0F,GAAD,CAA6B7C,MAAO,GAApC,UACE,cAAC2H,GAAD,CAA6BlM,QAC3B1F,EAAMiR,qBAAqBxL,cAAc8B,qBACtC2J,MACClR,EAAMiR,qBAAqBhK,gBAAkB2J,EAAmB,GAChEO,KAAKC,IAAIpR,EAAMiR,qBAAqBxL,cAAc8B,qBAAqBxB,OAAQ/F,EAAMiR,qBAAqBhK,eAAiB2J,MAGjI,cAACnE,GAAD,CACE4E,WAAYF,KAAKG,KAAKtR,EAAMiR,qBAAqBxL,cAAc8B,qBAAqBxB,OAAS/F,EAAMiR,qBAAqBhK,gBACxHsK,aAAc,SAAChC,EAAGjN,GAChBuO,EAAoB1K,OAAO7D,EAAKkP,cAGlCA,WAAYZ,MAdG,wBCftBkB,GAA2B1H,aAAS,SAACpK,GAAkD,IAAD,EAC3DqK,oBAAS,GADkD,mBAC1FoF,EAD0F,KAC7EC,EAD6E,KAQjG,OAAO,cAAC,IAAD,UAEH,WACE,OACE,eAACxD,GAAD,CACEwF,aAAc,kBAAMhC,GAAe,IACnCE,aAAc,kBAAMF,GAAe,IAFrC,UAIE,eAACrD,GAAD,WACE,cAAC1B,GAAA,EAAKyB,OAAN,UAAcpM,EAAM8I,eAAeQ,QACnC,eAACqB,GAAA,EAAKkF,YAAN,WAAmB7P,EAAM8I,eAAeH,iBAAxC,MAA6D3I,EAAM8I,eAAeM,WAGjFqG,EAaC,cAACpD,GAAD,UACE,cAACC,GAAD,UACE,eAACwD,EAAA,EAAO3E,MAAR,WACE,cAAC2E,EAAA,EAAD,CACEC,MAAS/P,EAAM8I,eAAe6I,oBAAsBjS,EAAkBgP,UACtEsB,KAAMhQ,EAAM8I,eAAe6I,oBAAsBjS,EAAkBgP,UAAY,cAAgB,eAC/F3D,QAAS/K,EAAM8I,eAAe6I,oBAAsBjS,EAAkBgP,UAAY,MAAQ,SAC1F/E,MAAO3J,EAAM8I,eAAe6I,oBAAsBjS,EAAkBgP,UAAY,QAAU,MAC1F/I,KAAK,SACLhF,QAAU,WACJX,EAAM8I,eAAe6I,oBAAsBjS,EAAkBgP,UAC/D1O,EAAM8I,eAAeoG,aAErBlP,EAAM8I,eAAemH,kBAI3B,cAACH,EAAA,EAAD,CACEC,OAAS,EACTC,KAAM,OACNjF,QAAS,WACTpB,MAAO,MACPhE,KAAK,SACLhF,QAAU,kBAtDX,SAACuP,GACpB,IAAMC,EAAYC,OAAOC,KAAKH,EAAK,SAAU,wBACzCC,IAAWA,EAAUG,OAAS,MAoDEC,CAAa,mCAAD,OAAoCvQ,EAAM8I,eAAeuF,mBAlC7F,eAAChC,GAAD,WACE,eAACC,GAAD,WAAkBtM,EAAM8I,eAAeT,aAAvC,UACA,cAACiE,GAAD,UAEItM,EAAM8I,eAAe6I,oBAAsBjS,EAAkBqP,QACzD,cAACyB,GAAA,EAAD,CAAM7G,MAAM,QAAQiC,UAAU,+BAC9B,2CC/BbmG,GAAqC3H,aAAS,SAACpK,GAC1D,OAAO,cAAC,IAAD,UAEH,WACE,OACE,cAACwM,GAAD,CAAkBkE,SAAO,EAAzB,SAEI1Q,EAAM0F,QAAQL,KAAI,SAAAyD,GAChB,OACE,cAACgJ,GAAD,CAA0BhJ,eAAgBA,eCT/CkJ,GAA0B5H,aAAS,SAACpK,GAA4B,IAAD,EAC1BqK,mBAAS,GADiB,mBACnEuG,EADmE,KACjDC,EADiD,KAI1E,OAAO,cAAC,IAAD,UAEH,WACE,OACE,mCACE,cAACjE,EAAA,EAAD,CAAMkE,QAAS,GAAIJ,SAAO,EAACK,WAAS,EAApC,SACE,eAACnE,EAAA,EAAKoE,IAAN,WACE,cAACrE,GAAD,CAA2B1C,MAAO,EAAlC,SACE,cAAC0B,GAAD,CACElG,cAAezF,EAAMiR,qBAAqBxL,cAAc+B,4BACxDQ,QAAShI,EAAMiR,qBAAqB/J,cAAcG,yBAHpC,UAMlB,eAACyF,GAAD,CAA6B7C,MAAO,GAApC,UACE,cAAC8H,GAAD,CAAoCrM,QAClC1F,EAAMiR,qBAAqBxL,cAAc+B,4BACtC0J,MACClR,EAAMiR,qBAAqBhK,gBAAkB2J,EAAmB,GAChEO,KAAKC,IAAIpR,EAAMiR,qBAAqBxL,cAAc+B,4BAA4BzB,OAAQ/F,EAAMiR,qBAAqBhK,eAAiB2J,MAGxI,cAACnE,GAAD,CACE4E,WAAYF,KAAKG,KAAKtR,EAAMiR,qBAAqBxL,cAAc+B,4BAA4BzB,OAAS/F,EAAMiR,qBAAqBhK,gBAC/HsK,aAAc,SAAChC,EAAGjN,GAChBuO,EAAoB1K,OAAO7D,EAAKkP,cAGlCA,WAAYZ,MAdG,wBChB7BqB,GAA0BnS,IAAOM,IAAV,gIAOvB8R,GAAepS,IAAOqS,GAAV,8EAoGHC,GA1FKhI,aAAS,YAAkD,IAA/C6G,EAA8C,EAA9CA,qBACxBoB,EAAgB,WACpB,IAAIC,GAAc,EAClB,OAAQrB,EAAqBxJ,YAC3B,KAAM9C,EAAgB+C,QACpB4K,EAAarB,EAAqBxL,cAAc6B,oBAAoBvB,OACpE,MACF,KAAMpB,EAAgB4N,SACpBD,EAAarB,EAAqBxL,cAAc8B,qBAAqBxB,OACrE,MACF,KAAMpB,EAAgB6N,gBACpBF,EAAarB,EAAqBxL,cAAc+B,4BAA4BzB,OAGhF,OAAOuM,GAGT,OAAO,cAAC,IAAD,UAEH,WACE,OACE,cAAC,IAAM5R,SAAP,UACE,eAAC+R,EAAA,EAAD,WACE,eAAC/H,EAAA,EAAD,CAAMgI,UAAQ,EAACC,WAAS,EAAxB,UACE,cAACjI,EAAA,EAAKC,KAAN,CACE9F,KAAM,UACNiG,OAAQmG,EAAqBxJ,aAAe9C,EAAgB+C,QAC5D/G,QAAS,kBAAMsQ,EAAqBtJ,cAAchD,EAAgB+C,UAHpE,4BAKeuJ,EAAqBxL,cAAc6B,oBAAoBvB,OALtE,OAOA,cAAC2E,EAAA,EAAKC,KAAN,CACE9F,KAAM,WACNiG,OAAQmG,EAAqBxJ,aAAe9C,EAAgB4N,SAC5D5R,QAAS,kBAAMsQ,EAAqBtJ,cAAchD,EAAgB4N,WAHpE,6BAKgBtB,EAAqBxL,cAAc8B,qBAAqBxB,OALxE,OAOA,cAAC2E,EAAA,EAAKC,KAAN,CACE9F,KAAM,kBACNiG,OAAQmG,EAAqBxJ,aAAe9C,EAAgB6N,gBAC5D7R,QAAS,kBAAMsQ,EAAqBtJ,cAAchD,EAAgB6N,kBAHpE,oCAKuBvB,EAAqBxL,cAAc+B,4BAA4BzB,OALtF,UAQF,eAACkM,GAAD,WACE,eAACC,GAAD,oBACSG,IADT,UACqD,IAApBA,IAAwB,GAAK,OAG9D,iCACE,sBAAMjR,MAAO,CAAEwR,YAAa,QAA5B,8BACA,cAACC,EAAA,EAAD,CACEC,KAAM7B,EAAqBhK,eAAezC,WAC1CuO,WAAS,EACTC,QAAS,CACP,CAAEF,KAAM,GAAIrO,MAAO,IACnB,CAAEqO,KAAM,GAAIrO,MAAO,IACnB,CAAEqO,KAAM,GAAIrO,MAAO,IACnB,CAAEqO,KAAM,GAAIrO,MAAO,KAErBzD,SAAU,SAACuO,EAAGjN,GAAW2O,EAAqBgC,kBAAkB9M,OAAO7D,EAAKmC,iBAKhFwM,EAAqBxJ,aAAe9C,EAAgB+C,QAChD,cAACiJ,GAAD,CAAiBM,qBAAsBA,IACvC,6BAGJA,EAAqBxJ,aAAe9C,EAAgB4N,SAChD,cAACV,GAAD,CAAkBZ,qBAAsBA,IACxC,6BAGJA,EAAqBxJ,aAAe9C,EAAgB6N,gBAChD,cAACR,GAAD,CAAyBf,qBAAsBA,IAC/C,wC,qBC3FdiC,GAAcpT,YAAO4K,IAAP5K,CAAH,2EAOXqT,GAAkBrT,IAAOM,IAAV,8OAMN,SAAAJ,GAAK,OAAIA,EAAMoT,SAAW,QAAU,UAM7CC,GAAkBvT,YAAO4K,IAAKC,KAAZ7K,CAAH,gNAKf,SAAAE,GAAK,OAAIA,EAAMoT,SAAW,gCAAkC,kBAMrDE,GAAUlJ,aAAS,SAACpK,GAA0B,IAAD,EACIqK,wBAAmCkE,GADvC,mBACjDgF,EADiD,KACzBC,EADyB,OAENnJ,oBAAS,GAFH,mBAEjDoJ,EAFiD,KAE9BC,EAF8B,KAIxD,OAAO,cAAC,IAAD,UACJ,WACC,OACE,eAAC,IAAMhT,SAAP,WACE,eAACwS,GAAD,WACE,cAACxI,EAAA,EAAKC,KAAN,CAAWgJ,QAAM,EAAjB,yBACA,cAACjJ,EAAA,EAAKC,KAAN,CACE9F,KAAM,gBACNiG,OAAQ9K,EAAMgC,UAAUe,aAAenD,EAAWgU,cAClDjT,QACE,kBAAMX,EAAMgC,UAAUe,aAAenD,EAAWgU,cAC5CJ,GAA0B,kBAAM,kBAAMxT,EAAMgC,UAAU6R,cAAcjU,EAAWgU,mBAC/E,MAGR,cAAClJ,EAAA,EAAKC,KAAN,CACE9F,KAAM,eACNiG,OAAQ9K,EAAMgC,UAAUe,aAAenD,EAAWkU,aAClDnT,QACE,kBAAMX,EAAMgC,UAAUe,aAAenD,EAAWkU,aAC5CN,GAA0B,kBAAM,kBAAMxT,EAAMgC,UAAU6R,cAAcjU,EAAWkU,kBAC/E,MAGR,cAACpJ,EAAA,EAAKC,KAAN,CACE9F,KAAM,WACNiG,OAAQ9K,EAAMgC,UAAUe,aAAenD,EAAWmU,SAClDpT,QACE,kBAAMX,EAAMgC,UAAUe,aAAenD,EAAWmU,SAC5CP,GAA0B,kBAAM,kBAAMxT,EAAMgC,UAAU6R,cAAcjU,EAAWmU,cAC/E,MAGR,cAACrJ,EAAA,EAAKA,KAAN,CAAWsJ,SAAS,QAApB,SACE,cAAC,KAAD,CAAqBC,eAAgB,kBAAMP,GAAqB,IAAhE,SAEE,eAACL,GAAD,CAAiBD,SAAUK,EAA3B,UACE,cAACS,EAAA,EAAD,CACElE,KAAK,SACLmE,aAAa,OACbC,YAAY,SACZC,QAASrU,EAAMiR,qBAAqBjK,UACpCsN,QAAS,WAAQZ,GAAqB,IACtC1S,SAAU,SAACuO,EAAGjN,GAAJ,OAAatC,EAAMiR,qBAAqBsD,aAAajS,EAAKmC,QACpEA,MAAOzE,EAAMiR,qBAAqBlK,YAEpC,cAACoM,GAAD,CAAiBC,SAAUK,EAA3B,SACE,cAAC,GAAD,CAAaxC,qBAAsBjR,EAAMiR,mCAQnD,eAACuD,EAAA,EAAD,CACE7O,KAAK,QACL0K,UAAiC9B,IAA3BgF,EACNkB,QAAS,kBAAMjB,OAA0BjF,IAH3C,UAKE,cAACiG,EAAA,EAAMpI,OAAP,iCACA,cAACoI,EAAA,EAAMvJ,QAAP,UACE,iHAEF,eAACuJ,EAAA,EAAME,QAAP,WACE,cAAC5E,EAAA,EAAD,CAAQ6E,UAAQ,EAAChU,QAAS,kBAAM6S,OAA0BjF,IAA1D,gBAGA,cAACuB,EAAA,EAAD,CAAQ8E,UAAQ,EAACjU,QAAS,WACpB4S,GACFA,IAEFC,OAA0BjF,IAJ5B,gC,sCC9GRkE,GAAY3S,IAAOM,IAAV,+NAKS,SAAAJ,GAAK,OACrBA,EAAM6U,iCACJ,UACA7U,EAAM8U,YACF,UACA9U,EAAM+U,WACF,YACA,WAGZ,SAAA/U,GAAK,OAAIA,EAAMgV,WAAa,GAAK,mBAKjCC,GAAe,CACjBnL,SAAU,IAgFCoL,I,mDAAAA,GAtEI,SAAC,GAA+F,IAA7FC,EAA4F,EAA5FA,eAAgBlN,EAA4E,EAA5EA,OAAQmN,EAAoE,EAApEA,gCAAiCJ,EAAmC,EAAnCA,WACvE9M,EA4DR,SAA4BA,EAAwBmN,GAEhD,IAAIC,GADJpN,EAAeA,EAAa9B,QACMmP,KAAK,MAIvC,OAFAD,EAAM,0BAAsBA,GAhETE,CAAmBvN,EAAOC,aAAcD,EAAOqG,eAC9DmH,EA8BR,SAAsBC,GAClB,IAAIJ,EAAmB,GACnBK,EAAoB,GACpBC,EAA6B,GAC3BC,EAAQ,WAEd,GAAsB,IAAlBH,EAAO3P,OACP,MAAO,CAAC,IAGZ,GAAsB,IAAlB2P,EAAO3P,OACP,MAAO,CAAC2P,EAAO,GAAG5R,QAAQgS,QAAQD,EAAO,IAAlC,UAA0CH,EAAO,GAAGC,UAG/D,IAAK,IAAII,EAAI,EAAGA,EAAIL,EAAO3P,OAAQgQ,IAC/BT,EAAOU,KAAKN,EAAOK,GAAGjS,QAAQgS,QAAQD,EAAO,KAC7CF,EAAQK,KAAKN,EAAOK,GAAGJ,SAI3B,IAAK,IAAII,EAAI,EAAGA,EAAIL,EAAO3P,OAAQgQ,IACZ,KAAfJ,EAAQI,IACRH,EAAiBI,KAAKL,EAAQI,IAItC,MAAO,CAACT,EAAOC,KAAK,OAAQK,EAAiBL,KAAK,QAxDxBU,CAAahO,EAAOyN,QAE9C,OACQ,cAAC,KAAD,CAAWQ,YAAajO,EAAOmB,KAAM+M,MAAOhB,EAA5C,SACM,SAACiB,EAAUC,GAAX,OACE,cAAC,GAAD,wCACIrB,WAAYA,GACRoB,EAASE,gBACTF,EAASG,iBAHjB,IAIIxV,IAAKqV,EAASI,SACdzB,WAAYsB,EAAStB,WACrBF,iCAAkCO,EAAgC3O,IAAIwB,EAAOuG,IAC7EsG,UAAW,kBAAM7M,EAAO6M,aAP5B,SASI,cAAC2B,GAAA,EAAD,CAASnN,MACL,iCACI,mBAAGlI,MAAO6T,GAAV,SAAyB/M,IACzB,mBAAG9G,MAAO6T,GAAV,SAAyBQ,EAAU,KACnC,mBAAGrU,MAAO6T,GAAV,SAAyBQ,EAAU,QAEvCiB,aAAW,MAAMC,iBAAe,OAAOC,OAAO,EANlD,SAQI,kCAAK3O,EAAOmB,KAAZ,MAAqBnB,EAAOqB,kBCtDlDmJ,GAAY3S,IAAOM,IAAV,yLAQT,SAAAJ,GAAK,OAAKA,EAAMgV,WAAkC,GAAtB,uBAG5BnK,GAAQ/K,IAAO+W,GAAV,0GAOLC,GAAahX,IAAOM,IAAV,4QAIQ,SAAAJ,GAAK,OACpBA,EAAM+W,eACD/W,EAAMgX,iBAAmB,UAAY,UACrChX,EAAMiX,iCACF,WACmB,cAAnBjX,EAAMkX,UAEDlX,EAAMkX,SADP,cAQA,SAAAlX,GAAK,OAAIA,EAAMgV,WAAa,MAAQ,YACrC,SAAAhV,GAAK,OAAIA,EAAMgV,WAAa,OAAS,YAMpDmC,GAAarX,IAAOM,IAAV,iHAMVgX,GAAWtX,YAAOuX,KAAPvX,CAAH,4KA6ECwX,GA3DS,SAAC,GAAoF,IAAlF9I,EAAiF,EAAjFA,GAAIlF,EAA6E,EAA7EA,MAAOiO,EAAsE,EAAtEA,QAAS/J,EAA6D,EAA7DA,KAAMgK,EAAuD,EAAvDA,sBAAuBxC,EAAgC,EAAhCA,WAClEyC,EAAiB,SAACjK,GACpB,OAAOgK,EAAsBE,cAAcnS,QAAO,SAAAoS,GAAK,OAAIA,EAAMC,OAAOpK,MAAOzH,OAAS,GAEtF8R,EAAWN,EAAQlS,KAAI,SAAA4C,GAAM,OAAIA,EAAOI,gBAAcyP,QAAO,SAACnW,EAAG0E,GAAJ,OAAU1E,EAAI0E,IAAG,GACpF,OACI,eAAC,GAAD,CAAW2O,WAAYA,EAAvB,UACI,eAACmC,GAAD,WACI,cAACtM,GAAD,UAAQvB,IAEJkE,EACE,cAAC4J,GAAD,CACEzN,MAAqB,KAAbkO,GAAsC,IAAnBN,EAAQxR,OAC7B,QACA8R,EAAW,GACP,SACA,SAEV9M,QAAO,UAAK8M,EAAL,QACPlS,KAAM,UAER,gCAGV,cAAC,KAAD,CACIoS,YAAavJ,EACbwJ,UAAWhD,EAAa,aAAe,WAF3C,SAKQ,SAACoB,EAAUC,GAAX,OACI,eAACS,GAAD,2BACI9B,YAAU,GACNoB,EAAS6B,gBAFjB,IAGIlX,IAAKqV,EAASI,SACdO,eAAgBV,EAASU,eACzBG,SAAUd,EAAS6B,eAAe,yBAClChB,iCAAkCQ,EAAejK,GACjDwJ,iBAA2B,OAATxJ,GAAiBiK,EAAejK,GAPtD,UAUQ+J,EACMA,EAAQlS,KAAI,SAAC4C,EAAQkO,GAAT,OACd,cAAC,GAAD,CACInB,WAAYA,EAEZ/M,OAAQA,EACRkN,eAAgBgB,EAChBf,gCAAiCoC,EAAsBU,uBAHlDjQ,EAAOmB,cAKdmF,EAET6H,EAAShC,uBCxHhC3B,GAAY3S,IAAOM,IAAV,6HAOTyK,GAAQ/K,IAAO+W,GAAV,0GAqCIsB,GAtBE,SAACnY,GACd,OACI,eAAC,GAAD,WACI,cAAC,GAAD,UAAQA,EAAMgN,OAEZhN,EAAMoY,aAAa/S,KAAI,SAAAgT,GAErB,OACE,cAAC,GAAD,CAEE7J,GAAI6J,EAAY7J,GAChBlF,MAAO+O,EAAY/O,MACnBiO,QAASc,EAAYd,QACrB/J,KAAM6K,EAAY7K,KAClBgK,sBAAuBxX,EAAMwX,uBALxBa,EAAY7J,WC5B/BiE,GAAY3S,IAAOM,IAAV,wEAKTkY,GAAcxY,IAAOM,IAAV,sEA8HFmY,GAzHCnO,aAAS,YAAgE,IAA7DoO,EAA4D,EAA5DA,iBAC1B,OAAO,cAAC,IAAD,UACJ,WACC,IAAMtW,EAAcsW,EAAiBtW,YAC/BuW,EAAeD,EAAiBC,aAqDtC,OACE,cAAC,IAAM/X,SAAP,UACE,eAAC,KAAD,CACEgY,gBAvBkB,WACtBF,EAAiBhB,sBAAjB,6BACKgB,EAAiBhB,uBADtB,IAEEzC,YAAY,KAqBV4D,YAjBc,SAACC,EAAoBxC,GACvC,IAAMnO,EAAS/F,EAAY2W,cAAcD,EAAQ1C,aAC7CjO,IACFuQ,EAAiBhB,sBAAjB,6BACKgB,EAAiBhB,uBADtB,IAEEE,cAAec,EAAiBM,4BAA4BvT,QAAO,SAAAiI,GACjE,OAA4F,IAArFtL,EAAY6W,gDAAgD9Q,EAAQuF,GAAMzH,UAEnFmS,sBAAuB,IAAIlT,IAAY9C,EAAY8W,6BAA6B/Q,EAAOmG,oBAUvF6K,UAxDY,SAAC3U,GAAwB,IACjC4U,EAAqC5U,EAArC4U,YAAaC,EAAwB7U,EAAxB6U,OAAQjD,EAAgB5R,EAAhB4R,YAC7B,GAAKgD,EAAL,CAGA,IAAMjR,EAAS/F,EAAY2W,cAAc3C,GACzC,GAAKjO,GAAWkR,GAAWD,EAA3B,CAIA,IAAME,EAAcZ,EAAiBa,mBAAmBF,EAAOpB,aACzDuB,EAAmBd,EAAiBa,mBAAmBH,EAAYnB,aAE9D,OAAXqB,QAAW,IAAXA,KAAa7B,QAAQgC,OAAOJ,EAAOhD,MAAO,GAC1B,OAAhBmD,QAAgB,IAAhBA,KAAkB/B,QAAQgC,OAAOL,EAAY/C,MAAO,EAAGlO,GAEnDiR,EAAYnB,cAAgBoB,EAAOpB,cACL,UAA5BmB,EAAYnB,YACd9P,EAAOgI,eAC8B,cAA5BiJ,EAAYnB,YACrB9P,EAAOkH,eAC8B,YAA5B+J,EAAYnB,YACrB9P,EAAOiH,aAEPjH,EAAOqH,aAAavC,GAAUyM,gBAAgBN,EAAYnB,eAG9DS,EAAiBiB,0BACjBjB,EAAiBkB,gCAyBf,UAKE,eAAC,GAAD,WAEI,cAAC,GAAD,CAEElL,GAAIiK,EAAakB,aAAanL,GAC9BlF,MAAOmP,EAAakB,aAAarQ,MACjCiO,QAASkB,EAAakB,aAAapC,QACnC/J,KAAM,KACNgK,sBAAuBgB,EAAiBhB,uBALnCiB,EAAakB,aAAanL,IAQnC,cAAC8J,GAAD,UAEEG,EAAamB,WAAWvU,KAAI,SAAAwU,GAC1B,OAAO,cAAC,GAAD,CACLrL,GAAIqL,EAAUrL,GACdlF,MAAOuQ,EAAUvQ,MACjB0D,KAAM6M,EAAU7M,KAChBoL,aAAcyB,EAAUzB,aACxBZ,sBAAuBgB,EAAiBhB,gCAO9C,cAAC,GAAD,CACExC,YAAY,EAEZxG,GAAIiK,EAAaqB,eAAetL,GAChClF,MAAOmP,EAAaqB,eAAexQ,MACnCkE,KAAM,KACN+J,QAASkB,EAAaqB,eAAevC,QACrCC,sBAAuBgB,EAAiBhB,uBALnCiB,EAAaqB,eAAetL,IASnCgK,EAAiBhB,sBAAsBzC,WAErC,cAAC,GAAD,CACEC,YAAY,EAEZxG,GAAG,QACHlF,MAAM,SACNkE,KAAM,KACN+J,QAAS,GACTC,sBAAuBgB,EAAiBhB,uBALpC,SAOJ,wCCjGLuC,GAAb,WACE,WAAY7X,GAA2B,yBA8B/B8X,kBA9B8B,OAmC9BC,mBAnC8B,OA0H9BC,uBAAiD,CACvDnF,YAAY,EACZ2C,cAAe,GACfQ,sBAAuB,IAAIlT,KA5H3BmV,YAEE1Y,KAAM,CACNyY,uBAAwBE,IACxB5C,sBAAuB6C,IACvBX,2BAA4BY,MAG9B7Y,KAAKuY,aAAe9X,EACpBT,KAAKwY,cAAgB,CACnBzL,GAAG,eACHlF,MAAO,aACPiR,gBAAiB,GACjBX,WAAY,GACZE,eAAgB,CACdtL,GAAI,YACJlF,MAAO,YACPkE,KAAM,KACN+J,QAAS,IAEXoC,aAAc,CACZnL,GAAI,UACJlF,MAAO,UACPkE,KAAM,KACN+J,QAAS,KA1BjB,6CAgCE,WACE,OAAO9V,KAAKuY,eAjChB,wBAqCE,WAEE,OADAvY,KAAKgY,0BACEhY,KAAKwY,gBAvChB,mCA0CE,SAA8BO,EAAiCC,GAC7D,IAAIC,EAAkB,IAAI1V,IAAIwV,GAC1BG,EAAgB,IAAI3V,IAAIyV,GAExBG,EAAkB,IAAI5V,IAAI,YAAI2V,GAAepV,QAAO,SAAA0C,GAAM,OAAKyS,EAAgBjU,IAAIwB,OACnF4S,EAAe,IAAI7V,IAAI,YAAI0V,GAAiBnV,QAAO,SAAA0C,GAAM,OAAK0S,EAAclU,IAAIwB,OAEpF2S,EAAgB5X,SAAQ,SAAAiF,GACtB,IAAIkO,EAAQsE,EAAcK,QAAQ7S,GAClCwS,EAAclB,OAAOpD,EAAO,MAG9B0E,EAAa7X,SAAQ,SAAAiF,GACnBwS,EAAczE,KAAK/N,QAvDzB,uCA2DE,WAIE,IAHA,IAAI8S,EAAmBtZ,KAAKuY,aAAagB,oBAErCC,EAAgC,GAC3BjO,GAFW,IAAIkO,MAAOC,cAEMnO,GAAQ+N,EAAmB,IAAK/N,EACnEiO,EAAiBjF,KAAK,IAAIjJ,GAAUC,EAAM,gBAC1CiO,EAAiBjF,KAAK,IAAIjJ,GAAUC,EAAM,WAC1CiO,EAAiBjF,KAAK,IAAIjJ,GAAUC,EAAM,WAC1CiO,EAAiBjF,KAAK,IAAIjJ,GAAUC,EAAM,WAE5C,OAAOiO,IArEX,qCAwEE,WAAiC,IAAD,OACxBA,EAAmBxZ,KAAKqX,4BACxBsC,EAAc,YAAI,IAAIpW,IAAIiW,EAAiB5V,KAAI,SAAAmI,GAAI,OAAIA,EAAKR,UAAQ5G,OACpEmU,EAAkCU,EAAiB5V,KAAI,SAACmI,GAAqB,IAAD,IAChF,MAAO,CACLgB,GAAIhB,EAAK6N,eACT/R,MAAOkE,EAAK8N,YACZ9N,KAAMA,EACN+J,QAAO,oBAAE,EAAK0C,cAAcM,gBAAgBgB,MAAK,SAAAC,GAAK,OAAIA,EAAMhN,KAAOhB,EAAK6N,yBAArE,aAAE,EAAoF9D,eAAtF,QAAiG,OAGxGkE,EAA8B,6BAC7Bha,KAAKwY,eADwB,IAEhCM,gBAAiBA,EACjBX,WAAYwB,EAAY/V,KAAI,SAAC2H,GAAkB,IAAD,EAC5C,MAAO,CACLwB,GAAG,aAAD,OAAexB,EAAKxI,YACtB8E,MAAO0D,EAAKxI,WACZwI,KAAMA,EACNoL,aAAY,UAAEmC,EAAgBhV,QAAO,SAAAiW,GAAK,aAAI,UAAAA,EAAMhO,YAAN,eAAYR,QAASA,YAAvD,QAAgE,SAKlFyO,EAAgBlB,gBAAgBvX,SAAQ,SAACqV,GAA+B,IAAD,EACrE,EAAKqD,sBAAL,UAA2B,EAAK1B,aAAa2B,cAAclY,IAAI4U,EAAY7J,WAA3E,QAAkF,GAAI6J,EAAYd,YAGpGkE,EAAgB7B,WAAW5W,SAAQ,SAAA6W,GACjCA,EAAUzB,aAAapV,SAAQ,SAACqV,GAA+B,IAAD,EAC5D,EAAKqD,sBAAL,UAA2B,EAAK1B,aAAa2B,cAAclY,IAAI4U,EAAY7J,WAA3E,QAAkF,GAAI6J,EAAYd,eAItG9V,KAAKia,sBAAsBja,KAAKuY,aAAa4B,eAAgBH,EAAgB9B,aAAapC,SAC1F9V,KAAKia,sBAAsBja,KAAKuY,aAAa6B,iBAAkBJ,EAAgB3B,eAAevC,SAC9F9V,KAAKwY,cAAgBwB,IA5GzB,gCA+GE,SAAmBK,GACjB,OAAIra,KAAKwY,cAAcH,eAAetL,KAAOsN,EACpCra,KAAKwY,cAAcH,eACjBrY,KAAKwY,cAAcN,aAAanL,KAAOsN,EACzCra,KAAKwY,cAAcN,aAEnBlY,KAAKwY,cAAcM,gBAAgBgB,MAAK,SAAAC,GAAK,OAAIA,EAAMhN,KAAOsN,OArH3E,iCAiIE,WACE,OAAO,gBAAIra,KAAKyY,yBAlIpB,IAqIE,SAA0Bla,GACxByB,KAAKyY,uBAAyBla,IAtIlC,wCAyIE,WACEyB,KAAK+V,sBAAwB,CAC3BzC,YAAY,EACZ2C,cAAe,GACfQ,sBAAuB,IAAIlT,SA7IjC,K,yCC/Ba+W,GAA2B,SAA3BA,EACXC,EACAC,GAEA,I5BsBkC1O,E4BtB9B2O,EAA0B,GAE9B,I5BoBkC3O,E4BpBVyO,I5BqBRzO,EAAI4O,G4BrBe,CAAC,IAAD,iBACXH,EAASG,IADE,IACjC,2BAAmC,CAAC,IAAD,EAA1BC,EAA0B,QAC7B9X,EAASyX,EAAyBK,EAAWH,GACjD,GAAsB,IAAlB3X,EAAOyB,OAAc,CACvBmW,EAAgB,GAChB,OAEF,EAAAA,GAAclG,KAAd,oBAAsB1R,KAPS,oC5BwBD,SAACiJ,GACjC,OAAOA,GAAOA,EAAI8O,I4BhBTC,CAAqBN,GAIpBC,EAAcD,IACxBE,EAAclG,KAAKgG,GAJnBA,EAASK,IAAIrZ,SAAQ,SAAAoZ,GAAc,IAAD,GAChC,EAAAF,GAAclG,KAAd,oBAAsB+F,EAAyBK,EAAWH,QAO9D,OAAOC,G,qBCjBIK,GAAb,WACE,WACUC,GACP,ICTgCta,EDSjC,gCADQsa,aACR,KAwCMC,aCjD2Bva,EDiDQT,KChDvB,CAClB,SAACwG,GAEKA,EAAOqG,gBAAkBrG,EAAOC,aAAapC,SAASmC,EAAOqG,cAAcoO,cAC7EzU,EAAO0U,SAAS,CACdvT,KAAMzJ,EAAUid,oCAChB9Y,QAAQ,iCAAD,OAAmCmE,EAAOqG,cAAcoO,aAC/D/G,QAAS,MAIf,SAAC1N,GAEC,GAAIA,EAAOqG,cAAe,CACxB,IAAIqH,EAAUzT,EAAY2a,kCAAkC5U,EAAOmG,cAAenG,EAAOqG,eACrFqH,EAAQ5P,OAAS,GACnBkC,EAAO0U,SAAS,CACdvT,KAAMzJ,EAAUmd,iCAChBhZ,QAAQ,wDAAD,OAA0DmE,EAAO+F,eAAeuH,KAAK,MAC5FI,QAAQ,YAAD,OAAcA,OAK7B,SAAC1N,GAEC,GAAIA,EAAOwG,eAAiB7H,EAAagI,UAAW,CAClD,IAAI+G,EAAUzT,EAAY6a,+BAA+B9U,EAAOmG,eAC5DuH,EAAQ5P,OAAS,GACnBkC,EAAO0U,SAAS,CACdvT,KAAMzJ,EAAUqd,0BAChBlZ,QAAQ,+EAAD,OAAiFmE,EAAO+F,eAAeuH,KAAK,MACnHI,QAAQ,YAAD,OAAcA,OAK7B,SAAC1N,GAEC,IAAIgV,EAAwC,GAC5ChV,EAAOgG,UAAUjL,SAAQ,SAACka,GACxB,IAAIC,EAAkBjb,EAAY2W,cAAcqE,GAC5CC,GAAmBA,EAAgB1O,eAAiB7H,EAAa8H,WACnEuO,EAA4BjH,KAAKkH,MAGjCD,EAA4BlX,OAAS,GACvCkC,EAAO0U,SAAS,CACdvT,KAAMzJ,EAAUyd,0BAChBtZ,QAAQ,6DAAD,OAA+DmZ,EAA4B1H,KAAK,OACvGI,QAAS,QD1Cf,KA0CM0H,eAAiB,IAAIjb,IA1C3B,KA4CMkb,yBAA2B,IAAIlb,IA5CrC,KA8CMmb,YAAsB,EA7C5BvX,YAAmBvE,MACnBoG,aACE,kBAAM,EAAK2U,WAAWzZ,cACtB,WACE,EAAKwa,YAAa,EAClB,EAAKC,sBA6BP,CAAEjV,iBAAiB,IAErBiU,EAAWiB,wCAAuC,kBAAMla,QAAQC,QAAQ,EAAKga,wBAxCjF,2CAmDE,WACE,OAAO/b,KAAK8b,aApDhB,sBAuDE,WACE,OAAO,YAAI9b,KAAK4b,eAAezX,YAxDnC,6BA2DE,WACEnE,KAAK4b,eAAiB,IAAIjb,IAC1BX,KAAK6b,yBAA2B,IAAIlb,IACpCX,KAAK6b,yBAAyBjb,IAAIuE,EAAa8H,UAAW,IAAItM,KAC9DX,KAAK6b,yBAAyBjb,IAAIuE,EAAamI,QAAS,IAAI3M,KAC5DX,KAAK6b,yBAAyBjb,IAAIuE,EAAagI,UAAW,IAAIxM,KAC9DX,KAAK6b,yBAAyBjb,IAAIuE,EAAakI,UAAW,IAAI1M,OAjElE,oEAoEE,WAA8BW,GAA9B,qGACS2a,KAAMja,IAAN,sFAAyFV,EAAWyB,WAApG,sBACJb,MAAK,SAAAga,GACJC,aAAY,WACV,EAAKC,kBACLF,EAASrb,KAAKU,SAAQ,SAAA8a,GACpB,IAAI7V,EAAS,IAAI0F,GACfmQ,EAAU1U,KACV0U,EAAUlQ,iBACVkQ,EAAUjQ,aACViQ,EAAUzV,aACVyV,EAAUhQ,YACVgQ,EAAU/P,cACV+P,EAAU9P,eACV8P,EAAU7P,UACV6P,EAAU3V,YACV2V,EAAU5P,mBACV4P,EAAU3P,SACV2P,EAAU1P,cACV0P,EAAU1V,WACV0V,EAAU/a,WACV+a,EAAU5V,aACV4V,EAAUxU,MACVwU,EAAUzP,QAGZ,EAAK0P,UAAU9V,aA1BzB,2CApEF,6HAoGE,8FACQxG,KAAKuc,gBAAgBvc,KAAK+a,WAAWzZ,YAD7C,OAEEtB,KAAK8b,YAAa,EAFpB,gDApGF,+EAyGE,WAAiD,IAAD,EAE1CU,EAAU,IAAI7b,IAYlB,OAXA,UAAAX,KAAK6b,yBAAyB7Z,IAAImD,EAAagI,kBAA/C,SAA2D5L,SAAQ,SAAAiF,GACjE,GAAKA,EAAOqG,cAAZ,CAGA,IAAI4P,EAAaD,EAAQxa,IAAIwE,EAAOqG,cAAc+M,gBAC7C6C,EAGHA,EAAWlI,KAAK/N,GAFhBgW,EAAQ5b,IAAI4F,EAAOqG,cAAc+M,eAAgB,CAACpT,QAK/CgW,IAvHX,4BA0HE,WAAuC,IAAD,IACpC,OAAO,YAAP,QAAO,EAAP,QAAO,EAAIxc,KAAK6b,yBAAyB7Z,IAAImD,EAAakI,kBAA1D,aAAW,EAA2DlJ,gBAAtE,QAAkF,MA3HtF,0BA8HE,WAAqC,IAAD,IAClC,OAAO,YAAP,QAAO,EAAP,QAAO,EAAInE,KAAK6b,yBAAyB7Z,IAAImD,EAAamI,gBAA1D,aAAW,EAAyDnJ,gBAApE,QAAgF,MA/HpF,4BAkIE,WAAuC,IAAD,IACpC,OAAO,YAAP,QAAO,EAAP,QAAO,EAAInE,KAAK6b,yBAAyB7Z,IAAImD,EAAagI,kBAA1D,aAAW,EAA2DhJ,gBAAtE,QAAkF,MAnItF,yBAsIE,WACE,IAAIuY,EAA4B,GAEhC,OADAA,EAAaA,EAAWC,OAAO3c,KAAKoa,iBAAkBpa,KAAKma,eAAgBna,KAAK4c,oBAxIpF,+BA4IE,WACE,IAAMC,EAAW,YAAO7c,KAAKka,cAAc4C,QACvCC,GAAU,IAAItD,MAAOC,cAIzB,OAHImD,EAAYvY,OAAS,IACvByY,EAAUzR,GAAUyM,gBAAgB8E,EAAYlY,OAAO8K,OAAO,GAAG,IAAIlE,MAEhEwR,IAlJX,2BAqJE,SAAchQ,GACZ,OAAO/M,KAAK4b,eAAe5Z,IAAI+K,KAtJnC,uBAyJE,SAAUvG,GAAsB,IAAD,OAC7BxG,KAAK4b,eAAehb,IAAI4F,EAAOuG,GAAIvG,GACnCJ,aAAS,kBAAMI,EAAOwG,gBAAc,WAClC,IAAK,IAAIgQ,KAAoB7X,EAC3B,GAAKV,MAAMC,OAAOsY,IAAlB,CACA,IAC0C,EAEnC,EAHDhQ,EAA6B7H,EAAa6X,GAChD,GAAIhQ,IAAiBxG,EAAOwG,aAC1B,YAAK6O,yBAAyB7Z,IAAIgL,UAAlC,SAAiD/H,OAAOuB,EAAOuG,SAE/D,YAAK8O,yBAAyB7Z,IAAIgL,UAAlC,SAAiDpM,IAAI4F,EAAOuG,GAAIvG,MAGnE,CACDM,iBAAiB,IAGnBV,aAAS,kBAAMI,EAAOwG,gBAAc,WAClC,EAAKiQ,mBACJ,CACDnW,iBAAiB,IAGnBV,aAAS,kBAAMI,EAAOqG,iBAAe,WACnC,EAAKoQ,mBACJ,CACDnW,iBAAiB,MAlLvB,4BAsLE,WAAkB,IAAD,OACfqV,aAAY,WAAO,IAAD,MAChB,YAAKN,yBAAyB7Z,IAAImD,EAAamI,gBAA/C,SAAyD/L,SAAQ,SAAA2b,GAC/DA,EAAQC,cACR,EAAKnC,YAAYzZ,SAAQ,SAAA6b,GACvBA,EAAWF,SAGf,YAAKrB,yBAAyB7Z,IAAImD,EAAagI,kBAA/C,SAA2D5L,SAAQ,SAAA2b,GACjEA,EAAQC,cACR,EAAKnC,YAAYzZ,SAAQ,SAAA6b,GACvBA,EAAWF,SAGf,YAAKrB,yBAAyB7Z,IAAImD,EAAakI,kBAA/C,SAA2D9L,SAAQ,SAAA2b,GACjEA,EAAQC,sBArMhB,uBA0ME,WACE,YAAInd,KAAK4b,eAAezX,UAAU5C,SAAQ,SAACiF,GACzCA,EAAOgI,oBA5Mb,0CAgNE,SAA6B6O,GAC3B,OAAO/C,GAAyB+C,GAAkB,SAAC9C,GACjD,OAAO,OAlNb,+CAsNE,SAAkC8C,EAAmCtR,GAAkB,IAAD,OACpF,OAAOuO,GAAyB+C,GAAkB,SAAC9C,GACjD,GAA0B,kBAAdA,EAAwB,CAAC,IAAD,EAC5B+C,EAAqB/C,EACrB/T,EAAS,EAAK4Q,cAAckG,GAElC,QAAO9W,IACDA,EAAOwG,eAAiB7H,EAAagI,YAArC,UAAkD3G,EAAOqG,qBAAzD,aAAkD,EAAsB0Q,SAASxR,KAChFvF,EAAOwG,eAAiB7H,EAAakI,WAG9C,OAAO,OAjOb,4CAqOE,SAA+BgQ,GAAoC,IAAD,OAChE,OAAO/C,GAAyB+C,GAAkB,SAAC9C,GACjD,GAA0B,kBAAdA,EAAwB,CAClC,IAAM+C,EAAqB/C,EACrB/T,EAAS,EAAK4Q,cAAckG,GAClC,QAAO9W,GACHA,EAAOwG,eAAiB7H,EAAa8H,UAG3C,OAAO,OA9Ob,6BAkPE,SAAgBlB,EAAiBtF,GAC/B,IAAK,IAAI6N,EAAI,EAAGA,EAAI7N,EAAanC,OAAQgQ,IACvC,GAAIvI,EAAKkP,cAAgBxU,EAAa6N,GACpC,OAAO,EAIX,OAAO,IAzPX,6DA4PE,SAAgD9N,EAAqBuF,GACnE,IAAIyR,EAAiBxd,KAAKob,kCAAkC5U,EAAOmG,cAAeZ,GAOlF,OAJK/L,KAAKyd,gBAAgB1R,EAAMvF,EAAOC,eACrC+W,EAAKjJ,KAAL,mCAAsCxI,EAAK8N,cAGtC2D,IApQX,gCAuQE,SAAmBhX,EAAqBuF,GAEtC,OAA6B,IADP/L,KAAKsX,gDAAgD9Q,EAAQuF,GACjEzH,SAChBkC,EAAOqH,aAAa9B,IACb,KA3Qb,uBAiRE,WACE,MAAO,CACL+J,QAAS9V,KAAK0d,cAAc9Z,KAAI,SAAC+Z,GAC/B,OAAOA,EAAYjc,kBApR3B,gEAyRE,WAAkBE,GAAlB,sBAAA1B,EAAA,yDACO0B,EAAKnB,YADZ,qDAKQmd,EAAwBhc,EAAKnB,aACRqV,QAN7B,iEAUQ+H,aAAK,WAAQ,OAAO,EAAK/B,cAVjC,OAYE9b,KAAK8d,YAELF,EAAsB9H,QAAQvU,SAAQ,SAACwc,GACrC,GAAKA,EAAiBhR,GAAtB,CAEA,IAAM4Q,EAAc,EAAKvG,cAAc2G,EAAiBhR,IACpD4Q,EACFA,EAAY1b,YAAY8b,GAExB3d,QAAQgC,MAAR,iBAAwB2b,EAAiBhR,GAAzC,gCArBN,gDAzRF,8D,UEPaiR,GAAb,WAEI,WACoBnW,EACAwE,EACAzF,EACAqX,EACAC,EACAC,GACjB,yBANiBtW,QAMlB,KALkBwE,cAKlB,KAJkBzF,eAIlB,KAHkBqX,WAGlB,KAFkBC,aAElB,KADkBC,QAClB,KARcpR,GAAaqR,eADjC,4CAYI,WACI,OAAOpe,KAAK6H,MAAQ,KAAO7H,KAAKqM,gBAbxC,KAiBagS,GAAb,WACI,WACoBjb,EACAiJ,EACA3M,EACAkH,EACA0X,EACA7P,EACA0P,GACjB,yBAPiB/a,OAOlB,KANkBiJ,cAMlB,KALkB3M,OAKlB,KAJkBkH,eAIlB,KAHkB0X,WAGlB,KAFkB7P,MAElB,KADkB0P,QARxB,4CAWI,WACI,MAAmC,WAA5Bne,KAAKN,KAAKkI,gBAZzB,8BAeI,WACI,MAAO,CAAC,QAAS,QAAS,iBAAkB,WAAWvD,SAASrE,KAAKN,KAAKkI,iBAhBlF,sBAmBI,WACI,OAAO5H,KAAKoD,KAAO,KAAOpD,KAAKN,SApBvC,KAyBa6e,GAA4B,SAA5BA,EAA6BC,GACtC,IAAIC,EAA2C,GA2B/C,OAzBAD,EAAajd,SAAQ,SAACV,GAClB,IAAI6d,EAA4C,GAC5CC,EAAmC,GAGnC9d,EAAK+d,SAASta,OAAS,IACvBoa,EAAqBH,EAA0B1d,EAAK+d,WAGpD/d,EAAKge,cAAcva,OAAS,IAC5Bqa,EAAcG,GAAwBje,EAAKge,gBAG/C,IAAIvP,EAAY,IAAI0O,GAChBnd,EAAKgH,MACLhH,EAAKwL,YACL3H,OAAO7D,EAAK+F,cACZ+X,EACAD,EACAha,OAAO7D,EAAKsd,QAGhBM,EAAkBlK,KAAKjF,MAGpBmP,GAIEK,GAA0B,SAACC,GACpC,IAAIC,EAAwC,GAgB5C,OAdAD,EAAaxd,SAAQ,SAACV,GAClB,IAAIoe,EAAkB,IAAIZ,GACtBxd,EAAKuC,KACLvC,EAAKwL,YACLxL,EAAKnB,KACLgF,OAAO7D,EAAK+F,cACZ/F,EAAKyd,SACLzd,EAAK4N,IACL/J,OAAO7D,EAAKsd,QAGhBa,EAAiBzK,KAAK0K,MAGnBD,GC1FEE,GAAb,WAIE,WACkBvX,EACAE,EACAX,EACAiY,EACAvY,EACAwY,EACAC,EACAhT,EACA3F,EACA+F,EACAxF,EACAqY,EACA3Y,EACArF,EACAsL,GACf,yBAfejF,OAehB,KAdgBE,QAchB,KAbgBX,mBAahB,KAZgBiY,iBAYhB,KAXgBvY,eAWhB,KAVgBwY,mBAUhB,KATgBC,sBAShB,KARgBhT,cAQhB,KAPgB3F,cAOhB,KANgB+F,qBAMhB,KALgBxF,eAKhB,KAJgBqY,qBAIhB,KAHgB3Y,aAGhB,KAFgBrF,aAEhB,KADgBsL,SAChB,KAnBcG,QAmBd,OAlBKmD,kBAAuCjS,EAAkBgP,UAmB9DjN,KAAK+M,GAAKpF,EACVpD,YAAmBvE,MAtBvB,8CAyBE,WACEA,KAAKkQ,kBAAoBjS,EAAkBqP,UA1B/C,0BA6BE,WACEtN,KAAKkQ,kBAAoBjS,EAAkBgP,YA9B/C,uBAiCE,WACE,MAAO,CACLF,GAAI/M,KAAK2H,QAnCf,gEAuCE,WAAkBX,GAAlB,SAAA9G,EAAA,yDACM8G,EAAQ+F,KAAO/M,KAAK+M,GAD1B,uBAEI3M,QAAQgC,MAAR,qCAA4C4E,EAAQ+F,GAApD,iBAA+D/M,KAAK+M,GAApE,MAFJ,0BAME/M,KAAKyN,aANP,gDAvCF,6EAgDE,WACE,MAAM,YAAN,OAAmBzN,KAAK+M,GAAxB,aAA+B/M,KAAK2H,KAApC,cAA8C3H,KAAK6H,WAjDvD,KCAa0X,GAAb,WAIE,WACkB5X,EACAE,EACAX,EACAN,EACAwY,EACAC,EACAhT,EACA3F,EACA+F,EACAC,EACA/F,EACArF,EACAsL,GACf,yBAbejF,OAahB,KAZgBE,QAYhB,KAXgBX,mBAWhB,KAVgBN,eAUhB,KATgBwY,mBAShB,KARgBC,sBAQhB,KAPgBhT,cAOhB,KANgB3F,cAMhB,KALgB+F,qBAKhB,KAJgBC,WAIhB,KAHgB/F,aAGhB,KAFgBrF,aAEhB,KADgBsL,SAChB,KAjBcG,QAiBd,OAhBKmD,kBAAuCjS,EAAkBgP,UAiB9DjN,KAAK+M,GAAKpF,EACVpD,YAAmBvE,MApBvB,8CAuBE,WACEA,KAAKkQ,kBAAoBjS,EAAkBqP,UAxB/C,0BA2BE,WACEtN,KAAKkQ,kBAAoBjS,EAAkBgP,YA5B/C,uBA+BE,WACE,MAAO,CACLF,GAAI/M,KAAK2H,QAjCf,gEAqCE,WAAkBN,GAAlB,SAAAnH,EAAA,yDACMmH,EAAe0F,KAAO/M,KAAK+M,GADjC,uBAEI3M,QAAQgC,MAAR,4CAAmDiF,EAAe0F,GAAlE,iBAA6E/M,KAAK+M,GAAlF,MAFJ,0BAME/M,KAAKyN,aANP,gDArCF,6EA8CE,WACE,MAAM,mBAAN,OAA0BzN,KAAK+M,GAA/B,aAAsC/M,KAAK2H,KAA3C,cAAqD3H,KAAK6H,WA/C9D,KCKa2X,GAAb,WACE,WACEjf,GACC,IAAD,gCAcMwa,gBAdN,OAeM0E,gBAAkB,IAAI9e,IAf5B,KAgBM+e,uBAAyB,IAAI/e,IAhBnC,KAiBMmb,YAAsB,EAjB5B,KAuBMC,kBAvBN,sBAuB0B,sBAAA7b,EAAA,sEACpB,EAAKyf,gBAAgB,EAAK5E,WAAWzZ,YADjB,uBAEpB,EAAKse,uBAAuB,EAAK7E,WAAWzZ,YAFxB,OAG1B,EAAKwa,YAAa,EAHQ,2CAvB1B,KAyHM6D,gBAAkB9G,aAAO,SAACvX,GAChC,OAAO2a,KAAMja,IAAN,sFAAyFV,EAAWyB,WAApG,uBACNb,MAAK,SAAAga,GACJC,aAAY,WACV,EAAKsD,gBAAgBrS,QACrB8O,EAASrb,KAAKU,SAAQ,SAAAse,GACpB,IAAI7Y,EAAU,IAAIkY,GAChBW,EAAWlY,KACXkY,EAAWhY,MACXgY,EAAW3Y,iBACX2Y,EAAWV,eACXU,EAAWjZ,aACXiZ,EAAWT,iBACXb,GAA0BsB,EAAWR,qBACrCQ,EAAWxT,YACXwT,EAAWnZ,YACXmZ,EAAWpT,mBACXoT,EAAW5Y,aACX4Y,EAAWP,mBACXO,EAAWlZ,WACXkZ,EAAWve,WACXue,EAAWjT,QAGb,EAAKkT,WAAW9Y,eAjJtB,KAuJM4Y,uBAAyB/G,aAAO,SAACvX,GACvC,OAAO2a,KAAMja,IAAN,sFAAyFV,EAAWyB,WAApG,8BACJb,MAAK,SAAAga,GACJC,aAAY,WACV,EAAKuD,uBAAuBtS,QAC5B8O,EAASrb,KAAKU,SAAQ,SAAAwe,GACpB,IAAI1Y,EAAiB,IAAIkY,GACvBQ,EAAkBpY,KAClBoY,EAAkBlY,MAClBkY,EAAkB7Y,iBAClB6Y,EAAkBnZ,aAClBmZ,EAAkBX,iBAClBb,GAA0BwB,EAAkBV,qBAC5CU,EAAkB1T,YAClB0T,EAAkBrZ,YAClBqZ,EAAkBtT,mBAClBsT,EAAkBrT,SAClBqT,EAAkBpZ,WAClBoZ,EAAkBze,WAClBye,EAAkBnT,QAGpB,EAAKoT,kBAAkB3Y,eA5K/B9C,YAAmBvE,MACnBA,KAAK+a,WAAaxa,EAClB6F,aACE,kBAAM,EAAK2U,WAAWzZ,cACtB,WACE,EAAKwa,YAAa,EAClB,EAAKC,sBAEP,CAAEjV,iBAAiB,IAErBvG,EAAUyb,wCAAuC,kBAAMla,QAAQC,QAAQ,EAAKga,wBAdhF,2CAsBE,WACE,OAAO/b,KAAK8b,aAvBhB,uBAgCE,WACE,OAAO,YAAI9b,KAAKyf,gBAAgBtb,YAjCpC,8BAoCE,WACE,OAAO,YAAInE,KAAK0f,uBAAuBvb,YArC3C,4BAwCE,SAAe4I,GACb,OAAO/M,KAAKyf,gBAAgBzd,IAAI+K,KAzCpC,mCA4CE,SAAsBA,GACpB,OAAO/M,KAAK0f,uBAAuB1d,IAAI+K,KA7C3C,2BAgDE,WACE,OAAO/M,KAAKigB,YAAYnc,QAAO,SAAAkD,GAAO,OAAIA,EAAQkJ,oBAAsBjS,EAAkBqP,aAjD9F,kCAoDE,WACE,OAAOtN,KAAKkgB,mBAAmBpc,QAAO,SAAAuD,GAAc,OAAIA,EAAe6I,oBAAsBjS,EAAkBqP,aArDnH,sCAwDE,WACE,IAAIzK,EAA+B7C,KAAKmgB,gBAExC,OADAtd,EAASA,EAAO8Z,OAAO3c,KAAKogB,0BA1DhC,uBA8DE,WACEpgB,KAAKyf,gBAAgBle,SAAQ,SAACyF,GAC5BA,EAAQwH,kBAEVxO,KAAK0f,uBAAuBne,SAAQ,SAAC8F,GACnCA,EAAemH,oBAnErB,wBAuEE,SAAWxH,GACThH,KAAKyf,gBAAgB7e,IAAIoG,EAAQ+F,GAAI/F,KAxEzC,+BA0EE,SAAkBK,GAChBrH,KAAK0f,uBAAuB9e,IAAIyG,EAAe0F,GAAI1F,KA3EvD,uBA8EE,WACE,MAAO,CACLgZ,SAAUrgB,KAAKmgB,gBAAgBvc,KAAI,SAAC0c,GAClC,OAAOA,EAAa5e,eAEtB6e,gBAAiBvgB,KAAKogB,uBAAuBxc,KAAI,SAAC4c,GAChD,OAAOA,EAAoB9e,kBApFnC,gEAyFE,WAAkBE,GAAlB,sBAAA1B,EAAA,yDACO0B,EAAKpB,iBADZ,iEAKQqd,aAAK,WAAQ,OAAO,EAAK/B,cALjC,OAOE9b,KAAK8d,aACC2C,EAA6B7e,EAAKpB,kBACT6f,UAC7BI,EAA2BJ,SAAS9e,SAAQ,SAACmf,GAC3C,GAAKA,EAAkB3T,GAAvB,CAEA,IAAMuT,EAAe,EAAKK,eAAeD,EAAkB3T,IACvDuT,EACFA,EAAare,YAAYye,GAEzBtgB,QAAQgC,MAAR,iBAAwBse,EAAkB3T,GAA1C,iCAIF0T,EAA2BF,iBAC7BE,EAA2BF,gBAAgBhf,SAAQ,SAACqf,GAClD,GAAKA,EAAyB7T,GAA9B,CAEA,IAAMyT,EAAsB,EAAKK,sBAAsBD,EAAyB7T,IAC5EyT,EACFA,EAAoBve,YAAY2e,GAEhCxgB,QAAQgC,MAAR,iBAAwBwe,EAAyB7T,GAAjD,wCA7BR,gDAzFF,8DCFa+T,GAAb,WACE,WACUvI,EACAwI,GACP,yBAFOxI,eAER,KADQwI,oBAHZ,kDAME,WACE,OAAO/gB,KAAKuY,aAAamE,WAAW/X,MAAK,SAACzE,EAAG0E,GAAJ,OAAW1E,EAAEyH,KAAO/C,EAAE+C,KAAQ,GAAK,OAPhF,6BASE,WACE,OAAO3H,KAAK+gB,kBAAkBd,YAAYtb,MAAK,SAACzE,EAAG0E,GAAJ,OAAW1E,EAAE2H,MAAQjD,EAAEiD,MAAS,GAAK,OAVxF,oCAYE,WACE,OAAO7H,KAAK+gB,kBAAkBb,mBAAmBvb,MAAK,SAACzE,EAAG0E,GAAJ,OAAW1E,EAAE2H,MAAQjD,EAAEiD,MAAS,GAAK,SAb/F,KCHMmZ,GAAyB,SAACC,GAC9B,OAAOA,GACL,IAAK,gBAAiB,OAAO9iB,EAAWgU,cACxC,IAAK,eAAgB,OAAOhU,EAAWkU,aACvC,IAAK,WAAY,OAAOlU,EAAWmU,SACnC,QAAS,SCHP/R,GAAY,IDOlB,WACE,aAAe,yBAIP2gB,YAA0B/iB,EAAWgU,cAJ/B,KAKN2J,YAAsB,EALhB,KAMNqF,iCAA4D,GALlE5c,YAAmBvE,MAFvB,4CASE,WACE,OAAOA,KAAKkhB,cAVhB,kEAaE,WAAqB5f,GAArB,eAAApB,EAAA,yDACMF,KAAKkhB,cAAgB5f,EAD3B,uBAEItB,KAAKkhB,YAAc5f,EACb8f,EAAsCphB,KAAKmhB,iCAAiCvd,KAAI,SAAAyd,GAAQ,OAAIA,OAHtG,kBAIWvf,QAAQwf,IAAIF,IAJvB,gDAbF,4EAyBE,WACE,OAAOphB,KAAK8b,YA1BhB,IAqBE,SAAcyF,GACZvhB,KAAK8b,WAAayF,IAtBtB,oDA6BE,SAAuCC,GACrCxhB,KAAKmhB,iCAAiC5M,KAAKiN,KA9B/C,uBAiCE,WACE,MAAO,CAAClgB,WAAYtB,KAAKkhB,eAlC7B,gEAqCE,WAAkBtf,GAAlB,iBAAA1B,EAAA,yDACO0B,EAAKrB,UADZ,qBAEU,kCAFV,WAKQkhB,EAAsB7f,EAAKrB,WACRe,WAN3B,wFAUQogB,EAAQV,GAAsBS,EAAoBngB,YAV1D,sCAYoBmgB,EAAoBngB,WAZxC,wDAeQtB,KAAKoS,cAAcsP,GAf3B,iDArCF,+DCNMjhB,GAAc,IAAIqa,GAAYva,IAC9BC,GAAmB,IAAIgf,GAAiBjf,IACxC8E,GAAkB,IAAIyb,GAAgBrgB,GAAaD,IAE5CmhB,GAAqBC,wBAAc,CAC5CrhB,aACAE,eACAD,oBACA6E,qBCFSwc,GAAyBlZ,aAAS,SAACpK,GAC9C,IAAMujB,EAAqBC,qBAAWJ,IACtC,OAAO,cAAC,IAAD,UAEH,WACE,OAAOpjB,EAAMyjB,mBAAmB1d,OAAS,EACrC,cAACyG,GAAD,CAAkBkE,SAAO,EAAzB,SAEE1Q,EAAMyjB,mBACHrd,MAAK,SAACzE,EAAG0E,GAAJ,OAAUF,OAAOxE,EAAEie,OAASzZ,OAAOE,EAAEuZ,UAC1Cva,KAAI,SAAAwG,GACH,GAAIA,EAAQ6X,WAAY,CACtB,IAAIzb,EAASsb,EAAmBrhB,YAAY2W,cAAchN,EAAQkU,UAClE,OAAO9X,EAAS,cAACuH,GAAD,CAAkBvH,OAAQA,IAAa,6BAClD,GAAI4D,EAAQ8X,mBAAoB,CACrC,IAAI7a,EAAiBya,EAAmBthB,iBAAiBqgB,sBAAsBzW,EAAQkU,UACvF,OAAOjX,EAAiB,cAACgJ,GAAD,CAA0BhJ,eAAgBA,IAAqB,6BAEzF,OAAO,4BAAI+C,EAAQiC,mBAIzB,mCCnBC8V,GAAkC9jB,YAAOuX,KAAPvX,CAAH,wEAO/B+jB,GAA2B/jB,YAAO8K,KAAUC,MAAjB/K,CAAH,+DAKxBgkB,GAA2BhkB,IAAOM,IAAV,mFAKxB2jB,GAA+BjkB,IAAO6B,EAAV,wEAK5BqiB,GAAoBlkB,IAAOM,IAAV,mDAIjB6jB,GAA0B7Z,aAAS,SAACpK,GAC/C,IAAMkkB,EAAsB,SAACnT,GAC3B,IAAMoT,EAAgBnkB,EAAMokB,4BAA4BC,uBAAuBtT,GAC/E,OAAIA,EAAU1I,aAAe,EACpB,eAACub,GAAD,CACLje,KAAK,QACLgE,MAAOwa,IAAkBpT,EAAU1I,aAC/B,QACA8b,EAAgBpT,EAAU1I,aACxB,SACA,SAND,UASJ8b,EATI,MAScpT,EAAU1I,aATxB,UAWE8b,EAAgB,EAClB,eAACP,GAAD,CACLje,KAAK,QACLgE,MAAM,QAFD,UAIJwa,EAJI,eADF,GAUT,OAAO,cAAC,IAAD,UAEH,WACE,OAAOnkB,EAAMskB,oBAAoBve,OAAS,EACtC,cAAC6E,GAAA,EAAUA,UAAX,CAEA2Z,WAAW,EACXC,OAAQ,YAAIxkB,EAAMskB,qBACfle,MAAK,SAACzE,EAAG0E,GAAJ,OAAUF,OAAOxE,EAAEie,OAASzZ,OAAOE,EAAEuZ,UAC1Cva,KAAI,SAAA0L,GACH,MAAO,CACL7N,IAAK6N,EAAUvC,GACflF,MAAO,eAACua,GAAD,WACL,cAACrT,GAAA,EAAD,CAAM5E,UACJ5L,EAAMokB,4BAA4BK,kBAAkB1T,EAAUvC,IAC5D,aACA,gBAEHuC,EAAUzH,MACV4a,EAAoBnT,MAEvBhG,QAAS,CACPA,QAAS,gCACP,eAACiZ,GAAD,WACA,eAACF,GAAD,WACE,+BAAOxgB,aAAMohB,KAAa3T,EAAUjD,gBAElCiD,EAAU4O,WAAW5Z,OAAS,EAC1B,cAACge,GAAD,CACAY,KAAK,IACLhkB,QAAS,kBAAMX,EAAMokB,4BAA4BQ,oBAAoB7T,IAFrE,SAKE/Q,EAAMokB,4BAA4BS,wBAAwB9T,GACtD,eACA,eAGN,gCAGR,cAACuS,GAAD,CAAwBwB,SAAU9kB,EAAM8kB,SAAUrB,mBAAoB1S,EAAU2O,cAEhF,cAACuE,GAAD,CACEa,SAAU9kB,EAAM8kB,SAChBR,oBAAqBvT,EAAU4O,WAC/ByE,4BAA6BpkB,EAAMokB,kCAIzCtZ,OAAQ9K,EAAMokB,4BAA4BK,kBAAkB1T,EAAUvC,IACtEuW,aAAc,WAAQ/kB,EAAMokB,4BAA4BY,gBAAgBjU,EAAUvC,UA9CnFxO,EAAM8kB,UAkDX,mCC3GNG,GAAyBnlB,IAAO6B,EAAV,4MAmCbujB,GAvBe9a,aAAS,SAACpK,GACtC,OAAO,cAAC,IAAD,UACJ,WACC,OAAO,qCACL,6BACE,cAACilB,GAAD,CACEN,KAAK,IACLhkB,QAAS,kBAAMX,EAAMmlB,OAAOlV,gBAF9B,SAGEjQ,EAAMmlB,OAAO7b,UAEjB,+BAAOhG,aAAMohB,KAAa1kB,EAAMmlB,OAAOtE,qBACvC,cAACjW,GAAA,EAAD,CAAWmB,OAAK,EAACjM,QAAM,EAAvB,SACE,cAACmkB,GAAD,CACEa,SAAU9kB,EAAMmlB,OAAO3W,GACvB8V,oBAAqBtkB,EAAMmlB,OAAOrE,oBAClCsD,4BAA6BpkB,EAAMokB,yCCnClCgB,GAAuBtlB,YAAO2S,IAAP3S,CAAH,+CAgClBulB,GAxBWjb,aAAS,YAAgE,IAA7Dga,EAA4D,EAA5DA,4BACpC,OAAO,cAAC,IAAD,UACJ,WACC,OACE,cAAC,IAAM1jB,SAAP,UACE,cAAC0kB,GAAD,UAEIhB,EACGniB,iBACAqjB,2BACAjgB,KAAI,SAAA8f,GACH,OAAO,cAAC,GAAD,CACLA,OAAQA,EACRf,4BAA6BA,iBCZpCmB,GAAb,WAME,WACEtjB,EACAC,GACC,yBARKsgB,uBAQN,OAPMxI,kBAON,OANMwL,8BAMN,OALMC,4BAA2C,IAAIzgB,IAMrDmV,YAEE1Y,KAAM,CACNgkB,4BAA6BrL,MAG/B3Y,KAAK+gB,kBAAoBvgB,EACzBR,KAAK+jB,yBAA2B,CAC9BhX,GAAI,qBACJlF,MAAO,sBACPwY,SAAU,GACVE,gBAAiB,IAEnBvgB,KAAKuY,aAAe9X,EAvBxB,kDA0BE,WACE,OAAOT,KAAK+gB,oBA3BhB,mCA8BE,WACE,OAAO/gB,KAAK+jB,2BA/BhB,oCAkCE,SAAuBlB,GACrB,OAAO,YAAI7iB,KAAKikB,kCAAkCpB,GAAqB1e,UAAUkS,QAAO,SAACnW,EAAG0E,GAAJ,OAAU1E,EAAI0E,IAAG,KAnC7G,+CAsCE,SAAkCie,GAAgE,IAAD,OAC3FqB,EAAc,IAAIvjB,IAkBtB,OAjBAkiB,EAAoB5E,SAAS1c,SAAQ,SAAA6I,GACnC,GAAIA,EAAQ6X,WAAY,CACtB,IAAIzb,EAAS,EAAK+R,aAAanB,cAAchN,EAAQkU,UACjD9X,GAAUA,EAAOwG,eAAiB7H,EAAa8H,WACjDiX,EAAYtjB,IAAIwJ,EAAQkU,SAAUlU,EAAQxD,mBAEvC,GAAIwD,EAAQ8X,mBAAoB,CACrC,IAAI7a,EAAiB,EAAK7G,iBAAiBqgB,sBAAsBzW,EAAQkU,UACrEjX,GAAkBA,EAAe6I,oBAAsBjS,EAAkBgP,WAC3EiX,EAAYtjB,IAAIwJ,EAAQkU,SAAUlU,EAAQxD,kBAIhDic,EAAoB3E,WAAW3c,SAAQ,SAAA+N,GACnB,EAAK2U,kCAAkC3U,GAC7C/N,SAAQ,SAACyB,EAAOvB,GAAR,OAAgByiB,EAAYtjB,IAAIa,EAAKuB,SAEpDkhB,IAzDX,6BA4DE,SAAgBC,GACVnkB,KAAKgkB,4BAA4Bhf,IAAImf,GACvCnkB,KAAKgkB,4BAA4B/e,OAAOkf,GAExCnkB,KAAKgkB,4BAA4B9e,IAAIif,KAhE3C,qCAoEE,SAAwBC,GAA8C,IAAD,OACnE,OAAOA,EAAclG,WAAWpa,QAAO,SAAAwL,GACrC,OAAO,EAAK0U,4BAA4Bhf,IAAIsK,EAAUvC,KACjD,EAAKqW,wBAAwB9T,MACjChL,OAAS,IAxEhB,iCA2EE,SAAoB8f,GAAqC,IAAD,OAClDpkB,KAAKojB,wBAAwBgB,GAC/BA,EAAclG,WAAW3c,SAAQ,SAAA+N,GAC/B,EAAK+U,yBAAyB/U,MAGhC8U,EAAclG,WAAW3c,SAAQ,SAAA+N,GAC/B,EAAKgV,uBAAuBhV,QAlFpC,oCAuFE,SAA+B8U,GAAqC,IAAD,OACjEA,EAAclG,WAAW3c,SAAQ,SAAA+N,GAC/B,EAAKgV,uBAAuBhV,MAE9BtP,KAAKgkB,4BAA4B9e,IAAIkf,EAAcrX,MA3FvD,sCA8FE,SAAiCqX,GAAqC,IAAD,OACnEA,EAAclG,WAAW3c,SAAQ,SAAA+N,GAC/B,EAAK+U,yBAAyB/U,MAEhCtP,KAAKgkB,4BAA4B/e,OAAOmf,EAAcrX,MAlG1D,+BAqGE,SAAkBoX,GAChB,OAAOnkB,KAAKgkB,4BAA4Bhf,IAAImf,OAtGhD,KCbMI,GAAiBlmB,IAAOC,OAAV,gRAqBLkmB,GARK,SAAC,GAAuE,IAArEC,EAAoE,EAApEA,qBACrB,OACE,cAACF,GAAD,CAAgBrlB,QAAS,kBAAMulB,EAAqBC,YAApD,+BCdSC,GAAb,WAGI,WAAYlkB,GAA2B,yBAF/BA,iBAE8B,EAClCT,KAAKS,YAAcA,EAJ3B,qDAOI,WACI,OAAOT,KAAKS,cARpB,sBAWI,WAKI,IAJA,IAAImkB,GAA8B,EAC9BC,EAAmC7kB,KAAK8kB,sBAAsB9kB,KAAKS,YAAY8Y,qBAC/EwL,EAAmC,CAAC,SAAU,SAAU,WAE9B,IAAvBH,GAA6B,CAMhC,IALA,IAAII,EAAsChlB,KAAKS,YAAY0Z,eAEvD8K,GAD6BD,EAAqB1gB,QACrC,GAGR4gB,EAAU,EAAGA,EAAUF,EAAqB1gB,OAAQ4gB,IAEzD,IADA,IAAIC,GAAoB,EACf7Q,EAAI,EAAGA,EAAIuQ,EAAuBvgB,OAAQgQ,IAC/C,IAA0B,IAAtB6Q,EACA,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAuBzgB,OAAQ8gB,IAAK,CACpD,IAAIC,EAAuCrlB,KAAKS,YAAY6W,gDAAgD0N,EAAqBE,GAAU,IAAI5Z,GAAUuZ,EAAuBvQ,GAAIyQ,EAAuBK,KACvME,EAAmCtlB,KAAKulB,4BAA4BV,EAAuBvQ,GAAIyQ,EAAuBK,GAAIplB,KAAKS,YAAYyZ,eAC3IsL,EAA0B,IAAIla,GAAUuZ,EAAuBvQ,GAAIyQ,EAAuBK,IAAI7H,SAAS,IAAIjS,GAAU,KAAM,WAO/H,GALI+Z,EAD2B,IAA3BA,EAAgB/gB,QAMfkhB,GAAkBF,GAA0BD,EAAiB,CAC9DrlB,KAAKS,YAAYglB,mBAAmBT,EAAqBE,GAAU,IAAI5Z,GAAUuZ,EAAuBvQ,GAAIyQ,EAAuBK,KACnID,GAAoB,EACpBF,GAAa,EACb,QAUD,IAAfA,IACAL,GAAqB,MAnDrC,yCAwDI,SAA4BrZ,EAAcQ,EAAc6Q,GACpD,IAAI8I,EAAUna,EAAO,IAAMQ,EAE3B,OAAI6Q,EAAiB5X,IAAI0gB,MAEjB9I,EAAiB5a,IAAI0jB,GAAUphB,QAAU,KA7DzD,mCAyEI,SAAsByY,GAIlB,IAHA,IAAI4I,EAAiB,GAGZrR,EAAI,KAAMA,GAAKyI,EAAU,EAAGzI,IACjCqR,EAAKpR,KAAKD,GAGd,OAAOqR,MAjFf,KCiDeC,GAjCH,WACV,IAAM9D,EAAqBC,qBAAWJ,IAEhCnS,EAAuB,IAAIpK,EAAqB0c,EAAmBzc,iBACnE0R,EAAmB,IAAIuB,GAAiBwJ,EAAmBrhB,aAC3DkiB,EAA8B,IAAImB,GAA4BhC,EAAmBthB,iBAAkBshB,EAAmBrhB,aACtHolB,EAAyB,IAAIvlB,EAA2BwhB,EAAmBvhB,UAAWuhB,EAAmBthB,iBAAkBshB,EAAmBrhB,aAC9IgkB,EAAuB,IAAIE,GAAqB7C,EAAmBrhB,aAEzE,OACE,cAACkhB,GAAmBmE,SAApB,CAA6B9iB,MAAO8e,EAApC,SACE,sBAAK3X,UAAU,mBAAf,UACE,cAAC0H,GAAD,CAAStR,UAAWuhB,EAAmBvhB,UAAWiP,qBAAsBA,IACxE,eAAC,IAAD,CACErF,UAAU,kBACVyB,MAAM,WACNma,YAAa,oBACbvnB,QAAQ,SAJV,UAME,cAACwS,EAAA,EAAD,CAAWrR,MAAO,CAAEwI,QAAS,IAAMmC,OAAK,EAAxC,SACE,cAAC0b,GAAD,CAAoBrD,4BAA6BA,MAEnD,eAAC3R,EAAA,EAAD,CAAWrR,MAAO,CAAEwI,QAAS,IAAMmC,OAAK,EAAxC,UACE,cAAC,EAAD,CAAmBzL,2BAA4BgnB,IAC/C,cAAC,GAAD,CAAapB,qBAAsBA,IACnC,cAAC,GAAD,CAAS1N,iBAAkBA,gBC/BxBkP,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBjkB,MAAK,YAAkD,IAA/CkkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.5d5eca97.chunk.js","sourcesContent":["export interface ICurriculumContainer {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    creditPoints: number;\r\n    elements: ICurriculumElement[];\r\n    containers: ICurriculumContainer[];\r\n    order: number;\r\n}\r\n\r\nexport interface ICurriculumElement {\r\n    name: string;\r\n    description: string;\r\n    type: string;\r\n    creditPoints: number;\r\n    itemCode: string;\r\n    url: string;\r\n    order: number;\r\n    isCourse: () => boolean;\r\n    isSpecialisation: () => boolean;\r\n}\r\n\r\nexport interface IOrConditionalTree {\r\n    or: ConditionalTree[]\r\n}\r\nexport interface IAndConditionalTree {\r\n    and: ConditionalTree[]\r\n}\r\n\r\nexport const isOrConditionalTree = (obj: any): obj is IOrConditionalTree => {\r\n    return obj && obj.or\r\n}\r\n\r\nexport const isAndConditionalTree = (obj: any): obj is IAndConditionalTree => {\r\n    return obj && obj.and\r\n}\r\n\r\nexport type ConditionalTree = IOrConditionalTree | IAndConditionalTree | string\r\n\r\nexport interface ICourse {\r\n    id: string;\r\n    code: string;\r\n    contentTypeLabel: string;\r\n    corequisites: string[];\r\n    creditPoints: number;\r\n    description: string;\r\n    effectiveDate: Date; // Form (new Date('YYYY-MM-DD'));\r\n    enrolmentRules: string[];\r\n    exclusion: string[];\r\n    facultyName: string;\r\n    implementationYear: number;\r\n    keywords: string[];\r\n    prerequisites: ConditionalTree;\r\n    schoolName: string;\r\n    studyLevel: string;\r\n    termOffering: string[];\r\n    title: string;\r\n    urlMap: string;\r\n}\r\n\r\nexport interface IProgram {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    additionalInfo: string;\r\n    implementationYear: number;\r\n    intakePeriod: Array<string>;\r\n    programConstraints: Array<any>;\r\n    studyLevel: string;\r\n}\r\n\r\nexport interface ISpecialisation {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    implementationYear: number;\r\n    keywords: string[];\r\n    studyLevel: string;\r\n    urlMap: string;\r\n}\r\n\r\nexport interface IProgressionEntity {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    structureSummary: string,\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    progressionStatus: ProgressionStatus,\r\n    setPlanned: () => void,\r\n    setUnplanned: () => void,\r\n}\r\n\r\nexport enum ProgressionStatus {\r\n    UNPLANNED,\r\n    PLANNED,\r\n}\r\n\r\nexport interface IValidatableEntity {\r\n    addError: (error: IError) => void\r\n    removeError: (error: IError) => void\r\n    hasErrors: () => boolean\r\n    clearErrors: () => void\r\n    errors: IError[]\r\n}\r\n\r\nexport enum ErrorCode {\r\n    UNKNOWN,\r\n    COURSE_NOT_OFFERED_IN_SELECTED_TERM,\r\n    PREREQUISITES_NOT_PLANNED,  \r\n    PREREQUISITE_REQUIREMENT_NOT_MET,\r\n    COREQUISITE_REQUIREMENT_NOT_MET,\r\n    EXCLUSION_COURSE_CONFLICT,\r\n}\r\n\r\nexport interface IError {\r\n    code: ErrorCode,\r\n    message: string,\r\n    missing: string,\r\n}\r\n\r\nexport enum StudyLevel {\r\n    UNDERGRADUATE=\"undergraduate\",\r\n    POSTGRADUATE=\"postgraduate\",\r\n    RESEARCH=\"research\",\r\n}\r\n","import React from 'react';\nimport { LocalImportExportViewModel } from \"./LocalImportExportViewModel\"\nimport styled, { css } from \"styled-components\"\n\nconst ImportExportButton = styled.button`\n  background: transparent;\n  border-radius: 4px;\n  border: 2px solid darkgrey;\n  color: black;\n  margin: 4px 2px;\n  padding: 15px 32px;\n  font-size: 20px;\n  display: inline-block;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n\n  transition-duration: 0.2s;\n  :hover {\n    background: #f2f2f2;\n  }\n\n  ${props => props.primary && css`\n    background: darkgrey;\n\n    :hover {\n      background: lightgrey;\n    }\n  `}\n`;\n\nconst ImportExportButtonContainer = styled.div`\n  width: 48%;\n  display: inline;\n  background: transparent;\n  float: left;\n  margin: 0% 1%;\n`;\n\nconst LocalImportExport = ({ localImportExportViewModel }: { [key: string]: LocalImportExportViewModel }) => {\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  return (\n    <React.Fragment>\n      <ImportExportButtonContainer>\n        <ImportExportButton primary onClick={() => { localImportExportViewModel.export() }}>\n          Export\n        </ImportExportButton>\n      </ImportExportButtonContainer>\n      <ImportExportButtonContainer>\n        <ImportExportButton onClick={() => { inputRef.current?.click() }}>\n          Import\n        </ImportExportButton>\n        <input\n          ref={inputRef}\n          onChange={(event) => localImportExportViewModel.import(event)}\n          type=\"file\"\n          style={{ display: \"none\" }}\n          accept=\"application/JSON\"\n        />\n      </ImportExportButtonContainer>\n    </React.Fragment >\n  )\n};\n\nexport default LocalImportExport;","import { CourseState } from \"../../states/CourseState\"\nimport { ProgressionState } from \"../../states/ProgressionState\"\nimport React from \"react\"\nimport { UserState } from \"../../states/UserState\"\nimport { ISerializableEntity, TermtanglesSerialized } from \"../../interfaces/SerializableInterfaces\"\nimport { DateTime } from \"luxon\"\nimport FileSaver from \"file-saver\"\n\nexport class SerializableVersionNumber implements ISerializableEntity {\n  private _versionNumber: number = 1;\n\n  serialize(): Object {\n    return this._versionNumber;\n  }\n\n  async deserialize(imported: TermtanglesSerialized): Promise<void> {\n    if (!imported._version) {\n      throw \"ERROR: Version not included.\";\n    }\n\n    console.log(\"Termtangle data version: \" + imported._version);\n  }\n}\n\nexport class LocalImportExportViewModel {\n  private _serializables = new Map<string, ISerializableEntity>();\n\n  constructor (userState: UserState, progressionState: ProgressionState, courseState: CourseState) {\n    this._serializables.set(\"_version\", new SerializableVersionNumber());\n    this._serializables.set(\"userState\", userState);\n    this._serializables.set(\"progressionState\", progressionState);\n    this._serializables.set(\"courseState\", courseState);\n  }\n\n  serializeToFile(data: TermtanglesSerialized) {\n    FileSaver.saveAs(\n      new Blob([JSON.stringify(data)], { type: \"application/json;charset=utf-8\" }),\n      `termtangles_${DateTime.now().toFormat(\"yyyyMMdd_HHmmssSSS\")}.json`,\n    );\n  }\n\n  export() {\n    const data: TermtanglesSerialized = {\n      _version: 0,\n      userState: {studyLevel: \"\"}\n    };\n    this._serializables.forEach((serializable, key) => {\n      data[key] = serializable.serialize();\n    });\n    this.serializeToFile(data);\n  }\n\n  async deserializeFromString (data: string) {\n    try {\n      const json: TermtanglesSerialized = JSON.parse(data);\n\n      return Promise.resolve(\n        this._serializables.get(\"_version\")?.deserialize(json).then(() => \n          this._serializables.get(\"userState\")?.deserialize(json).then(() => \n            Promise.resolve([\n              this._serializables.get(\"progressionState\")?.deserialize(json),\n              this._serializables.get(\"courseState\")?.deserialize(json),\n            ])\n          )\n        )\n      ).catch((error) => { console.error(error) })\n    } catch (e) {\n      console.error(`ERROR: Invalid JSON (${e.message})`);\n    }\n  }\n\n  import (event: React.ChangeEvent<HTMLInputElement>) {\n    const file: Blob = event.target.files![0];\n    \n    let reader = new FileReader();\n    reader.onload = async (ev) => {\n      if (ev.target?.result) {\n        await this.deserializeFromString(ev.target.result.toString());\n        event.target.value = \"\";\n      }\n    }\n    reader.readAsText(file);\n  }\n}\n","import { autorun, makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport { CourseModel } from \"../../models/CourseModel\";\nimport { FilterModel } from \"../../models/Filters/FilterModel\";\nimport { getCourseFilters, getProgramFilters, getSpecialisationFilters } from \"../../models/Filters/Filters\";\nimport { ProgramModel } from \"../../models/ProgramModel\";\nimport { SpecialisationModel } from \"../../models/SpecialisationModel\";\nimport { SearchDataState } from \"../../states/SearchDataState\";\n\nexport interface ISearchQuery<T> {\n  queryText: string,\n  filters: FilterModel<T>[],\n}\n\nexport interface ISearchResults {\n  courseSearchResults: CourseModel[],\n  programSearchResults: ProgramModel[],\n  specialisationSearchResults: SpecialisationModel[],\n}\n\nexport interface ISearchFilters {\n  courseFilters: FilterModel<CourseModel>[],\n  programFilters: FilterModel<ProgramModel>[],\n  specialisationFilters: FilterModel<SpecialisationModel>[],\n}\n\nexport enum SearchPanelItem {\n  COURSES,\n  PROGRAMS,\n  SPECIALISATIONS,\n}\n\nexport class SearchPanelViewModel {\n  constructor(\n    public readonly searchDataState: SearchDataState,\n  ) {\n    makeAutoObservable<SearchPanelViewModel>(this)\n\n    reaction(() => searchDataState.courseSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.courseFilters = getCourseFilters(searchDataState.courseSearchData)\n    }, {fireImmediately: true})\n\n    reaction(() => searchDataState.programSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.programFilters = getProgramFilters(searchDataState.programSearchData)\n    }, {fireImmediately: true})\n\n    reaction(() => searchDataState.specialisationSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.specialisationFilters = getSpecialisationFilters(searchDataState.specialisationSearchData)\n    }, {fireImmediately: true})\n\n    autorun(() => {\n      this.searchCourses()\n    });\n\n    autorun(() => {\n      this.searchPrograms()\n    });\n\n    autorun(() => {\n      this.searchSpecialisations()\n    });\n  }\n\n  public queryText: string = \"\"\n  public isLoading: boolean = true\n  public resultsPerPage: number = 10\n  // public isInputActive: boolean = false\n  public searchFilters: ISearchFilters = {\n    courseFilters: [],\n    programFilters: [],\n    specialisationFilters: [],\n  }\n  public searchResults: ISearchResults = {\n    courseSearchResults: [],\n    programSearchResults: [],\n    specialisationSearchResults: [],\n  }\n  public activeItem: SearchPanelItem = SearchPanelItem.COURSES\n\n  public setActiveItem = (item: SearchPanelItem) => {\n    this.activeItem = item\n  }\n\n  // get shouldShowPanel() {\n  //   return this.isInputActive || this.queryText.length > 0\n  // }\n\n  // setInputActive(isInputActive: boolean) {\n  //   this.isInputActive = isInputActive;\n  // }\n\n  setQueryText(queryText: string) {\n    this.queryText = queryText\n  }\n\n  setIsLoading(isLoading: boolean) {\n    this.isLoading = isLoading\n  }\n\n  setResultsPerPage(resultsPerPage: number) {\n    this.resultsPerPage = resultsPerPage\n  }\n\n  searchCourses() {\n    let results = this.searchDataState.courseSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.courseSearchData\n        .filter(course => {\n          return course.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || course.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.courseFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.courseSearchResults = results)\n  }\n  \n\n  searchPrograms() {\n    let results = this.searchDataState.programSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.programSearchData\n        .filter(program => {\n          return program.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || program.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.programFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.programSearchResults = results)\n  }\n\n  searchSpecialisations() {\n    let results = this.searchDataState.specialisationSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.specialisationSearchData\n        .filter(specialisation => {\n          return specialisation.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || specialisation.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.specialisationFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.specialisationSearchResults = results)\n  }\n\n\n}\n","import { makeAutoObservable } from \"mobx\";\nexport type FilterValue = string\n\nexport interface IFilterElementState {\n  filterElementName: string\n  numMatchingRecords: number\n}\n\nexport class FilterModel<T> {\n  private _possibleValues: Set<FilterValue> = new Set();\n  private _selectedValues: Set<FilterValue> = new Set();\n  constructor(\n    public readonly name: string,\n    private readonly fnGetTargetValue: (searchResult: T) => FilterValue[],\n  ) {\n    makeAutoObservable(this)\n  }\n\n  private filterResultMapping = new Map<string, number>();\n  public initializeFilter = (allSearchData: T[]) =>{\n    this._possibleValues = new Set(allSearchData\n      .map(result => this.fnGetTargetValue(result))\n      .flat()\n      .filter(value => value !== \"\")\n    )\n  }\n\n  public applyFilter = (searchResults: T[]): T[] => {\n    let results = searchResults\n    if (this._selectedValues.size > 0) {\n      results = searchResults\n        .filter(result => [...this._selectedValues.values()]\n          .filter(filterValue => this.fnGetTargetValue(result).includes(filterValue))\n          .length > 0\n        )\n    }\n    return results\n  }\n\n  public getFilterState(searchResults: T[]): IFilterElementState[] {\n    const isNumerical = [...this._possibleValues.values()].filter(value => isNaN(Number(value))).length === 0\n    return [...this._possibleValues.values()]\n      .sort((a, b) => {\n        if (isNumerical) {\n          return Number(a) - Number(b)\n        } else {\n          return a > b ? 1 : -1\n        }\n      })\n      .map(possibleFilterValue => {\n        return {\n          filterElementName: possibleFilterValue.toString(),\n          numMatchingRecords: searchResults.filter(result => this.fnGetTargetValue(result).includes(possibleFilterValue)).length,\n        }\n      })\n  }\n\n  public isSelected(value: FilterValue) {\n    return this._selectedValues.has(value)\n  }\n\n  public toggleValue(value: FilterValue) {\n    if (!this._possibleValues.has(value)) {\n      console.log(`invalid value toggled: ${value}`)\n      return;\n    }\n    if (this._selectedValues.has(value)) {\n      this._selectedValues.delete(value)\n    } else {\n      this._selectedValues.add(value)\n    }\n  }\n\n  public resetValue(value: FilterValue) {\n    if (!this._possibleValues.has(value)) {\n      console.log(`invalid value toggled: ${value}`)\n      return;\n    }\n    if (this._selectedValues.has(value)) {\n      this._selectedValues.delete(value)\n    }\n  }\n\n}","import { makeAutoObservable } from \"mobx\";\nimport { TermModel } from \"./TermModel\";\nimport { SerializedCourse, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\nimport { ICourse, ConditionalTree, IValidatableEntity, IError } from '../interfaces/ModelInterfaces';\n\nexport enum CourseStatus {\n  UNPLANNED,\n  PLANNED,\n  ALLOCATED,\n  COMPLETED,\n}\n\nexport class CourseModel implements ICourse, IValidatableEntity, ISerializableEntity {\n  allocatedTerm: TermModel | undefined = undefined;\n  public readonly id: string\n  public courseStatus: CourseStatus = CourseStatus.UNPLANNED // Default unplanned\n\n  private _errors: Set<IError> = new Set<IError>()\n\n  constructor(\n    public readonly code: string,\n    public readonly contentTypeLabel: string,\n    public readonly corequisites: string[],\n    public readonly creditPoints: number,\n    public readonly description: string,\n    public readonly effectiveDate: Date, // Form (new Date('YYYY-MM-DD'));\n    public readonly enrolmentRules: string[],\n    public readonly exclusion: string[],\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly keywords: string[],\n    public readonly prerequisites: ConditionalTree,\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly termOffering: string[],\n    public readonly title: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code;\n    makeAutoObservable(this)\n  }\n\n  setAllocated(term: TermModel) {\n    this.courseStatus = CourseStatus.ALLOCATED\n    this.allocatedTerm = term\n  }\n\n  setUnplanned() {\n    this._errors.clear()\n    this.courseStatus = CourseStatus.UNPLANNED\n    this.allocatedTerm = undefined\n  }\n\n  setCompleted() {\n    this._errors.clear()\n    this.courseStatus = CourseStatus.COMPLETED\n    this.allocatedTerm = undefined\n  }\n\n  setPlanned() {\n    this.courseStatus = CourseStatus.PLANNED\n    this.allocatedTerm = undefined\n  }\n\n  //#region IValidatableEntity\n  addError(error: IError) {\n    this._errors.add(error)\n  }\n\n  removeError (error: IError) {\n    this._errors.delete(error)\n  }\n\n  hasErrors(): boolean {\n    return this._errors.size > 0\n  }\n\n  clearErrors() {\n    this._errors.clear()\n  }\n\n  get errors(): IError[] {\n    return [...this._errors]\n  }\n  //#endregion\n\n  serialize(): SerializedCourse {\n    if (this.courseStatus !== CourseStatus.ALLOCATED) {\n      return {\n        id: this.id,\n        status: CourseStatus[this.courseStatus],\n      }\n    } else {\n      return {\n        id: this.id,\n        status: CourseStatus[this.courseStatus],\n        period: this.allocatedTerm?.serialize(),\n      }\n    }\n  }\n\n  async deserialize(course: SerializedCourse) {\n    if (course.id !== this.id) {\n      console.error(`ERROR: This course is not ${course.id} (is: ${this.id})`);\n      return;\n    }\n\n    switch(course.status) {\n      case (CourseStatus[CourseStatus.PLANNED]): {\n        this.setPlanned();\n        break;\n      }\n      case (CourseStatus[CourseStatus.COMPLETED]): {\n        this.setCompleted();\n        break;\n      }\n      case (CourseStatus[CourseStatus.ALLOCATED]): {\n        if (course.period) {\n          try {\n            let termModel = TermModel.termFromSerializedData(course.period);\n            this.setAllocated(termModel);\n          } catch (e) {\n            console.error(`ERROR: invalid term period passed in ${course.period} (${e.message})`);\n          }\n          \n        } else {\n          console.error(`ERROR: Allocated course status with no period ${course.id}`);\n        }\n        break;\n      }\n      default: {\n        console.error(`ERROR: ${course.status} is not a valid status`);\n      }\n    }\n  }\n\n  toString() {\n    return `[COURSE_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadCourseByCode(courseCode: string) {\n//   return db.collection(\"courses\")\n//     .doc(courseCode)!\n//     .withConverter(courseConverter)\n//     .get().then((doc) => {\n//       if (doc.exists) {\n//         var course = doc.data()!;\n\n//         return course;\n//       } else {\n//         console.log(\"No such document!\");\n//       }\n//     }).catch((error) => {\n//       console.log(\"Error getting document:\", error);\n//       throw new Error();\n//     });\n// }\n\n// let courseConverter = {\n//   toFirestore: function (course) {\n//     return {\n//       name: course.code,\n//     };\n//   },\n//   fromFirestore: function (snapshot, options) {\n//     const data = snapshot.data(options);\n//     let effectiveDate = new Date(data.effectiveDate);\n\n//     return new CourseModel(\n//       data.code,\n//       data.contentTypeLabel,\n//       data.corequisites,\n//       Number(data.creditPoints),\n//       data.description,\n//       effectiveDate,\n//       data.enrolmentRules,\n//       data.exclusion,\n//       data.facultyName,\n//       Number(data.implementationYear),\n//       data.keywords,\n//       data.prerequisites,\n//       data.schoolName,\n//       data.studyLevel,\n//       data.termOffering,\n//       data.title,\n//       data.urlMap,\n//     );\n//   }\n// };","import { CourseModel } from \"../CourseModel\"\nimport { ProgramModel } from \"../ProgramModel\"\nimport { SpecialisationModel } from \"../SpecialisationModel\"\nimport { FilterModel } from \"./FilterModel\"\n\nexport const getCourseFilters = (allSearchData: CourseModel[]) => {\n  const filters: FilterModel<CourseModel>[] = [\n    new FilterModel<CourseModel>(\"Offering Periods\", (course) => course.termOffering),\n    new FilterModel<CourseModel>(\"Faculty\", (course) => [course.facultyName]),\n    new FilterModel<CourseModel>(\"School\", (course) => [course.schoolName]),\n    new FilterModel<CourseModel>(\"Credit Points\", (course) => [course.creditPoints.toString()]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n\nexport const getProgramFilters = (allSearchData: ProgramModel[]) => {\n  const filters: FilterModel<ProgramModel>[] = [\n    new FilterModel<ProgramModel>(\"Intake Periods\", (program) => program.intakePeriod),\n    new FilterModel<ProgramModel>(\"Faculty\", (program) => [program.facultyName]),\n    new FilterModel<ProgramModel>(\"School\", (program) => [program.schoolName]),\n    new FilterModel<ProgramModel>(\"Credit Points\", (program) => [program.creditPoints.toString()]),\n    new FilterModel<ProgramModel>(\"Academic Item Type\", (program) => [program.academicItemType]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n\nexport const getSpecialisationFilters = (allSearchData: SpecialisationModel[]) => {\n  const filters: FilterModel<SpecialisationModel>[] = [\n    new FilterModel<SpecialisationModel>(\"Faculty\", (specialisation) => [specialisation.facultyName]),\n    new FilterModel<SpecialisationModel>(\"School\", (specialisation) => [specialisation.schoolName]),\n    new FilterModel<SpecialisationModel>(\"Credit Points\", (specialisation) => [specialisation.creditPoints.toString()]),\n    new FilterModel<SpecialisationModel>(\"Academic Item Type\", (specialisation) => [specialisation.academicItemType]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n","/* May remove */\n\nexport const ResetButtonStyle = {\n  backgroundColor: \"#dcdcdc\",\n  border: \"none\",\n  color: \"black\",\n  padding: \"15px 32px\",\n  textDecoration: \"none\",\n  display: \"inline-block\",\n  fontSize: \"16px\",\n  margin: \"4px 2px\",\n  cursor: \"pointer\",\n  width: \"100%\",\n  height: \"100%\"\n}","import { Observer, observer } from \"mobx-react\"\nimport { useState } from \"react\"\nimport { Accordion, Form, Menu } from \"semantic-ui-react\"\nimport { FilterModel } from \"../../../models/Filters/FilterModel\"\n\nexport interface IFilterSectionProps<T> {\n  searchResults: T[]\n  filter: FilterModel<T>\n}\n\nexport const FilterSection = observer(<T,>(props: IFilterSectionProps<T>) => {\n  const [expandedFilters, setExpandedFilters] = useState(new Set<string>())\n\n  return <Observer>\n    {\n      () => {\n        let filterState = props.filter.getFilterState(props.searchResults)\n        return (\n            <Menu.Item key={props.filter.name}>\n              <Accordion.Title\n                active={expandedFilters.has(props.filter.name)}\n                content={props.filter.name}\n                onClick={() => {\n                  let newExpandedFilters = new Set(expandedFilters)\n                  if (expandedFilters.has(props.filter.name)) {\n                    newExpandedFilters.delete(props.filter.name)\n                  } else {\n                    newExpandedFilters.add(props.filter.name)\n                  }\n                  setExpandedFilters(newExpandedFilters)\n                }}\n              />\n              <Accordion.Content\n                active={expandedFilters.has(props.filter.name)}\n                content={\n                  <Form>\n                    <Form.Group grouped>\n                      {\n                        filterState.map(filterElementState => {\n                          return <Form.Checkbox\n                            key={filterElementState.filterElementName}\n                            label={`${filterElementState.filterElementName}`}\n                            name={props.filter.name}\n                            type=\"checkbox\"\n                            value={filterElementState.filterElementName}\n                            checked={props.filter.isSelected(filterElementState.filterElementName)}\n                            onClick={() => {\n                              props.filter.toggleValue(filterElementState.filterElementName)\n                            }}\n                          />\n                        })\n                      }\n                    </Form.Group>\n                  </Form>\n                }\n              />\n            </Menu.Item>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from 'mobx-react'\nimport { Accordion, Menu } from 'semantic-ui-react'\nimport { ResetButtonStyle } from '../../../config/ResetButtonStyle'\nimport { FilterModel } from '../../../models/Filters/FilterModel'\nimport { FilterSection } from './FilterSection'\nimport './ResetButton.css'\nexport interface IFilterMenuProps<T> {\n  searchResults: T[]\n  filters: FilterModel<T>[]\n}\n\nexport const FilterMenuView = observer(<T,>(props: IFilterMenuProps<T>) => {\n  const handlereset = () => {\n    props.filters.forEach((filter) => {\n      filter.getFilterState(props.searchResults).forEach((element) => {\n        filter.resetValue(element.filterElementName)\n      })\n    })\n  }\n\n  return (\n    <Observer>\n      {\n        () => {\n          return <div >\n            <div className=\"resetbutton\">\n              <button style={ResetButtonStyle} onClick={() => handlereset()}>Reset Filter</button>\n            </div>\n            <Accordion fluid as={Menu} vertical>\n              {\n                props.filters.map(filter => {\n                  return <FilterSection\n                    searchResults={props.searchResults}\n                    filter={filter}\n                  />\n                })\n              }\n            </Accordion>\n\n          </div>\n        }\n\n      }\n    </Observer>\n  )\n})\n","\nimport { Grid, Item, Pagination } from 'semantic-ui-react'\nimport styled from 'styled-components'\n\nexport const ResultItem = styled(Item)`\n  &&& {\n    :before{\n      width:0px;\n    }\n    border: 0px solid lightgrey;\n    padding: 6px;\n    display: flex;\n    align-items: flex-start;\n    justify-content: space-between;\n    margin:0px\n  }\n  &&&&{\n    padding:1em 0;\n  }\n`\n\nexport const ResultItemHeader = styled(Item.Header)`\n`\n\nexport const ResultItemContent = styled(Item.Content)`\n  &&&&& {\n    flex: 1;\n    padding:0;\n  }\n`\n\nexport const ResultItemExtra = styled(Item.Extra)`\n  &&&& {\n    margin: 0;\n    text-align: right;\n    flex: 1;\n  }\n`\n\nexport const ResultCollection = styled(Item.Group)`\n  && {\n    padding: 15px 0px 10px 0px;\n    margin: 0px;\n  }\n`\n\nexport const ResultsPagination = styled(Pagination)`\n  max-height: 40px;\n`\n\nexport const FilterColumn = styled(Grid.Column)`\n  padding-bottom: 20px;\n  max-height:80vh;\n  overflow: auto;\n`\n\nexport const ResultsColumn = styled(Grid.Column)`\n  padding-bottom: 20px;\n  max-height:80vh;\n  overflow: auto;\n`\n\n","import { makeAutoObservable } from \"mobx\";\nimport { SerializedTerm, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\n\nexport class TermModel implements ISerializableEntity {\n    year: number;\n    name: string;\n\n    constructor(\n        year: number,\n        name: string,\n    ) {\n        makeAutoObservable(this);\n        this.checkTermConstraints(year, name);\n        \n        this.year = year;\n        this.name = name;\n    }\n\n    static termFromSerializedData(serializedTerm: SerializedTerm) {\n        return new TermModel(serializedTerm.year, serializedTerm.name);\n    }\n\n    private checkTermConstraints(year?: number, name?: string) {\n        if (!year) throw Error(`ERROR: ${year} is not a valid term year.`);\n        if (!name) throw Error(`ERROR: ${name} is not a valid term name.`);\n\n        // Do other term checks here\n    }\n\n    // getShortName() {\n    //     if (this.tryGetTermNumber()) {\n    //         return `${this.year % 100}T${this.tryGetTermNumber()}`\n    //     }\n    //     return `${this.year % 100} ${this.name}`\n    // }\n\n    get getMappingName() {\n        return `${this.year}_${this.name}`\n    }\n\n    update(year: number, name: string) {\n        this.year = year\n        this.name = name\n    }\n\n    updateFromMappingName(mappingName: string) {\n        let year = parseInt(mappingName.split('_')[0])\n        let name = mappingName.split('_')[1]\n        this.update(year, name)\n    }\n\n    get getFullName() {\n        return `${this.year} ${this.name}`\n    }\n\n    get getTermName() {\n        return `${this.name}`\n    }\n\n    static fromMappingName(mappingName: string) {\n        let year = parseInt(mappingName.split('_')[0])\n        let term_name = mappingName.split('_')[1]\n\n        return new TermModel(year, term_name)\n    }\n\n    private tryGetTermNumber(): number | undefined {\n        switch (this.name) {\n            case \"Summer Term\":\n                return 0\n            case \"Term 1\":\n                return 1\n            case \"Term 2\":\n                return 2\n            case \"Term 3\":\n                return 3\n            default:\n                return undefined\n        }\n    }\n\n    public equals(obj: TermModel | null): boolean {\n        if (!obj) {\n            return false\n        }\n        return this.year === obj.year && this.name === obj.name\n    }\n\n    public isBefore(term: TermModel) {\n        return this.year < term.year\n            || (term.year === this.year && ( (this.tryGetTermNumber() ?? 99) < (term.tryGetTermNumber() ?? 99)) );\n    }\n\n    serialize(): SerializedTerm {\n        return {\n            year: this.year,\n            name: this.name,\n        };\n    }\n\n    deserialize(serializedTerm: SerializedTerm): Promise<void> {\n        throw Error(`ERROR: use static method termFromSerializedData to construct the term from serialized data ${serializedTerm}.`);\n    }\n}\n","import { Observer, observer } from \"mobx-react\"\nimport { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { CourseModel, CourseStatus } from \"../../../models/CourseModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra, ResultItemHeader } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  course: T\n}\n\nexport const CourseResultView = observer((props: IResultViewProps<CourseModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseOver={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <ResultItemHeader>{props.course.code}</ResultItemHeader>\n              <Item.Description>{props.course.title}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n              ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.course.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.course.courseStatus === CourseStatus.PLANNED\n                        ? <Icon color=\"red\" className=\"bookmark\" />\n                        : props.course.courseStatus === CourseStatus.ALLOCATED\n                          ? <Icon color=\"orange\" className=\"calendar alternate outline\" />\n                          : props.course.courseStatus === CourseStatus.COMPLETED\n                            ? <Icon color=\"green\" className=\"check\" />\n                            : \"\"\n                    }\n\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.course.courseStatus !== CourseStatus.PLANNED && props.course.courseStatus !== CourseStatus.ALLOCATED}\n                        icon={props.course.courseStatus === CourseStatus.ALLOCATED ? 'calendar alternate outline' : 'bookmark'}\n                        content={props.course.courseStatus === CourseStatus.ALLOCATED ? 'Scheduled' : 'Interested'}\n                        color={props.course.courseStatus === CourseStatus.ALLOCATED ? 'orange' : 'blue'}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.course.courseStatus === CourseStatus.PLANNED || props.course.courseStatus === CourseStatus.ALLOCATED) {\n                            props.course.setUnplanned()\n                          } else {\n                            props.course.setPlanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {props.course.courseStatus !== CourseStatus.COMPLETED}\n                        icon='check'\n                        content='Done'\n                        color=\"green\"\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.course.courseStatus === CourseStatus.COMPLETED) {\n                            props.course.setUnplanned()\n                          } else {\n                            props.course.setCompleted()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.course.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React from \"react\"\nimport { Item } from \"semantic-ui-react\"\nimport styled from 'styled-components'\nimport { CourseModel } from \"../../../models/CourseModel\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\nimport { CourseResultView } from \"./CourseResultView\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nconst CourseCollection = styled(Item.Group)`\n  &&& {\n    padding: 15px 0px 10px 0px;\n  }\n`\n        \nexport const CourseResultCollectionView = observer((props: IResultCollectionViewProps<CourseModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(course => {\n                return (\n                  <CourseResultView course={course} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { CourseResultCollectionView } from \"../Results/CourseResultCollectionView\"\nimport { FilterColumn, ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const CourseSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <FilterColumn key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.courseSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.courseFilters}\n                  />\n                </FilterColumn>\n                <ResultsColumn key=\"results\" width={12}>\n                  <CourseResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.courseSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.courseSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.courseSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { ProgressionStatus } from \"../../../interfaces/ModelInterfaces\"\nimport { ProgramModel } from \"../../../models/ProgramModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  program: T\n}\n\nexport const ProgramResultView = observer((props: IResultViewProps<ProgramModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseEnter={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <Item.Header>{props.program.title}</Item.Header>\n              <Item.Description>{props.program.academicItemType} - {props.program.code}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n                ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.program.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.program.progressionStatus === ProgressionStatus.PLANNED\n                        ? <Icon color=\"green\" className=\"calendar alternate outline\" />\n                        : <></>\n                    }\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.program.progressionStatus === ProgressionStatus.UNPLANNED}\n                        icon={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"plus circle\" : \"minus circle\"}\n                        content={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"Add\" : \"Remove\"}\n                        color={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"green\" : \"red\"}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.program.progressionStatus === ProgressionStatus.UNPLANNED) {\n                            props.program.setPlanned()\n                          } else {\n                            props.program.setUnplanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.program.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport { ProgramModel } from \"../../../models/ProgramModel\"\nimport { ProgramResultView } from \"./ProgramResultView\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nexport const ProgramResultCollectionView = observer((props: IResultCollectionViewProps<ProgramModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(program => {\n                return (\n                  <ProgramResultView program={program} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { ProgramResultCollectionView } from \"../Results/ProgramResultCollectionView\"\nimport { FilterColumn, ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const ProgramSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <FilterColumn key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.programSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.programFilters}\n                  />\n                </FilterColumn>\n                <ResultsColumn key=\"results\" width={12}>\n                  <ProgramResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.programSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.programSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.programSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { ProgressionStatus } from \"../../../interfaces/ModelInterfaces\"\nimport { SpecialisationModel } from \"../../../models/SpecialisationModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  specialisation: T\n}\n\nexport const SpecialisationResultView = observer((props: IResultViewProps<SpecialisationModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener, noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseEnter={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <Item.Header>{props.specialisation.title}</Item.Header>\n              <Item.Description>{props.specialisation.academicItemType} - {props.specialisation.code}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n              ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.specialisation.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.specialisation.progressionStatus === ProgressionStatus.PLANNED\n                        ? <Icon color=\"green\" className=\"calendar alternate outline\" />\n                        : <></>\n                    }\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED}\n                        icon={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"plus circle\" : \"minus circle\"}\n                        content={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"Add\" : \"Remove\"}\n                        color={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"green\" : \"red\"}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED) {\n                            props.specialisation.setPlanned()\n                          } else {\n                            props.specialisation.setUnplanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.specialisation.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport { SpecialisationModel } from \"../../../models/SpecialisationModel\"\nimport { SpecialisationResultView } from \"./SpecialisationResultView\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nexport const SpecialisationResultCollectionView = observer((props: IResultCollectionViewProps<SpecialisationModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(specialisation => {\n                return (\n                  <SpecialisationResultView specialisation={specialisation} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { SpecialisationResultCollectionView } from \"../Results/SpecialisationResultCollectionView\"\nimport { FilterColumn, ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const SpecialisationSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <FilterColumn key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.specialisationSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.specialisationFilters}\n                  />\n                </FilterColumn>\n                <ResultsColumn key=\"results\" width={12}>\n                  <SpecialisationResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.specialisationSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.specialisationSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.specialisationSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from 'mobx-react'\nimport React from 'react'\nimport { Container, Dropdown, Icon, Input, Menu } from 'semantic-ui-react'\nimport styled from 'styled-components'\nimport { SearchPanelItem, SearchPanelViewModel } from './SearchPanelViewModel'\nimport { CourseSearchTab } from './SearchTab/CourseSearchTab'\nimport { ProgramSearchTab } from './SearchTab/ProgramSearchTab'\nimport { SpecialisationSearchTab } from './SearchTab/SpecialisationSearchTab'\n\n\nconst ResultsSubtextContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n  padding: 6px;\n`\n\nconst FoundResults = styled.h4`\n  &&& {\n    margin: 1rem 0 0.5rem 0.5rem\n  }\n`\n\nexport interface ISearchPanelProps {\n  searchPanelViewModel: SearchPanelViewModel\n}\n\nconst SearchPanel = observer(({ searchPanelViewModel }: ISearchPanelProps) => {\n  const getNumResults = () => {\n    let numResults = -1\n    switch (searchPanelViewModel.activeItem) {\n      case (SearchPanelItem.COURSES):\n        numResults = searchPanelViewModel.searchResults.courseSearchResults.length\n        break\n      case (SearchPanelItem.PROGRAMS):\n        numResults = searchPanelViewModel.searchResults.programSearchResults.length\n        break\n      case (SearchPanelItem.SPECIALISATIONS):\n        numResults = searchPanelViewModel.searchResults.specialisationSearchResults.length\n        break\n    }\n    return numResults\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <React.Fragment>\n            <Container>\n              <Menu pointing secondary>\n                <Menu.Item\n                  name={\"courses\"}\n                  active={searchPanelViewModel.activeItem === SearchPanelItem.COURSES}\n                  onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.COURSES)}\n                >\n                  {`Courses (${searchPanelViewModel.searchResults.courseSearchResults.length})`}\n                </Menu.Item>\n                <Menu.Item\n                  name={\"programs\"}\n                  active={searchPanelViewModel.activeItem === SearchPanelItem.PROGRAMS}\n                  onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.PROGRAMS)}\n                >\n                  {`Programs (${searchPanelViewModel.searchResults.programSearchResults.length})`}\n                </Menu.Item>\n                <Menu.Item\n                  name={\"specialisations\"}\n                  active={searchPanelViewModel.activeItem === SearchPanelItem.SPECIALISATIONS}\n                  onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.SPECIALISATIONS)}\n                >\n                  {`Specialisations (${searchPanelViewModel.searchResults.specialisationSearchResults.length})`}\n                </Menu.Item>\n              </Menu>\n              <ResultsSubtextContainer>\n                <FoundResults>\n                  Found {getNumResults()} result{getNumResults() === 1 ? \"\" : \"s\"}\n                </FoundResults>\n\n                <span>\n                  <span style={{ marginRight: \"10px\" }}>Results per page</span>\n                  <Dropdown\n                    text={searchPanelViewModel.resultsPerPage.toString()}\n                    selection\n                    options={[\n                      { text: 10, value: 10 },\n                      { text: 20, value: 20 },\n                      { text: 30, value: 30 },\n                      { text: 50, value: 50 },\n                    ]}\n                    onChange={(e, data) => { searchPanelViewModel.setResultsPerPage(Number(data.value)) }}\n                  />\n                </span>\n              </ResultsSubtextContainer>\n              {\n                searchPanelViewModel.activeItem === SearchPanelItem.COURSES\n                  ? <CourseSearchTab searchPanelViewModel={searchPanelViewModel} />\n                  : <></>\n              }\n              {\n                searchPanelViewModel.activeItem === SearchPanelItem.PROGRAMS\n                  ? <ProgramSearchTab searchPanelViewModel={searchPanelViewModel} />\n                  : <></>\n              }\n              {\n                searchPanelViewModel.activeItem === SearchPanelItem.SPECIALISATIONS\n                  ? <SpecialisationSearchTab searchPanelViewModel={searchPanelViewModel} />\n                  : <></>\n              }\n            </Container>\n          </React.Fragment>\n        )\n      }\n    }\n  </Observer>\n\n})\n\nexport default SearchPanel\n","import styled from 'styled-components'\nimport { Observer, observer } from 'mobx-react';\nimport React, { useState } from 'react';\nimport { Button, Input, Menu, Modal } from 'semantic-ui-react';\nimport { StudyLevel } from '../../interfaces/ModelInterfaces';\nimport { UserState } from '../../states/UserState';\nimport SearchPanel from '../SearchPanel/SearchPanel';\nimport { SearchPanelViewModel } from '../SearchPanel/SearchPanelViewModel';\nimport OutsideClickHandler from 'react-outside-click-handler';\n\nexport interface IMenuBarProps {\n  userState: UserState\n  searchPanelViewModel: SearchPanelViewModel\n}\n\nconst MenuBarView = styled(Menu)`\n  &&{\n    height:50px;\n    margin:0;\n  }\n`\n\nconst SearchPanelView = styled.div`\n  &&&{\n    position:block;\n    z-index:420;\n    background:white;\n    margin-top:11px;\n    display: ${props => props.isActive ? \"block\" : \"none\"};\n    border: 1px solid rgba(34,36,38,.15);\n    box-shadow:0 2px 5px 0 rgb(34 36 38 / 15%);\n  }\n`\n\nconst SearchInputItem = styled(Menu.Item)`\n  &&&& {\n    display:block;\n    position: absolute;\n    right:0;\n    ${props => props.isActive ? \"width: calc(min(60vw,1200px))\" : \"width: 300px\"};\n    /* transition: width 0.2s cubic-bezier(0.000, 0.795, 0.000, 1.000); */\n    z-index:420;\n  }\n`\n\nexport const MenuBar = observer((props: IMenuBarProps) => {\n  const [studyLevelChangeAction, setStudyLevelChangeAction] = useState<(() => void) | undefined>(undefined)\n  const [searchPanelActive, setSearchPanelActive] = useState(false);\n\n  return <Observer>\n    {() => {\n      return (\n        <React.Fragment>\n          <MenuBarView>\n            <Menu.Item header>Termtangles</Menu.Item>\n            <Menu.Item\n              name={\"Undergraduate\"}\n              active={props.userState.studyLevel === StudyLevel.UNDERGRADUATE}\n              onClick={\n                () => props.userState.studyLevel !== StudyLevel.UNDERGRADUATE\n                  ? setStudyLevelChangeAction(() => () => props.userState.setStudyLevel(StudyLevel.UNDERGRADUATE))\n                  : {}\n              }\n            />\n            <Menu.Item\n              name={\"Postgraduate\"}\n              active={props.userState.studyLevel === StudyLevel.POSTGRADUATE}\n              onClick={\n                () => props.userState.studyLevel !== StudyLevel.POSTGRADUATE\n                  ? setStudyLevelChangeAction(() => () => props.userState.setStudyLevel(StudyLevel.POSTGRADUATE))\n                  : {}\n              }\n            />\n            <Menu.Item\n              name={\"Research\"}\n              active={props.userState.studyLevel === StudyLevel.RESEARCH}\n              onClick={\n                () => props.userState.studyLevel !== StudyLevel.RESEARCH\n                  ? setStudyLevelChangeAction(() => () => props.userState.setStudyLevel(StudyLevel.RESEARCH))\n                  : {}\n              }\n            />\n            <Menu.Menu position=\"right\">\n              <OutsideClickHandler onOutsideClick={() => setSearchPanelActive(false)}>\n\n                <SearchInputItem isActive={searchPanelActive}>\n                  <Input\n                    icon=\"search\"\n                    iconPosition=\"left\"\n                    placeholder=\"Search\"\n                    loading={props.searchPanelViewModel.isLoading}\n                    onFocus={() => { setSearchPanelActive(true); }}\n                    onChange={(e, data) => props.searchPanelViewModel.setQueryText(data.value)}\n                    value={props.searchPanelViewModel.queryText}\n                  />\n                  <SearchPanelView isActive={searchPanelActive}>\n                    <SearchPanel searchPanelViewModel={props.searchPanelViewModel} />\n                  </SearchPanelView>\n                </SearchInputItem>\n\n              </OutsideClickHandler>\n            </Menu.Menu>\n          </MenuBarView>\n\n          <Modal\n            size='small'\n            open={studyLevelChangeAction !== undefined}\n            onClose={() => setStudyLevelChangeAction(undefined)}\n          >\n            <Modal.Header>Study Level Change</Modal.Header>\n            <Modal.Content>\n              <p>Changing study level will reset all current progress. Do you want to continue?</p>\n            </Modal.Content>\n            <Modal.Actions>\n              <Button negative onClick={() => setStudyLevelChangeAction(undefined)}>\n                No\n              </Button>\n              <Button positive onClick={() => {\n                if (studyLevelChangeAction) {\n                  studyLevelChangeAction()\n                }\n                setStudyLevelChangeAction(undefined)\n              }}>\n                Yes\n              </Button>\n            </Modal.Actions>\n          </Modal>\n\n        </React.Fragment>\n      )\n    }}\n  </Observer>\n})\n","import styled from 'styled-components'\nimport { CourseModel } from '../../../models/CourseModel';\nimport { Draggable } from 'react-beautiful-dnd'\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { IError } from '../../../interfaces/ModelInterfaces';\nimport { TermModel } from '../../../models/TermModel';\n\nconst Container = styled.div`\n    border: 1px solid lightgrey;\n    border-radius:8px;\n    padding: 8px;\n    margin: 0px 2px 8px 2px;\n    background-color: ${props => (\n        props.isPrerequisiteOfCurrentDraggable\n        ? '#c5eafc'\n        : props.hasErrors()\n            ? '#f5bfc8'\n            : props.isDragging\n                ? 'lightgrey'\n                : 'white'\n        )\n    };\n    ${props => props.horizontal ? \"\" : \"flex-grow: 1;\"}\n    height: fit-content;\n    max-width: 350px;\n`\n\nconst tooltipStyle = {\n    fontSize: 13,\n}\n\ninterface ICourseViewProps {\n    droppableIndex: number\n    course: CourseModel\n    prerequisitesOfCurrentDraggable: Set<string>\n    horizontal?: boolean\n}\n\nconst CourseView = ({ droppableIndex, course, prerequisitesOfCurrentDraggable, horizontal }: ICourseViewProps) => {\n    let termOffering = formatTermOffering(course.termOffering, course.allocatedTerm);\n    let errorList: string[] = formatErrors(course.errors);\n\n    return (\n            <Draggable draggableId={course.code} index={droppableIndex}>\n                {((provided, snapshot) => (\n                    <Container\n                        horizontal={horizontal}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        ref={provided.innerRef}\n                        isDragging={snapshot.isDragging}\n                        isPrerequisiteOfCurrentDraggable={prerequisitesOfCurrentDraggable.has(course.id)}\n                        hasErrors={() => course.hasErrors()}\n                    >\n                        <Tooltip title={\n                            <span>\n                                <p style={tooltipStyle}>{termOffering}</p>\n                                <p style={tooltipStyle}>{errorList[0]}</p>\n                                <p style={tooltipStyle}>{errorList[1]}</p>\n                            </span>} \n                            aria-label=\"add\" aria-multiline=\"true\" arrow={true}\n                        >\n                            <p> {course.code} - {course.title}</p>     \n                        </Tooltip>\n                    </Container>\n                ))}\n            </Draggable>\n    )\n}\n\nfunction formatErrors(errors: IError[]): string[] {\n    let output: string[] = [];\n    let missing: string[] = [];\n    let missingFormatted: string[] = [];\n    const regex = /<br\\/>/ig;\n\n    if (errors.length === 0) {\n        return [\"\"];\n    }\n\n    if (errors.length === 1) {\n        return [errors[0].message.replace(regex, \"\"), `${errors[0].missing}`];\n    }\n\n    for (let i = 0; i < errors.length; i++) {\n        output.push(errors[i].message.replace(regex, \"\"));\n        missing.push(errors[i].missing);\n    }\n\n    // Format missing arr for empty elements and remove from array before joining\n    for (let i = 0; i < errors.length; i++) {\n        if (missing[i] !== \"\") {\n            missingFormatted.push(missing[i]);\n        }\n    }\n\n    return [output.join(\" & \"), missingFormatted.join(\" & \")];\n}\n\nfunction formatTermOffering(termOffering: string[], allocatedPeriod: TermModel | undefined) {\n    termOffering = termOffering.sort();\n    let output: string = termOffering.join(\", \");\n\n    output = `Term Offerings: ${output}`;\n\n    return output;\n}\n\nexport default CourseView\n","import { Droppable } from 'react-beautiful-dnd';\nimport { Label } from 'semantic-ui-react';\nimport styled from 'styled-components'\nimport { CourseModel } from '../../../models/CourseModel';\nimport { TermModel } from '../../../models/TermModel';\nimport CourseView from '../CourseView/CourseView';\nimport { ICurrentDraggableProps } from '../PlannerViewModel';\n\nconst Container = styled.div`\n    margin: 8px;\n    border: 1px solid lightgrey;\n    border-radius:2px;\n\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n    ${props => !props.horizontal? \"max-width: 350px;\" : \"\"}\n`\n\nconst Title = styled.h3`\n    padding: 6px;\n    margin: 0 0;\n    display: flex;\n    width: 200px;\n`;\n\nconst CourseList = styled.div`\n    padding: 6px;\n    min-height: 100px;\n    transition: background-color 0.2s ease;\n    background-color: ${props =>\n        (props.isDraggingOver\n            ? props.isValidDroppable ? '#8debb7' : '#ff99b0'\n            : props.isPossibleTermOfCurrentDraggable\n                ? '#cafae0'\n                :(props.courseID === \"completed\")\n                    ? '#edf2f4'\n                    : (props.courseID === \"planned\")\n                        ? '#edf2f4'\n                        : '#edf2f4'\n        )\n    };\n    flex-grow: 1;\n    display: flex;\n    flex-direction: ${props => props.horizontal ? \"row\" : \"column\"};\n    flex-flow: row ${props => props.horizontal ? \"wrap\" : \"nowrap\"};\n    align-content: flex-start;\n`;\n\n\n\nconst TermHeader = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n`\n\nconst UocLabel = styled(Label)`\n    && {\n        margin: auto 0 auto 0;\n        height: fit-content;\n        vertical-align: middle;\n        white-space: nowrap;\n    }\n`\n\ninterface ITermViewProps {\n    id: string\n    title: string\n    courses: CourseModel[]\n    term: TermModel | null\n    currentDraggableProps: ICurrentDraggableProps\n    horizontal?: boolean\n}\n\nconst CourseGroupView = ({ id, title, courses, term, currentDraggableProps, horizontal}: ITermViewProps) => {\n    const isPossibleTerm = (term: TermModel | null): boolean => {\n        return currentDraggableProps.possibleTerms.filter(_term => _term.equals(term)).length > 0\n    }\n    const totalUoc = courses.map(course => course.creditPoints).reduce((a, b) => a + b, 0)\n    return (\n        <Container horizontal={horizontal}>\n            <TermHeader>\n                <Title>{title}</Title>\n                {\n                    term\n                    ? <UocLabel\n                        color={(totalUoc === 18 || courses.length === 3)\n                            ? \"green\"\n                            : totalUoc < 18\n                                ? \"orange\"\n                                : \"yellow\"\n                        }\n                        content={`${totalUoc} UOC`}\n                        size={\"small\"}\n                    />\n                    : <></>\n                }\n            </TermHeader>\n            <Droppable\n                droppableId={id}\n                direction={horizontal ? 'horizontal' : 'vertical'}\n            >\n                {\n                    (provided, snapshot) => (\n                        <CourseList\n                            horizontal\n                            {...provided.droppableProps}\n                            ref={provided.innerRef}\n                            isDraggingOver={snapshot.isDraggingOver}\n                            courseID={provided.droppableProps['data-rbd-droppable-id']}\n                            isPossibleTermOfCurrentDraggable={isPossibleTerm(term)}\n                            isValidDroppable={term === null || isPossibleTerm(term)}\n                        >\n                            {\n                                courses\n                                    ? courses.map((course, index) =>\n                                    <CourseView\n                                        horizontal={horizontal}\n                                        key={course.code}\n                                        course={course}\n                                        droppableIndex={index}\n                                        prerequisitesOfCurrentDraggable={currentDraggableProps.prerequisiteCourseIds}\n                                    />)\n                                    : undefined\n                            }\n                            {provided.placeholder}\n                        </CourseList>\n                    )\n                }\n            </Droppable>\n        </Container>\n    )\n}\nexport default CourseGroupView\n","\nimport React from 'react';\nimport styled from 'styled-components';\nimport CourseGroupView from '../CourseGroupView/CourseGroupView';\nimport { ICourseGroup, ICurrentDraggableProps } from '../PlannerViewModel';\n\nconst Container = styled.div`\n    margin: 8px;\n    border: 1px solid lightgrey;\n    border-radius:2px;\n    width: 250px;\n`\n\nconst Title = styled.h3`\n    padding: 6px;\n    margin: 3px;\n    display: flex;\n    width: 200px;\n`;\n\ninterface IYearViewProps {\n    id: string,\n    title: string,\n    year: number\n    courseGroups: ICourseGroup[],\n    currentDraggableProps: ICurrentDraggableProps,\n}\n\nconst YearView = (props: IYearViewProps) => {\n    return (\n        <Container>\n            <Title>{props.year}</Title>\n            {\n              props.courseGroups.map(courseGroup => {\n                // console.log(`Rendering term ${courseGroup.title} with courses ${courseGroup.courses}`)\n                return (\n                  <CourseGroupView\n                    key={courseGroup.id}\n                    id={courseGroup.id}\n                    title={courseGroup.title}\n                    courses={courseGroup.courses}\n                    term={courseGroup.term}\n                    currentDraggableProps={props.currentDraggableProps}\n                  />\n                )\n              })\n            }\n        </Container>\n    )\n}\nexport default YearView\n","import { Observer, observer } from 'mobx-react';\nimport React from 'react';\nimport styled from 'styled-components'\nimport { DragDropContext, DragStart, DropResult, ResponderProvided } from 'react-beautiful-dnd';\nimport { TermModel } from '../../models/TermModel';\nimport { PlannerViewModel } from './PlannerViewModel';\nimport CourseGroupView from './CourseGroupView/CourseGroupView';\nimport YearView from './YearView/YearView';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n`\n\nconst YearPlanner = styled.div`\n  display: inherit;\n  overflow: auto;\n`\n\nconst Planner = observer(({ plannerViewModel }: { [key: string]: PlannerViewModel }) => {\n  return <Observer>\n    {() => {\n      const courseState = plannerViewModel.courseState;\n      const plannerState = plannerViewModel.plannerState;\n\n      const onDragEnd = (result: DropResult) => {\n        const { destination, source, draggableId } = result;\n        if (!destination) {\n          return\n        }\n        const course = courseState.getCourseById(draggableId)\n        if (!course || !source || !destination) {\n          return\n        }\n\n        const sourceGroup = plannerViewModel.getCourseGroupById(source.droppableId)\n        const destinationGroup = plannerViewModel.getCourseGroupById(destination.droppableId)\n\n        sourceGroup?.courses.splice(source.index, 1)\n        destinationGroup?.courses.splice(destination.index, 0, course)\n\n        if (destination.droppableId !== source.droppableId) {\n          if (destination.droppableId === \"trash\") {\n            course.setUnplanned()\n          } else if (destination.droppableId === \"completed\") {\n            course.setCompleted()\n          } else if (destination.droppableId === \"planned\") {\n            course.setPlanned()\n          } else {\n            course.setAllocated(TermModel.fromMappingName(destination.droppableId))\n          }\n        }\n        plannerViewModel.synchronizePlannerState()\n        plannerViewModel.clearCurrentDraggableProps()\n      }\n\n      const onBeforeCapture = () => {\n        plannerViewModel.currentDraggableProps = {\n          ...plannerViewModel.currentDraggableProps,\n          isDragging: true,\n        }\n      }\n\n      const onDragStart = (initial: DragStart, provided: ResponderProvided) => {\n        const course = courseState.getCourseById(initial.draggableId)\n        if (course) {\n          plannerViewModel.currentDraggableProps = {\n            ...plannerViewModel.currentDraggableProps,\n            possibleTerms: plannerViewModel.calculateDisplayableTerms().filter(term => {\n              return courseState.getMissingRequirementsWhenAssigningCourseToTerm(course, term).length === 0\n            }),\n            prerequisiteCourseIds: new Set<string>(courseState.getFlattenedPrerequisiteList(course.prerequisites))\n          }\n        }\n      }\n\n      return (\n        <React.Fragment>\n          <DragDropContext\n            onBeforeCapture={onBeforeCapture}\n            onDragStart={onDragStart}\n            onDragEnd={onDragEnd}\n          >\n            <Container>\n              {\n                <CourseGroupView\n                  key={plannerState.plannedGroup.id}\n                  id={plannerState.plannedGroup.id}\n                  title={plannerState.plannedGroup.title}\n                  courses={plannerState.plannedGroup.courses}\n                  term={null}\n                  currentDraggableProps={plannerViewModel.currentDraggableProps}\n                />\n              }\n              <YearPlanner>\n              {\n                plannerState.yearGroups.map(yearGroup => {\n                  return <YearView\n                    id={yearGroup.id}\n                    title={yearGroup.title}\n                    year={yearGroup.year}\n                    courseGroups={yearGroup.courseGroups}\n                    currentDraggableProps={plannerViewModel.currentDraggableProps}\n                  />\n                })\n              }\n              </YearPlanner>\n            </Container>\n            {\n              <CourseGroupView\n                horizontal={true}\n                key={plannerState.completedGroup.id}\n                id={plannerState.completedGroup.id}\n                title={plannerState.completedGroup.title}\n                term={null}\n                courses={plannerState.completedGroup.courses}\n                currentDraggableProps={plannerViewModel.currentDraggableProps}\n              />\n            }\n            {\n              plannerViewModel.currentDraggableProps.isDragging\n                ? \n                <CourseGroupView\n                  horizontal={true}\n                  key=\"trash\"\n                  id=\"trash\"\n                  title=\"Remove\"\n                  term={null}\n                  courses={[]}\n                  currentDraggableProps={plannerViewModel.currentDraggableProps}\n                />\n                : <></>\n            }\n          </DragDropContext>\n        </React.Fragment>\n      )\n    }}\n  </Observer>\n})\n\nexport default Planner;\n","import { action, computed, makeObservable, observable } from \"mobx\";\nimport { CourseModel } from \"../../models/CourseModel\";\nimport { TermModel } from \"../../models/TermModel\";\nimport { CourseState } from \"../../states/CourseState\";\n\nexport interface ICourseGroup {\n  id: string,\n  title: string,\n  term: TermModel | null,\n  courses: CourseModel[],\n}\n\nexport interface IYearGroup {\n  id: string,\n  year: number\n  title: string,\n  courseGroups: ICourseGroup[],\n}\n\nexport interface IPlannerState {\n  id: string,\n  title: string,\n  allocatedGroups: ICourseGroup[],\n  yearGroups: IYearGroup[],\n  completedGroup: ICourseGroup,\n  plannedGroup: ICourseGroup,\n}\n\nexport interface ICurrentDraggableProps {\n  isDragging: boolean,\n  possibleTerms: TermModel[]\n  prerequisiteCourseIds: Set<string>\n}\n\nexport class PlannerViewModel {\n  constructor(courseState: CourseState) {\n    makeObservable<PlannerViewModel,\n      \"_currentDraggableProps\"\n    >(this, {\n      _currentDraggableProps: observable,\n      currentDraggableProps: computed,\n      clearCurrentDraggableProps: action,\n    })\n\n    this._courseState = courseState\n    this._plannerState = {\n      id:\"plannerState\",\n      title: \"Visualizer\",\n      allocatedGroups: [],\n      yearGroups: [],\n      completedGroup: {\n        id: \"completed\",\n        title: \"Completed\",\n        term: null,\n        courses: [],\n      },\n      plannedGroup: {\n        id: \"planned\",\n        title: \"Planned\",\n        term: null,\n        courses: [],\n      },\n    }\n  }\n\n  private _courseState: CourseState\n  get courseState(): CourseState {\n    return this._courseState\n  }\n\n  private _plannerState: IPlannerState\n  get plannerState(): IPlannerState {\n    this.synchronizePlannerState()\n    return this._plannerState\n  }\n\n  private synchronizeCourseList(referenceCourses: CourseModel[], targetCourses: CourseModel[]): void {\n    let expectedCourses = new Set(referenceCourses)\n    let actualCourses = new Set(targetCourses)\n\n    let coursesToRemove = new Set([...actualCourses].filter(course => !expectedCourses.has(course)))\n    let coursesToAdd = new Set([...expectedCourses].filter(course => !actualCourses.has(course)))\n\n    coursesToRemove.forEach(course => {\n      let index = targetCourses.indexOf(course)\n      targetCourses.splice(index, 1)\n    })\n\n    coursesToAdd.forEach(course => {\n      targetCourses.push(course)\n    })\n  }\n\n  calculateDisplayableTerms(): TermModel[] {\n    let maxAllocatedYear = this._courseState.getMaxAllocatedYear\n    const currentYear = new Date().getFullYear()\n    let displayableTerms: TermModel[] = []\n    for (let year: number = currentYear; year <= maxAllocatedYear + 1; ++year) {\n      displayableTerms.push(new TermModel(year, \"Summer Term\"))\n      displayableTerms.push(new TermModel(year, \"Term 1\"))\n      displayableTerms.push(new TermModel(year, \"Term 2\"))\n      displayableTerms.push(new TermModel(year, \"Term 3\"))\n    }\n    return displayableTerms\n  }\n\n  synchronizePlannerState(): void {\n    const displayableTerms = this.calculateDisplayableTerms()\n    const uniqueYears = [...new Set(displayableTerms.map(term => term.year))].sort()\n    const allocatedGroups: ICourseGroup[] = displayableTerms.map((term: TermModel) => {\n      return {\n        id: term.getMappingName,\n        title: term.getFullName,\n        term: term,\n        courses: this._plannerState.allocatedGroups.find(group => group.id === term.getMappingName)?.courses ?? [],\n      }\n    })\n    let newPlannerState: IPlannerState = {\n      ...this._plannerState,\n      allocatedGroups: allocatedGroups,\n      yearGroups: uniqueYears.map((year: number) => {\n        return {\n          id: `yearGroup_${year.toString()}`,\n          title: year.toString(),\n          year: year,\n          courseGroups: allocatedGroups.filter(group => group.term?.year === year) ?? [],\n        }\n      }),\n    }\n\n    newPlannerState.allocatedGroups.forEach((courseGroup: ICourseGroup) => {\n      this.synchronizeCourseList(this._courseState.termCourseMap.get(courseGroup.id) ?? [], courseGroup.courses)\n    })\n\n    newPlannerState.yearGroups.forEach(yearGroup => {\n      yearGroup.courseGroups.forEach((courseGroup: ICourseGroup) => {\n        this.synchronizeCourseList(this._courseState.termCourseMap.get(courseGroup.id) ?? [], courseGroup.courses)\n      })\n    })\n\n    this.synchronizeCourseList(this._courseState.plannedCourses, newPlannerState.plannedGroup.courses)\n    this.synchronizeCourseList(this._courseState.completedCourses, newPlannerState.completedGroup.courses)\n    this._plannerState = newPlannerState\n  }\n\n  getCourseGroupById(groupId: string): ICourseGroup | undefined {\n    if (this._plannerState.completedGroup.id === groupId) {\n      return this._plannerState.completedGroup\n    } else if (this._plannerState.plannedGroup.id === groupId) {\n      return this._plannerState.plannedGroup\n    } else {\n      return this._plannerState.allocatedGroups.find(group => group.id === groupId)\n    }\n  }\n\n  //#region currentDraggableProps\n\n  private _currentDraggableProps: ICurrentDraggableProps = {\n    isDragging: false,\n    possibleTerms: [],\n    prerequisiteCourseIds: new Set<string>(),\n  }\n  \n  get currentDraggableProps(): ICurrentDraggableProps {\n    return {...this._currentDraggableProps}\n  }\n\n  set currentDraggableProps(props: ICurrentDraggableProps) {\n    this._currentDraggableProps = props;\n  }\n\n  clearCurrentDraggableProps(): void {\n    this.currentDraggableProps = {\n      isDragging: false,\n      possibleTerms: [],\n      prerequisiteCourseIds: new Set<string>(),\n    }\n  }\n\n  //#endregion\n\n}\n","import { ConditionalTree, isAndConditionalTree, isOrConditionalTree } from \"../interfaces/ModelInterfaces\";\n\n\nexport const conditionalTreeTraverser = (\n  treeNode: ConditionalTree,\n  fnIsLeafValid: (treeNode: ConditionalTree) => boolean,\n): string[] => {\n  let invalidations: string[] = [];\n\n  if (isOrConditionalTree(treeNode)) {\n    for (let childNode of treeNode.or) {\n      let result = conditionalTreeTraverser(childNode, fnIsLeafValid)\n      if (result.length === 0) {\n        invalidations = []\n        break\n      }\n      invalidations.push(...result)\n    }\n  } else if (isAndConditionalTree(treeNode)) {\n    treeNode.and.forEach(childNode => {\n      invalidations.push(...conditionalTreeTraverser(childNode, fnIsLeafValid))\n    })\n  } else if (!fnIsLeafValid(treeNode)) {\n    invalidations.push(treeNode)\n  }\n  // console.log(treeNode)\n  // console.log(invalidations)\n  return invalidations\n}\n","import { action, makeAutoObservable, reaction, transaction, when } from \"mobx\";\nimport { conditionalTreeTraverser } from '../helpers/ConditionalTreeTraverser';\nimport { ConditionalTree, StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { CourseModel, CourseStatus } from \"../models/CourseModel\";\nimport { SerializedCourseState, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\nimport { TermModel } from \"../models/TermModel\";\nimport { getCourseValidations } from \"../models/Validations/Validations\";\nimport { UserState } from \"./UserState\";\nimport axios from \"axios\"\n\nexport class CourseState implements ISerializableEntity {\n  constructor(\n    private _userState: UserState\n  ) {\n    makeAutoObservable(this)\n    reaction(\n      () => this._userState.studyLevel,\n      () => {\n        this._isUpdated = false;\n        this._updateStudyLevel()\n          // .then(() => {\n          //   // this.getCourseById(\"COMP1511\")?.setCompleted()\n    \n          //   this.getCourseById(\"COMP1521\")?.setPlanned()\n    \n          //   this.getCourseById(\"COMP3231\")?.setPlanned()\n          //   let COMP9444 = this.getCourseById(\"COMP9444\")\n          //   if (COMP9444) {\n          //     this.assignCourseToTerm(COMP9444, new TermModel(2021, \"Term 3\"))\n          //   }\n          //   let MATH1081 = this.getCourseById(\"MATH1081\")\n          //   if (MATH1081) {\n          //     this.assignCourseToTerm(MATH1081, new TermModel(2021, \"Term 2\"))\n          //   }\n          //   let COMP2041 = this.getCourseById(\"COMP2041\")\n          //   if (COMP2041) {\n          //     this.assignCourseToTerm(COMP2041, new TermModel(2021, \"Term 2\"))\n          //   }\n          //   let COMP9417 = this.getCourseById(\"COMP9417\")\n          //   if (COMP9417) {\n          //     this.assignCourseToTerm(COMP9417, new TermModel(2022, \"Term 3\"))\n          //   }\n          //   let MATH1231 = this.getCourseById(\"MATH1231\")\n          //   if (MATH1231) {\n          //     this.assignCourseToTerm(MATH1231, new TermModel(2021, \"Term 3\"))\n          //   }\n          // })\n      },\n      { fireImmediately: true }\n    );\n    _userState.registerStudyLevelUpdateActionCallback(() => Promise.resolve(this._updateStudyLevel()));\n  }\n\n  private validations = getCourseValidations(this)\n\n  private coursesMapById = new Map<string, CourseModel>();\n\n  private coursesMapByActiveStatus = new Map<CourseStatus, Map<string, CourseModel>>();\n\n  private _isUpdated: boolean = false;\n\n  get isUpdated(): boolean {\n    return this._isUpdated;\n  }\n\n  get allCourses() {\n    return [...this.coursesMapById.values()]\n  }\n\n  private _resetCourseMap() {\n    this.coursesMapById = new Map<string, CourseModel>();\n    this.coursesMapByActiveStatus = new Map<CourseStatus, Map<string, CourseModel>>();\n    this.coursesMapByActiveStatus.set(CourseStatus.UNPLANNED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.PLANNED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.ALLOCATED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.COMPLETED, new Map<string, CourseModel>());\n  }\n\n  private async _loadAllCourses(studyLevel: StudyLevel) {\n    return axios.get(`https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_courses.json`)\n      .then(response => {\n        transaction(() => {\n          this._resetCourseMap()\n          response.data.forEach(courseObj => {\n            let course = new CourseModel(\n              courseObj.code,\n              courseObj.contentTypeLabel,\n              courseObj.corequisites,\n              courseObj.creditPoints,\n              courseObj.description,\n              courseObj.effectiveDate,\n              courseObj.enrolmentRules,\n              courseObj.exclusion,\n              courseObj.facultyName,\n              courseObj.implementationYear,\n              courseObj.keywords,\n              courseObj.prerequisites,\n              courseObj.schoolName,\n              courseObj.studyLevel,\n              courseObj.termOffering,\n              courseObj.title,\n              courseObj.urlMap,\n            )\n\n            this.addCourse(course)\n          })\n        })\n    });\n  }\n\n  private async _updateStudyLevel() {\n    await this._loadAllCourses(this._userState.studyLevel);\n    this._isUpdated = true;\n  }\n\n  get termCourseMap(): Map<string, CourseModel[]> {\n    // console.log('running mapping')\n    let mapping = new Map<string, CourseModel[]>();\n    this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.forEach(course => {\n      if (!course.allocatedTerm) {\n        return;\n      }\n      let courseList = mapping.get(course.allocatedTerm.getMappingName)\n      if (!courseList) {\n        mapping.set(course.allocatedTerm.getMappingName, [course])\n      } else {\n        courseList.push(course)\n      }\n    })\n    return mapping\n  }\n\n  get completedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.COMPLETED)?.values() ?? []]\n  }\n\n  get plannedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.PLANNED)?.values() ?? []]\n  }\n\n  get allocatedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.values() ?? []]\n  }\n\n  get activeCourses(): CourseModel[] {\n    let allCourses: CourseModel[] = [];\n    allCourses = allCourses.concat(this.completedCourses, this.plannedCourses, this.allocatedCourses);\n    return allCourses;\n  }\n\n  get getMaxAllocatedYear(): number {\n    const uniqueTerms = [...this.termCourseMap.keys()]\n    let maxYear = new Date().getFullYear()\n    if (uniqueTerms.length > 0) {\n      maxYear = TermModel.fromMappingName(uniqueTerms.sort().slice(-1)[0]).year\n    }\n    return maxYear\n  }\n\n  getCourseById(id: string): CourseModel | undefined {\n    return this.coursesMapById.get(id)\n  }\n\n  addCourse(course: CourseModel) {\n    this.coursesMapById.set(course.id, course);\n    reaction(() => course.courseStatus, () => {\n      for (let courseStatusEnum in CourseStatus) {\n        if (!isNaN(Number(courseStatusEnum))) continue\n        const courseStatus: CourseStatus = CourseStatus[courseStatusEnum as keyof typeof CourseStatus]\n        if (courseStatus !== course.courseStatus) {\n          this.coursesMapByActiveStatus.get(courseStatus)?.delete(course.id)\n        } else {\n          this.coursesMapByActiveStatus.get(courseStatus)?.set(course.id, course)\n        }\n      }\n    }, {\n      fireImmediately: true,\n    })\n\n    reaction(() => course.courseStatus, () => {\n      this.runValidations();\n    }, {\n      fireImmediately: true,\n    })\n\n    reaction(() => course.allocatedTerm, () => {\n      this.runValidations();\n    }, {\n      fireImmediately: true,\n    })\n  }\n\n  runValidations() {\n    transaction(() => {\n      this.coursesMapByActiveStatus.get(CourseStatus.PLANNED)?.forEach(_course => {\n        _course.clearErrors()\n        this.validations.forEach(fnValidate => {\n          fnValidate(_course)\n        })\n      })\n      this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.forEach(_course => {\n        _course.clearErrors()\n        this.validations.forEach(fnValidate => {\n          fnValidate(_course)\n        })\n      })\n      this.coursesMapByActiveStatus.get(CourseStatus.COMPLETED)?.forEach(_course => {\n        _course.clearErrors()\n      })\n    })\n  }\n\n  private resetHard() {\n    [...this.coursesMapById.values()].forEach((course) => {\n      course.setUnplanned();\n    });\n  }\n\n  getFlattenedPrerequisiteList(prerequisiteTree: ConditionalTree) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      return false\n    })\n  }\n\n  getMissingPrerequisitesBeforeTerm(prerequisiteTree: ConditionalTree, term: TermModel) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      if (typeof (treeNode) === 'string') {\n        const courseCode: string = treeNode;\n        const course = this.getCourseById(courseCode)\n\n        return course\n          ? ((course.courseStatus === CourseStatus.ALLOCATED && course.allocatedTerm?.isBefore(term))\n            || course.courseStatus === CourseStatus.COMPLETED)\n          : false\n      }\n      return true\n    })\n  }\n\n  getMissingPrerequisitesPlanned(prerequisiteTree: ConditionalTree) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      if (typeof (treeNode) === 'string') {\n        const courseCode: string = treeNode;\n        const course = this.getCourseById(courseCode)\n        return course\n          ? course.courseStatus !== CourseStatus.UNPLANNED\n          : false\n      }\n      return true\n    })\n  }\n\n  courseIsOffered(term: TermModel, termOffering: string[]): boolean {\n    for (let i = 0; i < termOffering.length; i++) {\n      if (term.getTermName === termOffering[i]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getMissingRequirementsWhenAssigningCourseToTerm(course: CourseModel, term: TermModel): string[] {\n    let resp: string[] = this.getMissingPrerequisitesBeforeTerm(course.prerequisites, term)\n\n    // term = current term input, termOffering = List of avaliable terms\n    if (!this.courseIsOffered(term, course.termOffering)) {\n      resp.push(`Course is not offered in ${term.getFullName}`)\n    }\n\n    return resp\n  }\n\n  assignCourseToTerm(course: CourseModel, term: TermModel): boolean {\n    const invalidations = this.getMissingRequirementsWhenAssigningCourseToTerm(course, term)\n    if (invalidations.length === 0) {\n      course.setAllocated(term)\n      return true\n    }\n\n    return false\n  }\n\n  serialize(): SerializedCourseState {\n    return {\n      courses: this.activeCourses.map((courseModel) => {\n        return courseModel.serialize();\n      })\n    }\n  }\n\n  async deserialize(json: TermtanglesSerialized): Promise<void> {\n    if (!json.courseState) {\n      return;\n    }\n\n    const serializedCourseState = json.courseState;\n    if (!serializedCourseState.courses) {\n      return;\n    }\n\n    await when(() => { return this._isUpdated; })\n\n    this.resetHard();\n\n    serializedCourseState.courses.forEach((serializedCourse) => {\n      if (!serializedCourse.id) return;\n\n      const courseModel = this.getCourseById(serializedCourse.id);\n      if (courseModel) {\n        courseModel.deserialize(serializedCourse);\n      } else {\n        console.error(`ERROR: ${serializedCourse.id} is not a valid course.`);\n      }\n    });\n  }\n}\n","import { ErrorCode } from \"../../interfaces/ModelInterfaces\"\nimport { CourseState } from \"../../states/CourseState\"\nimport { CourseModel, CourseStatus } from \"../CourseModel\"\n\nexport const getCourseValidations = (courseState: CourseState): ((course: CourseModel) => void)[] => {\n  const validations = [\n    (course: CourseModel) => {\n      // console.log(`Running validation COURSE_NOT_OFFERED_IN_SELECTED_TERM on course ${course.code}`)\n      if (course.allocatedTerm && !course.termOffering.includes(course.allocatedTerm.getTermName)) {\n        course.addError({\n          code: ErrorCode.COURSE_NOT_OFFERED_IN_SELECTED_TERM,\n          message: `This course is not offered in ${course.allocatedTerm.getTermName}`,\n          missing: \"\"\n        })\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation PREREQUISITE_REQUIREMENT_NOT_MET on course ${course.code}`)\n      if (course.allocatedTerm) {\n        let missing = courseState.getMissingPrerequisitesBeforeTerm(course.prerequisites, course.allocatedTerm)\n        if (missing.length > 0) {\n          course.addError({\n            code: ErrorCode.PREREQUISITE_REQUIREMENT_NOT_MET,\n            message: `The prerequisites for this course are not satisfied\\n${course.enrolmentRules.join(\";\")}`,\n            missing: `Missing: ${missing}`\n          })\n        }\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation PREREQUISITES_NOT_PLANNED on course ${course.code}`)\n      if (course.courseStatus !== CourseStatus.ALLOCATED) {\n        let missing = courseState.getMissingPrerequisitesPlanned(course.prerequisites)\n        if (missing.length > 0) {\n          course.addError({\n            code: ErrorCode.PREREQUISITES_NOT_PLANNED,\n            message: `A valid combination of prerequisites for this course have not been planned\\n${course.enrolmentRules.join(\";\")}`,\n            missing: `Missing: ${missing}`\n          })\n        }\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation EXCLUSION_COURSE_CONFLICT on course ${course.code}`)\n      let conflictingExclusionCourses: string[] = []\n      course.exclusion.forEach((exclusionCourseCode) => {\n        let exclusionCourse = courseState.getCourseById(exclusionCourseCode)\n        if (exclusionCourse && exclusionCourse.courseStatus !== CourseStatus.UNPLANNED) {\n          conflictingExclusionCourses.push(exclusionCourseCode)\n        }\n      })\n      if (conflictingExclusionCourses.length > 0) {\n        course.addError({\n          code: ErrorCode.EXCLUSION_COURSE_CONFLICT,\n          message: `The following exclusion courses conflict with this course ${conflictingExclusionCourses.join(\", \")}`,\n          missing: \"\"\n        })\n      }\n    }\n  ]\n  return validations\n}\n","import { ICurriculumContainer, ICurriculumElement } from \"../interfaces/ModelInterfaces\";\nimport {v4 as uuidv4} from 'uuid';\n\nexport class CurriculumContainer implements ICurriculumContainer {\n    public readonly id: string = uuidv4();\n    constructor(\n        public readonly title: string,\n        public readonly description: string,\n        public readonly creditPoints: number,\n        public readonly elements: ICurriculumElement[],\n        public readonly containers: ICurriculumContainer[],\n        public readonly order: number,\n    ) {\n    }\n\n    toString() {\n        return this.title + ', ' + this.description;\n    }\n}\n\nexport class CurriculumElement implements ICurriculumElement {\n    constructor(\n        public readonly name: string,\n        public readonly description: string,\n        public readonly type: string,\n        public readonly creditPoints: number,\n        public readonly itemCode: string,\n        public readonly url: string,\n        public readonly order: number,\n    ) { }\n\n    public isCourse(): boolean {\n        return this.type.toLowerCase() === \"course\"\n    }\n\n    public isSpecialisation(): boolean {\n        return [\"major\", \"minor\", \"specialisation\", \"honours\"].includes(this.type.toLowerCase())\n    }\n\n    toString() {\n        return this.name + ', ' + this.type;\n    }\n}\n\n// Arg: Array of json data where each json contains data for Children Obj\nexport const parseCurriculumContainers = (childrenData: Array<any>): Array<CurriculumContainer> => {\n    let rootContainerList: CurriculumContainer[] = [];\n    \n    childrenData.forEach((data) => {\n        let childContainerList: CurriculumContainer[] = [];\n        let elementList: CurriculumElement[] = [];\n        // If nested children containers exist, recursively transform jsonData \n        // into Children obj\n        if (data.children.length > 0) {\n            childContainerList = parseCurriculumContainers(data.children);\n        }\n\n        if (data.relationships.length > 0) {\n            elementList = parseCurriculumElements(data.relationships);\n        }\n\n        let container = new CurriculumContainer(\n            data.title,\n            data.description,\n            Number(data.creditPoints),\n            elementList,\n            childContainerList,\n            Number(data.order)\n        );\n\n        rootContainerList.push(container);\n    })\n\n    return rootContainerList;\n}\n\n// Arg: Array of json data where each json contains data for Relationship obj\nexport const parseCurriculumElements = (relationData: Array<any>): Array<CurriculumElement> => {\n    let relationshipList: CurriculumElement[] = [];\n\n    relationData.forEach((data) => {\n        let relationshipObj = new CurriculumElement(\n            data.name,\n            data.description,\n            data.type,\n            Number(data.creditPoints),\n            data.itemCode,\n            data.url,\n            Number(data.order)\n        )\n\n        relationshipList.push(relationshipObj);\n    })\n\n    return relationshipList;\n}\n","import { makeAutoObservable } from 'mobx';\nimport { ICurriculumContainer, IProgram, IProgressionEntity, ProgressionStatus } from '../interfaces/ModelInterfaces';\nimport { SerializedProgram, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\n\nexport class ProgramModel implements IProgram, IProgressionEntity, ISerializableEntity {\n  public readonly id: string\n  public progressionStatus: ProgressionStatus = ProgressionStatus.UNPLANNED\n\n  constructor(\n    public readonly code: string,\n    public readonly title: string,\n    public readonly academicItemType: string,\n    public readonly additionalInfo: string,\n    public readonly creditPoints: number,\n    public readonly structureSummary: string,\n    public readonly curriculumStructure: Array<ICurriculumContainer>,\n    public readonly description: string,\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly intakePeriod: Array<string>,\n    public readonly programConstraints: Array<any>,\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code\n    makeAutoObservable(this)\n  }\n\n  setPlanned() {\n    this.progressionStatus = ProgressionStatus.PLANNED\n  }\n\n  setUnplanned() {\n    this.progressionStatus = ProgressionStatus.UNPLANNED\n  }\n\n  serialize(): SerializedProgram {\n    return {\n      id: this.code,\n    };\n  }\n\n  async deserialize(program: SerializedProgram): Promise<void> {\n    if (program.id !== this.id) {\n      console.error(`ERROR: This program is not ${program.id} (is: ${this.id})`);\n      return;\n    }\n    \n    this.setPlanned();\n  }\n\n  toString() {\n    return `[PROGRAM_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadProgramByCode(programCode: string) {\n//     return db.collection(\"programs\")\n//         .doc(programCode)!\n//         .withConverter(programConverter)\n//         .get().then((doc) => {\n//             if (doc.exists) {\n//                 var program = doc.data()!;\n\n//                 return program;\n//             } else {\n//                 console.log(\"No such document!\");\n//             }\n//         }).catch((error) => {\n//             console.log(\"Error getting document:\", error);\n//             throw new Error();\n//         });\n// }\n\n// let programConverter = {\n//     toFirestore: function (program) {\n//         return {\n//             name: program.code,\n//         };\n//     },\n//     fromFirestore: function (snapshot, options) {\n//         const data = snapshot.data(options);\n\n//         return new ProgramModel(\n//             data.academicItemType,\n//             data.additionalInformation,\n//             data.code,\n//             Number(data.creditPoints),\n//             parseCurriculumContainers(data.curriculumStructure),\n//             data.description,\n//             data.facultyName,\n//             Number(data.implementationYear),\n//             data.intakePeriod,\n//             data.programConstraints,\n//             data.schoolName,\n//             data.studyLevel,\n//             data.title,\n//             data.urlMap\n//         );\n//     }\n// };","import { makeAutoObservable } from 'mobx';\nimport { ICurriculumContainer, IProgressionEntity, ISpecialisation, ProgressionStatus } from '../interfaces/ModelInterfaces';\nimport { SerializedSpecialisation, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\n\nexport class SpecialisationModel implements ISpecialisation, IProgressionEntity, ISerializableEntity {\n  public readonly id: string\n  public progressionStatus: ProgressionStatus = ProgressionStatus.UNPLANNED\n\n  constructor(\n    public readonly code: string,\n    public readonly title: string,\n    public readonly academicItemType: string,\n    public readonly creditPoints: number,\n    public readonly structureSummary: string,\n    public readonly curriculumStructure: Array<ICurriculumContainer>,\n    public readonly description: string,\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly keywords: string[],\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code\n    makeAutoObservable(this)\n  }\n\n  setPlanned() {\n    this.progressionStatus = ProgressionStatus.PLANNED\n  }\n\n  setUnplanned() {\n    this.progressionStatus = ProgressionStatus.UNPLANNED\n  }\n\n  serialize(): SerializedSpecialisation {\n    return {\n      id: this.code,\n    };\n  }\n\n  async deserialize(specialisation: SerializedSpecialisation) {\n    if (specialisation.id !== this.id) {\n      console.error(`ERROR: This specialisation is not ${specialisation.id} (is: ${this.id})`);\n      return;\n    }\n\n    this.setPlanned();   \n  }\n\n  toString() {\n    return `[SPECIALISATION_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadSpecialisationByCode(specialisationCode: string) {\n//     return db.collection(\"specialisations\")\n//         .doc(specialisationCode)!\n//         .withConverter(specialisationConverter)\n//         .get().then((doc) => {\n//             if (doc.exists) {\n//                 var specialisation = doc.data()!;\n\n//                 return specialisation;\n//             } else {\n//                 console.log(\"No such document!\");\n//             }\n//         }).catch((error) => {\n//             console.log(\"Error getting document:\", error);\n//             throw new Error();\n//         });\n// }\n\n// let specialisationConverter = {\n//     toFirestore: function (specialisation) {\n//         return {\n//             name: specialisation.code,\n//         };\n//     },\n//     fromFirestore: function (snapshot, options) {\n//         const data = snapshot.data(options);\n\n//         return new SpecialisationModel(\n//             data.academicItemType,\n//             data.code,\n//             Number(data.creditPoints),\n//             parseCurriculumContainers(data.curriculumStructure),\n//             data.description,\n//             data.facultyName,\n//             Number(data.implementationYear),\n//             data.keywords,\n//             data.schoolName,\n//             data.studyLevel,\n//             data.title,\n//             data.urlMap,\n//         );\n//     }\n// };","import { action, makeAutoObservable, reaction, transaction, when } from \"mobx\";\nimport { IProgressionEntity, ProgressionStatus, StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { SerializedProgressionState, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\nimport { parseCurriculumContainers } from \"../models/CurriculumModel\";\nimport { ProgramModel } from \"../models/ProgramModel\";\nimport { SpecialisationModel } from \"../models/SpecialisationModel\";\nimport { UserState } from \"./UserState\";\nimport axios from \"axios\"\n\nexport class ProgressionState implements ISerializableEntity {\n  constructor(\n    userState: UserState\n  ) {\n    makeAutoObservable(this)\n    this._userState = userState\n    reaction(\n      () => this._userState.studyLevel,\n      () => {\n        this._isUpdated = false;\n        this._updateStudyLevel()\n      },\n      { fireImmediately: true }\n    )\n    userState.registerStudyLevelUpdateActionCallback(() => Promise.resolve(this._updateStudyLevel()));\n  }\n\n  private _userState: UserState\n  private _programMapById = new Map<string, ProgramModel>();\n  private _specialisationMapById = new Map<string, SpecialisationModel>();\n  private _isUpdated: boolean = false;\n\n  get isUpdated(): boolean {\n    return this._isUpdated;\n  }\n\n  private _updateStudyLevel = async () => {\n    await this.loadAllPrograms(this._userState.studyLevel);\n    await this.loadAllSpecialisations(this._userState.studyLevel);\n    this._isUpdated = true;\n  };\n\n  get allPrograms() {\n    return [...this._programMapById.values()]\n  }\n\n  get allSpecialisations() {\n    return [...this._specialisationMapById.values()]\n  }\n\n  getProgramById(id: string) {\n    return this._programMapById.get(id)\n  }\n\n  getSpecialisationById(id: string) {\n    return this._specialisationMapById.get(id)\n  }\n\n  get plannedPrograms(): ProgramModel[] {\n    return this.allPrograms.filter(program => program.progressionStatus === ProgressionStatus.PLANNED)\n  }\n\n  get plannedSpecialisations(): SpecialisationModel[] {\n    return this.allSpecialisations.filter(specialisation => specialisation.progressionStatus === ProgressionStatus.PLANNED)\n  }\n\n  get plannedProgressionEntities(): IProgressionEntity[] {\n    let result: IProgressionEntity[] = this.plannedPrograms\n    result = result.concat(this.plannedSpecialisations)\n    return result\n  }\n\n  private resetHard(): void {\n    this._programMapById.forEach((program) => {\n      program.setUnplanned();\n    });\n    this._specialisationMapById.forEach((specialisation) => {\n      specialisation.setUnplanned();\n    });\n  }\n\n  addProgram(program: ProgramModel) {\n    this._programMapById.set(program.id, program)\n  }\n  addSpecialisation(specialisation: SpecialisationModel) {\n    this._specialisationMapById.set(specialisation.id, specialisation)\n  }\n\n  serialize(): SerializedProgressionState {\n    return {\n      programs: this.plannedPrograms.map((programModel) => {\n        return programModel.serialize();\n      }),\n      specialisations: this.plannedSpecialisations.map((specialisationModel) => {\n        return specialisationModel.serialize();\n      }),\n    }\n  }\n\n  async deserialize(json: TermtanglesSerialized) {\n    if (!json.progressionState) {\n      return;\n    }\n\n    await when(() => { return this._isUpdated; });\n\n    this.resetHard();\n    const serializedProgressionState = json.progressionState;\n    if (serializedProgressionState.programs) {\n      serializedProgressionState.programs.forEach((serializedProgram) => {\n        if (!serializedProgram.id) return;\n\n        const programModel = this.getProgramById(serializedProgram.id);\n        if (programModel) {\n          programModel.deserialize(serializedProgram);\n        } else {\n          console.error(`ERROR: ${serializedProgram.id} is not a valid program.`);\n        }\n      });\n    }\n    if (serializedProgressionState.specialisations) {\n      serializedProgressionState.specialisations.forEach((serializedSpecialisation) => {\n        if (!serializedSpecialisation.id) return;\n\n        const specialisationModel = this.getSpecialisationById(serializedSpecialisation.id);\n        if (specialisationModel) {\n          specialisationModel.deserialize(serializedSpecialisation);\n        } else {\n          console.error(`ERROR: ${serializedSpecialisation.id} is not a valid specialisation.`);\n        }\n      });\n    }\n  }\n\n  private loadAllPrograms = action((studyLevel: StudyLevel) => {\n    return axios.get(`https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_programs.json`)\n    .then(response => {\n      transaction(() => {\n        this._programMapById.clear()\n        response.data.forEach(programObj => {\n          let program = new ProgramModel(\n            programObj.code,\n            programObj.title,\n            programObj.academicItemType,\n            programObj.additionalInfo,\n            programObj.creditPoints,\n            programObj.structureSummary,\n            parseCurriculumContainers(programObj.curriculumStructure),\n            programObj.description,\n            programObj.facultyName,\n            programObj.implementationYear,\n            programObj.intakePeriod,\n            programObj.programConstraints,\n            programObj.schoolName,\n            programObj.studyLevel,\n            programObj.urlMap\n          )\n\n          this.addProgram(program);\n        })\n      })\n    })\n  })\n\n  private loadAllSpecialisations = action((studyLevel: StudyLevel) => {\n    return axios.get(`https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_specialisations.json`)\n      .then(response => {\n        transaction(() => {\n          this._specialisationMapById.clear()\n          response.data.forEach(specialisationObj => {\n            let specialisation = new SpecialisationModel(\n              specialisationObj.code,\n              specialisationObj.title,\n              specialisationObj.academicItemType,\n              specialisationObj.creditPoints,\n              specialisationObj.structureSummary,\n              parseCurriculumContainers(specialisationObj.curriculumStructure),\n              specialisationObj.description,\n              specialisationObj.facultyName,\n              specialisationObj.implementationYear,\n              specialisationObj.keywords,\n              specialisationObj.schoolName,\n              specialisationObj.studyLevel,\n              specialisationObj.urlMap,\n            )\n\n            this.addSpecialisation(specialisation);\n          })\n        })\n    })\n  });\n}\n\n","import { CourseModel } from '../models/CourseModel';\r\nimport { ProgramModel } from '../models/ProgramModel';\r\nimport { SpecialisationModel } from '../models/SpecialisationModel';\r\nimport { CourseState } from './CourseState';\r\nimport { ProgressionState } from './ProgressionState';\r\n\r\n\r\nexport class SearchDataState {\r\n  constructor(\r\n    private _courseState: CourseState,\r\n    private _progressionState: ProgressionState,\r\n  ) {}\r\n\r\n  get courseSearchData(): CourseModel[] {\r\n    return this._courseState.allCourses.sort((a, b) => (a.code > b.code) ? 1 : -1)\r\n  }\r\n  get programSearchData(): ProgramModel[] {\r\n    return this._progressionState.allPrograms.sort((a, b) => (a.title > b.title) ? 1 : -1)\r\n  }\r\n  get specialisationSearchData(): SpecialisationModel[] {\r\n    return this._progressionState.allSpecialisations.sort((a, b) => (a.title > b.title) ? 1 : -1)\r\n  }\r\n}\r\n","import { makeAutoObservable, when } from \"mobx\";\nimport { StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { SerializedUserState, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\n\nconst stringToStudyLevelMap = ((str: string) => {\n  switch(str) {\n    case \"undergraduate\": return StudyLevel.UNDERGRADUATE;\n    case \"postgraduate\": return StudyLevel.POSTGRADUATE;\n    case \"research\": return StudyLevel.RESEARCH;\n    default: return undefined;\n  }\n});\n\nexport class UserState implements ISerializableEntity {\n  constructor() {\n    makeAutoObservable(this)\n  }\n\n  private _studyLevel: StudyLevel = StudyLevel.UNDERGRADUATE\n  private _isUpdated: boolean = true;\n  private _studyLevelUpdateActionCallbacks: (() => Promise<void>)[] = [];\n\n  get studyLevel() {\n    return this._studyLevel\n  }\n\n  async setStudyLevel (studyLevel: StudyLevel) {\n    if (this._studyLevel !== studyLevel) {\n      this._studyLevel = studyLevel;\n      const studyLevelPromises: Promise<void>[] = this._studyLevelUpdateActionCallbacks.map(callback => callback());\n      return Promise.all(studyLevelPromises);\n    }\n  }\n\n  set isUpdated(isUpdated: boolean) {\n    this._isUpdated = isUpdated;\n  }\n  \n  get isUpdated(): boolean {\n    return this._isUpdated;\n  }\n\n  registerStudyLevelUpdateActionCallback(updateAction: () => Promise<void>) {\n    this._studyLevelUpdateActionCallbacks.push(updateAction);\n  }\n\n  serialize(): SerializedUserState {\n    return {studyLevel: this._studyLevel};\n  }\n\n  async deserialize(json: TermtanglesSerialized): Promise<void> {\n    if (!json.userState) {\n      throw \"ERROR: User state not included.\";\n    }\n\n    const serializedUserState = json.userState;\n    if (!serializedUserState.studyLevel) {\n      throw `ERROR: User state must include a studyLevel parameter.`;\n    }\n\n    const level = stringToStudyLevelMap(serializedUserState.studyLevel);\n    if (!level) {\n      throw `ERROR: ${serializedUserState.studyLevel} is not a valid study level.`\n    }\n\n    await this.setStudyLevel(level);\n  }\n}\n","import { createContext } from 'react'\nimport { CourseState } from '../states/CourseState'\nimport { ProgressionState } from '../states/ProgressionState';\nimport { SearchDataState } from '../states/SearchDataState';\nimport { UserState } from '../states/UserState';\n\nconst userState = new UserState();\nconst courseState = new CourseState(userState);\nconst progressionState = new ProgressionState(userState);\nconst searchDataState = new SearchDataState(courseState, progressionState);\n\nexport const ApplicationContext = createContext({\n    userState,\n    courseState,\n    progressionState,\n    searchDataState,\n})\n","import { Observer, observer } from \"mobx-react\";\nimport { ApplicationContext } from \"../../../contexts/ApplicationContext\";\nimport { CurriculumElement } from \"../../../models/CurriculumModel\";\nimport React, { useContext } from \"react\";\nimport { CourseResultView } from \"../../SearchPanel/Results/CourseResultView\";\nimport { SpecialisationResultView } from \"../../SearchPanel/Results/SpecialisationResultView\";\nimport { ResultCollection } from \"../../SearchPanel/SearchPanelStyles\";\n\nexport interface ICurriculumElementViewProps {\n  entityId: string,\n  curriculumElements: CurriculumElement[]\n}\n\nexport const CurriculumElementsView = observer((props: ICurriculumElementViewProps) => {\n  const applicationContext = useContext(ApplicationContext);\n  return <Observer>\n    {\n      () => {\n        return props.curriculumElements.length > 0\n          ? <ResultCollection divided>\n            {\n              props.curriculumElements\n                .sort((a, b) => Number(a.order) - Number(b.order))\n                .map(element => {\n                  if (element.isCourse()) {\n                    let course = applicationContext.courseState.getCourseById(element.itemCode)\n                    return course ? <CourseResultView course={course} /> : <></>\n                  } else if (element.isSpecialisation()) {\n                    let specialisation = applicationContext.progressionState.getSpecialisationById(element.itemCode)\n                    return specialisation ? <SpecialisationResultView specialisation={specialisation} /> : <></>\n                  }\n                  return <p>{element.description}</p>\n                })\n            }\n          </ResultCollection>\n          : <></>\n      }\n    }\n  </Observer>\n});\n","import parse from 'html-react-parser';\nimport { Observer, observer } from \"mobx-react\";\nimport React from \"react\";\nimport sanitizeHtml from 'sanitize-html';\nimport { Accordion, Icon, Label } from \"semantic-ui-react\";\nimport styled from 'styled-components';\nimport { CurriculumContainer } from \"../../../models/CurriculumModel\";\nimport { ProgressionPlannerViewModel } from \"../ProgressionPlannerViewModel\";\nimport { CurriculumElementsView } from \"./CurriculumElementsView\";\n\nexport interface ICurriculumContainerViewProps {\n  entityId: string\n  curriculumContainer: CurriculumContainer[]\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n}\n\nexport const CurriculumAccordionCreditPoints = styled(Label)`\n  &&& {\n    margin-left:auto\n    \n  }\n`\n\nexport const CurriculumAccordionTitle = styled(Accordion.Title)`\n  &&& {\n    display:flex;\n  }\n`\nexport const CurriculumDescriptionDiv = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nexport const CurriculumExpandCollapseLink = styled.a`\n  min-width: 80px;\n  text-align: right;\n`\n\nexport const CurriculumContent = styled.div`\n  margin-left:10px;\n`\n\nexport const CurriculumContainerView = observer((props: ICurriculumContainerViewProps) => {\n  const getCreditPointsView = (container: CurriculumContainer) => {\n    const uocOfChildren = props.progressionPlannerViewModel.calculateUocOfChildren(container)\n    if (container.creditPoints > 0) {\n      return <CurriculumAccordionCreditPoints\n        size=\"small\"\n        color={uocOfChildren === container.creditPoints\n          ? \"green\"\n          : uocOfChildren < container.creditPoints\n            ? \"orange\"\n            : \"yellow\"\n        }\n      >\n        {uocOfChildren} / {container.creditPoints} UOC\n      </CurriculumAccordionCreditPoints>\n    } else if (uocOfChildren > 0) {\n      return <CurriculumAccordionCreditPoints\n        size=\"small\"\n        color=\"green\"\n      >\n        {uocOfChildren} UOC\n      </CurriculumAccordionCreditPoints>\n    }\n  }\n\n  return <Observer>\n    {\n      () => {\n        return props.curriculumContainer.length > 0\n          ? <Accordion.Accordion\n            key={props.entityId}\n            exclusive={false}\n            panels={[...props.curriculumContainer]\n              .sort((a, b) => Number(a.order) - Number(b.order))\n              .map(container => {\n                return {\n                  key: container.id,\n                  title: <CurriculumAccordionTitle>\n                    <Icon className={\n                      props.progressionPlannerViewModel.isContainerActive(container.id)\n                      ? \"caret down\"\n                      : \"caret right\"\n                    }/>\n                    {container.title}\n                    {getCreditPointsView(container)}\n                  </CurriculumAccordionTitle>,\n                  content: {\n                    content: <div>\n                      <CurriculumContent>\n                      <CurriculumDescriptionDiv>\n                        <span>{parse(sanitizeHtml(container.description))}</span>\n                        {\n                          container.containers.length > 0\n                            ? <CurriculumExpandCollapseLink\n                              href=\"#\"\n                              onClick={() => props.progressionPlannerViewModel.toggleAllContainers(container)}\n                            >\n                              {\n                                props.progressionPlannerViewModel.isAnySubContainerActive(container)\n                                  ? \"Collapse All\"\n                                  : \"Expand All\"\n                              }\n                            </CurriculumExpandCollapseLink>\n                            : <></>\n                        }\n                      </CurriculumDescriptionDiv>\n                      <CurriculumElementsView entityId={props.entityId} curriculumElements={container.elements} />\n                      </CurriculumContent>\n                      <CurriculumContainerView\n                        entityId={props.entityId}\n                        curriculumContainer={container.containers}\n                        progressionPlannerViewModel={props.progressionPlannerViewModel}\n                      />\n                    </div>\n                  },\n                  active: props.progressionPlannerViewModel.isContainerActive(container.id),\n                  onTitleClick: () => { props.progressionPlannerViewModel.toggleContainer(container.id) }\n                }\n              })}\n          />\n          : <></>\n      }\n    }\n  </Observer>\n});\n","import { Observer, observer } from 'mobx-react';\nimport React from 'react';\nimport { Accordion } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport { IProgressionEntity } from '../../interfaces/ModelInterfaces';\nimport { CurriculumContainerView } from './CurriculumView/CurriculumContainerView';\nimport { ProgressionPlannerViewModel } from './ProgressionPlannerViewModel';\nimport parse from 'html-react-parser';\nimport sanitizeHtml from 'sanitize-html';\n\nexport interface IProgressionEntityViewProps {\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n  entity: IProgressionEntity\n}\n\nconst ProgressionEntityTitle = styled.a`\ncolor: black;\nbackground-color: transparent;\ntext-decoration: none;\n\n&:hover {\n  color: #db2828;\n  background-color: transparent;\n  text-decoration: line-through;\n}\n`\n\nconst ProgressionEntityView = observer((props: IProgressionEntityViewProps) => {\n  return <Observer>\n    {() => {\n      return <>\n        <h2>\n          <ProgressionEntityTitle\n            href=\"#\"\n            onClick={() => props.entity.setUnplanned()}\n          >{props.entity.title}</ProgressionEntityTitle>\n        </h2>\n        <span>{parse(sanitizeHtml(props.entity.structureSummary))}</span>\n        <Accordion fluid styled>\n          <CurriculumContainerView\n            entityId={props.entity.id}\n            curriculumContainer={props.entity.curriculumStructure}\n            progressionPlannerViewModel={props.progressionPlannerViewModel}\n          />\n        </Accordion>\n      </>\n    }}\n  </Observer>\n})\n\nexport default ProgressionEntityView;\n","import { Observer, observer } from 'mobx-react';\nimport React from 'react';\nimport { Container } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport ProgressionEntityView from './ProgressionEntityView';\nimport { ProgressionPlannerViewModel } from './ProgressionPlannerViewModel';\n\nexport const ProgressionContainer = styled(Container)`\n  margin:1em 0;\n`\n\nexport interface IProgressionPlannerProps {\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n}\n\nconst ProgresionPlanner = observer(({ progressionPlannerViewModel }: IProgressionPlannerProps) => {\n  return <Observer>\n    {() => {\n      return (\n        <React.Fragment>\n          <ProgressionContainer>\n            {\n              progressionPlannerViewModel\n                .progressionState\n                .plannedProgressionEntities\n                .map(entity => {\n                  return <ProgressionEntityView\n                    entity={entity}\n                    progressionPlannerViewModel={progressionPlannerViewModel}\n                  />\n                })\n            }\n          </ProgressionContainer>\n        </React.Fragment>\n      )\n    }}\n  </Observer>\n})\n\nexport default ProgresionPlanner;\n","import { makeObservable, observable } from \"mobx\";\nimport { ProgressionStatus } from \"../../interfaces/ModelInterfaces\";\nimport { CourseStatus } from \"../../models/CourseModel\";\nimport { CurriculumContainer } from \"../../models/CurriculumModel\";\nimport { ProgramModel } from \"../../models/ProgramModel\";\nimport { SpecialisationModel } from \"../../models/SpecialisationModel\";\nimport { CourseState } from \"../../states/CourseState\";\nimport { ProgressionState } from \"../../states/ProgressionState\";\n\nexport interface IProgressionPlannerState {\n  id: string,\n  title: string,\n  programs: ProgramModel[],\n  specialisations: SpecialisationModel[],\n}\n\nexport class ProgressionPlannerViewModel {\n  private _progressionState: ProgressionState\n  private _courseState: CourseState\n  private _progressionPlannerState: IProgressionPlannerState\n  private _displayableContainerPanels: Set<string> = new Set<string>()\n\n  constructor(\n    progressionState: ProgressionState,\n    courseState: CourseState,\n  ) {\n    makeObservable<ProgressionPlannerViewModel,\n      \"_displayableContainerPanels\"\n    >(this, {\n      _displayableContainerPanels: observable,\n    })\n\n    this._progressionState = progressionState\n    this._progressionPlannerState = {\n      id: \"progressionPlanner\",\n      title: \"Progression Planner\",\n      programs: [],\n      specialisations: [],\n    }\n    this._courseState = courseState\n  }\n\n  get progressionState() {\n    return this._progressionState;\n  }\n\n  get progressionPlannerState() {\n    return this._progressionPlannerState;\n  }\n\n  calculateUocOfChildren(curriculumContainer: CurriculumContainer): number {\n    return [...this.getUniqueUocOfCurriculumContainer(curriculumContainer).values()].reduce((a, b) => a + b, 0)\n  }\n\n  getUniqueUocOfCurriculumContainer(curriculumContainer: CurriculumContainer): Map<string, number> {\n    let allChildren = new Map<string, number>()\n    curriculumContainer.elements.forEach(element => {\n      if (element.isCourse()) {\n        let course = this._courseState.getCourseById(element.itemCode)\n        if (course && course.courseStatus !== CourseStatus.UNPLANNED) {\n          allChildren.set(element.itemCode, element.creditPoints)\n        }\n      } else if (element.isSpecialisation()) {\n        let specialisation = this.progressionState.getSpecialisationById(element.itemCode)\n        if (specialisation && specialisation.progressionStatus !== ProgressionStatus.UNPLANNED) {\n          allChildren.set(element.itemCode, element.creditPoints)\n        }\n      }\n    })\n    curriculumContainer.containers.forEach(container => {\n      let childResult = this.getUniqueUocOfCurriculumContainer(container)\n      childResult.forEach((value, key) => allChildren.set(key, value))\n    })\n    return allChildren\n  }\n\n  toggleContainer(containerId: string) {\n    if (this._displayableContainerPanels.has(containerId)) {\n      this._displayableContainerPanels.delete(containerId)\n    } else {\n      this._displayableContainerPanels.add(containerId)\n    }\n  }\n\n  isAnySubContainerActive(rootContainer: CurriculumContainer): boolean {\n    return rootContainer.containers.filter(container => {\n      return this._displayableContainerPanels.has(container.id)\n        || this.isAnySubContainerActive(container)\n    }).length > 0\n  }\n\n  toggleAllContainers(rootContainer: CurriculumContainer) {\n    if (this.isAnySubContainerActive(rootContainer)) {\n      rootContainer.containers.forEach(container => {\n        this.setAllContainersInactive(container)\n      })\n    } else {\n      rootContainer.containers.forEach(container => {\n        this.setAllContainersActive(container)\n      })\n    }\n  }\n\n  private setAllContainersActive(rootContainer: CurriculumContainer) {\n    rootContainer.containers.forEach(container => {\n      this.setAllContainersActive(container)\n    })\n    this._displayableContainerPanels.add(rootContainer.id)\n  }\n\n  private setAllContainersInactive(rootContainer: CurriculumContainer) {\n    rootContainer.containers.forEach(container => {\n      this.setAllContainersInactive(container)\n    })\n    this._displayableContainerPanels.delete(rootContainer.id)\n  }\n\n  isContainerActive(containerId: string): boolean {\n    return this._displayableContainerPanels.has(containerId)\n  }\n}\n","import styled from \"styled-components\"\nimport { AutoPlannerViewModel } from \"./AutoPlannerModel\"\n\nconst AutoPlanButton = styled.button`\n  background-color: forestgreen;\n  border: none;\n  border-radius: 4px;\n  color: white;\n  padding: 15px 32px;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin: 4px 2px;\n  cursor: pointer;\n  width: 100%;\n`\nconst AutoPlanner = ({ autoPlannerViewModel }: { [key: string]: AutoPlannerViewModel }) => {\n  return (\n    <AutoPlanButton onClick={() => autoPlannerViewModel.autoPlan()}>\n      Auto Plan Degree\n    </AutoPlanButton>\n  )\n};\n\nexport default AutoPlanner;","import { CourseState } from \"../../states/CourseState\";\r\nimport { CourseModel } from \"../../models/CourseModel\";\r\nimport { TermModel } from \"../../models/TermModel\";\r\n\r\nexport class AutoPlannerViewModel {\r\n    private courseState: CourseState;\r\n  \r\n    constructor(courseState: CourseState) {\r\n        this.courseState = courseState;\r\n    }\r\n\r\n    get autoPlanCourseState(): CourseState {\r\n        return this.courseState;\r\n    }\r\n\r\n    autoPlan() {\r\n        let canAllocateCourses: boolean = true;\r\n        let listYearsToTryAllocate: number[] = this.getYearsToTryAllocate(this.courseState.getMaxAllocatedYear);\r\n        let listTermsToTryAllocate: string[] = [\"Term 1\", \"Term 2\", \"Term 3\"]\r\n\r\n        while (canAllocateCourses === true) {\r\n            let coursesToBeAllocated: CourseModel[] = this.courseState.plannedCourses;\r\n            let nCoursesToAllocate: number = coursesToBeAllocated.length;\r\n            let hasChanged = false;\r\n\r\n            // Try for each year, term; if allocation spot is free & pre-req is met, add course to term\r\n            for (var counter = 0; counter < coursesToBeAllocated.length; counter++) {\r\n                let termAllocatedFlag = false;\r\n                for (let i = 0; i < listYearsToTryAllocate.length; i++) {\r\n                    if (termAllocatedFlag === false) {\r\n                        for (let j = 0; j < listTermsToTryAllocate.length; j++) {\r\n                            let canAssignToTerm : string[] | boolean = this.courseState.getMissingRequirementsWhenAssigningCourseToTerm(coursesToBeAllocated[counter], new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]));\r\n                            let termHasSpaceToAllocate : boolean = this.termHasLessThanThreeCourses(listYearsToTryAllocate[i], listTermsToTryAllocate[j], this.courseState.termCourseMap);\r\n                            let termIsDisabled: boolean = new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]).isBefore(new TermModel(2021, \"Term 2\"))\r\n                            if (canAssignToTerm.length === 0) {\r\n                                canAssignToTerm = true;\r\n                            } else {\r\n                                canAssignToTerm = false;\r\n                            }\r\n\r\n                            if (!termIsDisabled && termHasSpaceToAllocate && canAssignToTerm) {\r\n                                this.courseState.assignCourseToTerm(coursesToBeAllocated[counter], new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]));\r\n                                termAllocatedFlag = true;\r\n                                hasChanged = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Terminating condition\r\n            // If there are no changes, this means that there are no more courses that can be allocated\r\n            // and hence terminate allocation attempt\r\n            if (hasChanged === false) {\r\n                canAllocateCourses = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    termHasLessThanThreeCourses(year: number, term: string, allocatedCourses: Map<string, CourseModel[]>) : boolean {\r\n        let dictKey = year + \"_\" + term;\r\n\r\n        if (allocatedCourses.has(dictKey)) {\r\n            // A term already has 3 courses, can't allocate\r\n            if (allocatedCourses.get(dictKey)!.length >= 3) {\r\n                return false;\r\n            }\r\n\r\n            // Term exists in allocatedTerm array, but has less than 3 courses, can allocate\r\n            return true;\r\n        } else {\r\n            // Term has not been allocated, can allocate\r\n            return true;\r\n        }\r\n    }\r\n\r\n    getYearsToTryAllocate(maxYear: number) {\r\n        var list: number[] = [];\r\n\r\n        // Return list of years with excess, incase all previous terms are full\r\n        for (var i = 2021; i <= maxYear + 4; i++) {\r\n            list.push(i);\r\n        }\r\n\r\n        return list;\r\n    }\r\n}","import \"fomantic-ui-css/semantic.min.css\";\nimport { Observer } from 'mobx-react-lite';\nimport React, { useContext } from 'react';\nimport SplitPane from 'react-split-pane';\nimport 'semantic-ui-react';\nimport { Container } from 'semantic-ui-react';\nimport './App.css';\nimport LocalImportExport from \"./containers/LocalImportExport/LocalImportExport\"\nimport { LocalImportExportViewModel } from './containers/LocalImportExport/LocalImportExportViewModel';\nimport { MenuBar } from './containers/MenuBar/MenuBar';\nimport Planner from './containers/Planner/Planner';\nimport { PlannerViewModel } from './containers/Planner/PlannerViewModel';\nimport ProgressionPlanner from './containers/ProgressionPlanner/ProgressionPlanner';\nimport { ProgressionPlannerViewModel } from './containers/ProgressionPlanner/ProgressionPlannerViewModel';\nimport SearchPanel from './containers/SearchPanel/SearchPanel';\nimport { SearchPanelViewModel } from './containers/SearchPanel/SearchPanelViewModel';\nimport { ApplicationContext } from './contexts/ApplicationContext';\nimport AutoPlanner from './containers/AutoPlan/AutoPlannerView';\nimport { AutoPlannerViewModel } from \"./containers/AutoPlan/AutoPlannerModel\";\n\nconst App = () => {\n  const applicationContext = useContext(ApplicationContext)\n\n  const searchPanelViewModel = new SearchPanelViewModel(applicationContext.searchDataState);\n  const plannerViewModel = new PlannerViewModel(applicationContext.courseState);\n  const progressionPlannerViewModel = new ProgressionPlannerViewModel(applicationContext.progressionState, applicationContext.courseState);\n  const localImportExportModel = new LocalImportExportViewModel(applicationContext.userState, applicationContext.progressionState, applicationContext.courseState);\n  const autoPlannerViewModel = new AutoPlannerViewModel(applicationContext.courseState);\n\n  return (\n    <ApplicationContext.Provider value={applicationContext}>\n      <div className=\"ui maincontainer\">\n        <MenuBar userState={applicationContext.userState} searchPanelViewModel={searchPanelViewModel} />\n        <SplitPane\n          className=\"split-pane-flex\"\n          split=\"vertical\"\n          defaultSize={\"min(50vw, 1000px)\"}\n          primary=\"second\"\n        >\n          <Container style={{ padding: 10 }} fluid>\n            <ProgressionPlanner progressionPlannerViewModel={progressionPlannerViewModel} />\n          </Container>\n          <Container style={{ padding: 10 }} fluid>\n            <LocalImportExport localImportExportViewModel={localImportExportModel} />\n            <AutoPlanner autoPlannerViewModel={autoPlannerViewModel} />\n            <Planner plannerViewModel={plannerViewModel} />\n          </Container>\n        </SplitPane>\n      </div>\n    </ApplicationContext.Provider>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}