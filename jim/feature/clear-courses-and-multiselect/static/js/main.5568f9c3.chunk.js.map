{"version":3,"sources":["interfaces/ModelInterfaces.ts","containers/LocalImportExport/LocalImportExport.tsx","containers/LocalImportExport/LocalImportExportViewModel.ts","containers/MenuBar/MenuBar.tsx","containers/Planner/CourseView/CourseView.tsx","models/CourseModel.ts","containers/Planner/CourseGroupView/CourseGroupView.tsx","containers/Planner/YearView/YearView.tsx","models/TermModel.ts","containers/SearchPanel/SearchPanelViewModel.tsx","containers/Planner/Planner.tsx","containers/Planner/PlannerViewModel.tsx","helpers/ConditionalTreeTraverser.ts","states/CourseState.ts","models/Validations/Validations.ts","models/CurriculumModel.ts","models/ProgramModel.ts","models/SpecialisationModel.ts","states/ProgressionState.ts","states/SearchDataState.ts","states/UserState.ts","contexts/ApplicationContext.ts","containers/SearchPanel/SearchPanelStyles.ts","containers/SearchPanel/Results/CourseResultView.tsx","containers/SearchPanel/Results/SpecialisationResultView.tsx","containers/ProgressionPlanner/CurriculumView/CurriculumElementsView.tsx","containers/ProgressionPlanner/CurriculumView/CurriculumContainerView.tsx","containers/ProgressionPlanner/ProgressionEntityView.tsx","containers/ProgressionPlanner/ProgressionPlanner.tsx","containers/ProgressionPlanner/ProgressionPlannerViewModel.ts","models/Filters/FilterModel.ts","models/Filters/Filters.ts","config/ResetButtonStyle.ts","containers/SearchPanel/Filter/FilterSection.tsx","containers/SearchPanel/Filter/FilterMenuView.tsx","containers/SearchPanel/Results/CourseResultCollectionView.tsx","containers/SearchPanel/SearchTab/CourseSearchTab.tsx","containers/SearchPanel/Results/ProgramResultView.tsx","containers/SearchPanel/Results/ProgramResultCollectionView.tsx","containers/SearchPanel/SearchTab/ProgramSearchTab.tsx","containers/SearchPanel/Results/SpecialisationResultCollectionView.tsx","containers/SearchPanel/SearchTab/SpecialisationSearchTab.tsx","containers/SearchPanel/SearchPanel.tsx","containers/AutoPlan/AutoPlannerView.tsx","containers/AutoPlan/AutoPlannerModel.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ProgressionStatus","ErrorCode","StudyLevel","ImportExportButton","styled","button","props","primary","css","ImportExportButtonContainer","div","LocalImportExport","localImportExportViewModel","inputRef","React","useRef","Fragment","onClick","export","current","click","ref","onChange","event","import","type","style","display","accept","SerializableVersionNumber","_versionNumber","this","imported","a","_version","console","log","LocalImportExportViewModel","userState","progressionState","courseState","_serializables","Map","set","data","FileSaver","saveAs","Blob","JSON","stringify","DateTime","now","toFormat","studyLevel","forEach","serializable","key","serialize","serializeToFile","json","parse","Promise","resolve","get","deserialize","then","catch","error","message","file","target","files","reader","FileReader","onload","ev","result","deserializeFromString","toString","value","readAsText","MenuBarView","Menu","MenuBar","observer","useState","undefined","studyLevelChangeAction","setStudyLevelChangeAction","pointing","Item","header","name","active","UNDERGRADUATE","setStudyLevel","POSTGRADUATE","RESEARCH","Modal","size","open","onClose","Header","Content","Actions","Button","negative","positive","Container","isSelected","isPrerequisiteOfCurrentDraggable","hasErrors","isDragging","isGhosting","horizontal","isRegionSelecting","SelectionCount","UnselectableText","p","tooltipStyle","fontSize","CourseView","CourseStatus","termOffering","allocatedPeriod","output","slice","sort","join","formatTermOffering","course","allocatedTerm","errorList","errors","missing","missingFormatted","regex","length","replace","i","push","formatErrors","performAction","navigator","platform","indexOf","metaKey","ctrlKey","wasToggleInSelectionGroupKeyUsed","multiSelect","toggleSelection","toggleSelectionInGroup","defaultPrevented","regionSelect","preventDefault","contextMenu","isAnyContextOpen","draggableRef","registerDraggable","contextRef","isCourseContextOpen","setIsCourseContextOpen","draggableId","code","index","droppableIndex","provided","snapshot","shouldShowSelection","selectionCount","draggableProps","dragHandleProps","el","innerRef","prerequisitesOfCurrentDraggable","has","id","onKeyDown","onContextMenu","e","setIsAnyContextOpen","currentOpenContextStateSetter","getBoundingClientRect","left","clientX","top","clientY","right","bottom","height","width","selectedCourses","courses","find","courseModel","data-draggable","Popup","basic","context","items","getContextMenuItems","onItemClick","secondary","vertical","title","Tooltip","aria-label","aria-multiline","arrow","Title","h3","CourseList","isDraggingOver","isValidDroppable","isMultiSelectDragging","isPossibleTermOfCurrentDraggable","courseID","TermHeader","UocLabel","Label","getSelectedMap","memoizeOne","reduce","previous","CourseGroupView","isPossibleTerm","term","currentDraggableProps","possibleTerms","filter","_term","equals","totalUoc","map","creditPoints","b","color","content","droppableId","direction","droppableProps","draggingCourseId","prerequisiteCourseIds","placeholder","YearView","year","courseGroups","courseGroup","TermModel","makeAutoObservable","checkTermConstraints","Error","mappingName","parseInt","split","update","obj","tryGetTermNumber","serializedTerm","SearchPanelItem","CourseModel","contentTypeLabel","corequisites","description","effectiveDate","enrolmentRules","exclusion","facultyName","implementationYear","keywords","prerequisites","schoolName","urlMap","courseStatus","UNPLANNED","_errors","Set","ALLOCATED","clear","COMPLETED","PLANNED","add","delete","status","period","setPlanned","setCompleted","termModel","termFromSerializedData","setAllocated","YearPlanner","Planner","plannerViewModel","useEffect","window","addEventListener","onWindowKeyDown","onWindowContextMenu","onDragEnter","onDragExit","onMouseUp","removeEventListener","plannerState","setIsRegionSelecting","draggableItemRef","linesRef","isIntersectingHorizontal","box","y","x1","x2","isIntersectingVertical","x","y1","y2","isInsideBox","_","handleSelectionChange","useCallback","lines","selectedGroup","includes","DragSelection","useSelectionContainer","onSelectionStart","entries","rect","onSelectionChange","onSelectionEnd","setIsDragging","unselectAllCourses","newCourses","splice","selectCourses","areMultipleItems","menuItems","icon","moveCourseToRemoved","moveCourseToPlanned","moveCourseToCompleted","isWindowContextOpen","setIsWindowContextOpen","multiSelectProps","contextMenuProps","regionSelectProps","onBeforeCapture","onDragStart","initial","getCourseById","calculateDisplayableTerms","getMissingRequirementsWhenAssigningCourseToTerm","getFlattenedPrerequisiteList","onDragEnd","destination","source","reason","setCourseByDroppableId","getAllGroups","group","courseInGroup","selectedCourse","spliceByGroupId","synchronizePlannerState","clearCurrentDraggableProps","completedGroup","plannedGroup","yearGroups","yearGroup","PlannerViewModel","_courseState","_plannerState","_selectedGroup","_draggingCourseId","_currentDraggableProps","makeObservable","observable","computed","action","allocatedGroups","state","sourceDroppableId","destDroppableId","draggableItemMap","setUnplanned","fromMappingName","moveSelectedToRemoved","moveSelectedToPlanned","moveSelectedToCompleted","referenceCourses","targetCourses","expectedCourses","actualCourses","coursesToRemove","coursesToAdd","maxAllocatedYear","getMaxAllocatedYear","displayableTerms","Date","getFullYear","uniqueYears","getMappingName","getFullName","newPlannerState","synchronizeCourseList","termCourseMap","plannedCourses","completedCourses","groupId","start","deleteCount","getCourseGroupById","conditionalTreeTraverser","treeNode","fnIsLeafValid","invalidations","or","childNode","and","isAndConditionalTree","CourseState","_userState","validations","getTermName","addError","COURSE_NOT_OFFERED_IN_SELECTED_TERM","getMissingPrerequisitesBeforeTerm","PREREQUISITE_REQUIREMENT_NOT_MET","getMissingPrerequisitesPlanned","PREREQUISITES_NOT_PLANNED","conflictingExclusionCourses","exclusionCourseCode","exclusionCourse","EXCLUSION_COURSE_CONFLICT","coursesMapById","coursesMapByActiveStatus","_isUpdated","reaction","_updateStudyLevel","fireImmediately","registerStudyLevelUpdateActionCallback","values","axios","response","transaction","_resetCourseMap","courseObj","addCourse","_loadAllCourses","mapping","courseList","allCourses","concat","allocatedCourses","uniqueTerms","keys","maxYear","courseStatusEnum","isNaN","Number","runValidations","_course","clearErrors","fnValidate","prerequisiteTree","courseCode","isBefore","resp","courseIsOffered","activeCourses","serializedCourseState","when","resetHard","serializedCourse","CurriculumContainer","elements","containers","order","uuidv4","CurriculumElement","itemCode","url","toLowerCase","parseCurriculumContainers","childrenData","rootContainerList","childContainerList","elementList","children","relationships","parseCurriculumElements","container","relationData","relationshipList","relationshipObj","ProgramModel","academicItemType","additionalInfo","structureSummary","curriculumStructure","intakePeriod","programConstraints","progressionStatus","program","SpecialisationModel","specialisation","ProgressionState","_programMapById","_specialisationMapById","loadAllPrograms","loadAllSpecialisations","programObj","addProgram","specialisationObj","addSpecialisation","allPrograms","allSpecialisations","plannedPrograms","plannedSpecialisations","programs","programModel","specialisations","specialisationModel","serializedProgressionState","serializedProgram","getProgramById","serializedSpecialisation","getSpecialisationById","SearchDataState","_progressionState","stringToStudyLevelMap","str","_studyLevel","_studyLevelUpdateActionCallbacks","studyLevelPromises","callback","all","isUpdated","updateAction","serializedUserState","level","searchDataState","ApplicationContext","createContext","ResultItem","ResultItemHeader","ResultItemContent","ResultItemExtra","Extra","ResultCollection","Group","ResultsPagination","Pagination","ResultsColumn","Grid","Column","CourseResultView","showOptions","setShowOptions","onMouseOver","onMouseLeave","Description","newWindow","opener","openInNewTab","Icon","className","SpecialisationResultView","onMouseEnter","CurriculumElementsView","applicationContext","useContext","curriculumElements","divided","element","isCourse","isSpecialisation","CurriculumAccordionCreditPoints","CurriculumAccordionTitle","Accordion","CurriculumDescriptionDiv","CurriculumExpandCollapseLink","CurriculumContent","CurriculumContainerView","getCreditPointsView","uocOfChildren","progressionPlannerViewModel","calculateUocOfChildren","curriculumContainer","exclusive","panels","isContainerActive","sanitizeHtml","href","toggleAllContainers","isAnySubContainerActive","entityId","onTitleClick","toggleContainer","ProgressionEntityTitle","ProgressionEntityView","entity","fluid","ProgressionContainer","ProgresionPlanner","plannedProgressionEntities","ProgressionPlannerViewModel","_progressionPlannerState","_displayableContainerPanels","getUniqueUocOfCurriculumContainer","allChildren","containerId","rootContainer","setAllContainersInactive","setAllContainersActive","FilterModel","fnGetTargetValue","_possibleValues","_selectedValues","filterResultMapping","initializeFilter","allSearchData","flat","applyFilter","searchResults","results","filterValue","isNumerical","possibleFilterValue","filterElementName","numMatchingRecords","SearchPanelViewModel","queryText","isLoading","resultsPerPage","isInputActive","searchFilters","courseFilters","programFilters","specialisationFilters","courseSearchResults","programSearchResults","specialisationSearchResults","activeItem","COURSES","setActiveItem","item","courseSearchData","setIsLoading","filters","getCourseFilters","programSearchData","getProgramFilters","specialisationSearchData","getSpecialisationFilters","autorun","searchCourses","searchPrograms","searchSpecialisations","runInAction","ResetButtonStyle","backgroundColor","border","padding","textDecoration","margin","cursor","FilterSection","expandedFilters","setExpandedFilters","filterState","getFilterState","newExpandedFilters","Form","grouped","filterElementState","Checkbox","label","checked","toggleValue","FilterMenuView","resetValue","as","CourseResultCollectionView","CourseSearchTab","activePageNumber","setActivePageNumber","columns","Row","searchPanelViewModel","Math","min","totalPages","ceil","onPageChange","activePage","ProgramResultView","ProgramResultCollectionView","ProgramSearchTab","SpecialisationResultCollectionView","SpecialisationSearchTab","ResultsSubtextContainer","FoundResults","h4","SearchPanel","getNumResults","numResults","PROGRAMS","SPECIALISATIONS","Input","loading","link","setQueryText","setInputActive","shouldShowPanel","marginRight","Dropdown","text","selection","options","setResultsPerPage","AutoPlanButton","AutoPlanner","autoPlannerViewModel","autoPlan","AutoPlannerViewModel","canAllocateCourses","listYearsToTryAllocate","getYearsToTryAllocate","listTermsToTryAllocate","coursesToBeAllocated","hasChanged","counter","termAllocatedFlag","j","canAssignToTerm","termHasSpaceToAllocate","termHasLessThanThreeCourses","termIsDisabled","assignCourseToTerm","dictKey","list","App","localImportExportModel","Provider","defaultSize","ProgressionPlanner","paddingLeft","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5568f9c3.chunk.js","sourcesContent":["export interface ICurriculumContainer {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    creditPoints: number;\r\n    elements: ICurriculumElement[];\r\n    containers: ICurriculumContainer[];\r\n    order: number;\r\n}\r\n\r\nexport interface ICurriculumElement {\r\n    name: string;\r\n    description: string;\r\n    type: string;\r\n    creditPoints: number;\r\n    itemCode: string;\r\n    url: string;\r\n    order: number;\r\n    isCourse: () => boolean;\r\n    isSpecialisation: () => boolean;\r\n}\r\n\r\nexport interface IOrConditionalTree {\r\n    or: ConditionalTree[]\r\n}\r\nexport interface IAndConditionalTree {\r\n    and: ConditionalTree[]\r\n}\r\n\r\nexport const isOrConditionalTree = (obj: any): obj is IOrConditionalTree => {\r\n    return obj && obj.or\r\n}\r\n\r\nexport const isAndConditionalTree = (obj: any): obj is IAndConditionalTree => {\r\n    return obj && obj.and\r\n}\r\n\r\nexport type ConditionalTree = IOrConditionalTree | IAndConditionalTree | string\r\n\r\nexport interface ICourse {\r\n    id: string;\r\n    code: string;\r\n    contentTypeLabel: string;\r\n    corequisites: string[];\r\n    creditPoints: number;\r\n    description: string;\r\n    effectiveDate: Date; // Form (new Date('YYYY-MM-DD'));\r\n    enrolmentRules: string[];\r\n    exclusion: string[];\r\n    facultyName: string;\r\n    implementationYear: number;\r\n    keywords: string[];\r\n    prerequisites: ConditionalTree;\r\n    schoolName: string;\r\n    studyLevel: string;\r\n    termOffering: string[];\r\n    title: string;\r\n    urlMap: string;\r\n}\r\n\r\nexport interface IProgram {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    additionalInfo: string;\r\n    implementationYear: number;\r\n    intakePeriod: Array<string>;\r\n    programConstraints: Array<any>;\r\n    studyLevel: string;\r\n}\r\n\r\nexport interface ISpecialisation {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    implementationYear: number;\r\n    keywords: string[];\r\n    studyLevel: string;\r\n    urlMap: string;\r\n}\r\n\r\nexport interface IProgressionEntity {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    structureSummary: string,\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    progressionStatus: ProgressionStatus,\r\n    setPlanned: () => void,\r\n    setUnplanned: () => void,\r\n}\r\n\r\nexport enum ProgressionStatus {\r\n    UNPLANNED,\r\n    PLANNED,\r\n}\r\n\r\nexport interface IValidatableEntity {\r\n    addError: (error: IError) => void\r\n    removeError: (error: IError) => void\r\n    hasErrors: () => boolean\r\n    clearErrors: () => void\r\n    errors: IError[]\r\n}\r\n\r\nexport enum ErrorCode {\r\n    UNKNOWN,\r\n    COURSE_NOT_OFFERED_IN_SELECTED_TERM,\r\n    PREREQUISITES_NOT_PLANNED,  \r\n    PREREQUISITE_REQUIREMENT_NOT_MET,\r\n    COREQUISITE_REQUIREMENT_NOT_MET,\r\n    EXCLUSION_COURSE_CONFLICT,\r\n}\r\n\r\nexport interface IError {\r\n    code: ErrorCode,\r\n    message: string,\r\n    missing: string,\r\n}\r\n\r\nexport enum StudyLevel {\r\n    UNDERGRADUATE=\"undergraduate\",\r\n    POSTGRADUATE=\"postgraduate\",\r\n    RESEARCH=\"research\",\r\n}\r\n","import React from 'react';\nimport { LocalImportExportViewModel } from \"./LocalImportExportViewModel\"\nimport styled, { css } from \"styled-components\"\n\nconst ImportExportButton = styled.button`\n  background: transparent;\n  border-radius: 4px;\n  border: 2px solid darkgrey;\n  color: black;\n  margin: 4px 2px;\n  padding: 15px 32px;\n  font-size: 20px;\n  display: inline-block;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n\n  transition-duration: 0.2s;\n  :hover {\n    background: #f2f2f2;\n  }\n\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */ \n\n  ${props => props.primary && css`\n    background: darkgrey;\n\n    :hover {\n      background: lightgrey;\n    }\n  `}\n`;\n\nconst ImportExportButtonContainer = styled.div`\n  width: 48%;\n  display: inline;\n  background: transparent;\n  float: left;\n  margin: 0% 1%;\n`;\n\nconst LocalImportExport = ({ localImportExportViewModel }: { [key: string]: LocalImportExportViewModel }) => {\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  return (\n    <React.Fragment>\n      <ImportExportButtonContainer>\n        <ImportExportButton primary onClick={() => { localImportExportViewModel.export() }}>\n          Export\n        </ImportExportButton>\n      </ImportExportButtonContainer>\n      <ImportExportButtonContainer>\n        <ImportExportButton onClick={() => { inputRef.current?.click() }}>\n          Import\n        </ImportExportButton>\n        <input\n          ref={inputRef}\n          onChange={(event) => localImportExportViewModel.import(event)}\n          type=\"file\"\n          style={{ display: \"none\" }}\n          accept=\"application/JSON\"\n        />\n      </ImportExportButtonContainer>\n    </React.Fragment >\n  )\n};\n\nexport default LocalImportExport;","import { CourseState } from \"../../states/CourseState\"\nimport { ProgressionState } from \"../../states/ProgressionState\"\nimport React from \"react\"\nimport { UserState } from \"../../states/UserState\"\nimport { ISerializableEntity, TermtanglesSerialized } from \"../../interfaces/SerializableInterfaces\"\nimport { DateTime } from \"luxon\"\nimport FileSaver from \"file-saver\"\n\nexport class SerializableVersionNumber implements ISerializableEntity {\n  private _versionNumber: number = 1;\n\n  serialize(): Object {\n    return this._versionNumber;\n  }\n\n  async deserialize(imported: TermtanglesSerialized): Promise<void> {\n    if (!imported._version) {\n      throw \"ERROR: Version not included.\";\n    }\n\n    console.log(\"Termtangle data version: \" + imported._version);\n  }\n}\n\nexport class LocalImportExportViewModel {\n  private _serializables = new Map<string, ISerializableEntity>();\n\n  constructor (userState: UserState, progressionState: ProgressionState, courseState: CourseState) {\n    this._serializables.set(\"_version\", new SerializableVersionNumber());\n    this._serializables.set(\"userState\", userState);\n    this._serializables.set(\"progressionState\", progressionState);\n    this._serializables.set(\"courseState\", courseState);\n  }\n\n  serializeToFile(data: TermtanglesSerialized) {\n    FileSaver.saveAs(\n      new Blob([JSON.stringify(data)], { type: \"application/json;charset=utf-8\" }),\n      `termtangles_${DateTime.now().toFormat(\"yyyyMMdd_HHmmssSSS\")}.json`,\n    );\n  }\n\n  export() {\n    const data: TermtanglesSerialized = {\n      _version: 0,\n      userState: {studyLevel: \"\"}\n    };\n    this._serializables.forEach((serializable, key) => {\n      data[key] = serializable.serialize();\n    });\n    this.serializeToFile(data);\n  }\n\n  async deserializeFromString (data: string) {\n    try {\n      const json: TermtanglesSerialized = JSON.parse(data);\n\n      return Promise.resolve(\n        this._serializables.get(\"_version\")?.deserialize(json).then(() => \n          this._serializables.get(\"userState\")?.deserialize(json).then(() => \n            Promise.resolve([\n              this._serializables.get(\"progressionState\")?.deserialize(json),\n              this._serializables.get(\"courseState\")?.deserialize(json),\n            ])\n          )\n        )\n      ).catch((error) => { console.error(error) })\n    } catch (e) {\n      console.error(`ERROR: Invalid JSON (${e.message})`);\n    }\n  }\n\n  import (event: React.ChangeEvent<HTMLInputElement>) {\n    const file: Blob = event.target.files![0];\n    \n    let reader = new FileReader();\n    reader.onload = async (ev) => {\n      if (ev.target?.result) {\n        await this.deserializeFromString(ev.target.result.toString());\n        event.target.value = \"\";\n      }\n    }\n    reader.readAsText(file);\n  }\n}\n","import styled from 'styled-components'\nimport { Observer, observer } from 'mobx-react';\nimport React, { useState } from 'react';\nimport { Button, Menu, Modal } from 'semantic-ui-react';\nimport { StudyLevel } from '../../interfaces/ModelInterfaces';\nimport { UserState } from '../../states/UserState';\n\nexport interface IMenuBarProps {\n  userState: UserState\n}\n\nconst MenuBarView = styled(Menu)`\n  &&{\n    margin: auto 0 auto 0;\n  }\n`\n\nexport const MenuBar = observer((props: IMenuBarProps) => {\n  const [studyLevelChangeAction, setStudyLevelChangeAction] = useState<(() => void) | undefined>(undefined)\n  return <Observer>\n    {() => {\n      return (\n        <React.Fragment>\n          <MenuBarView pointing>\n            <Menu.Item header>Termtangles</Menu.Item>\n            <Menu.Item\n              name={\"Undergraduate\"}\n              active={props.userState.studyLevel === StudyLevel.UNDERGRADUATE}\n              onClick={\n                () => props.userState.studyLevel !== StudyLevel.UNDERGRADUATE\n                  ? setStudyLevelChangeAction(() => () => props.userState.setStudyLevel(StudyLevel.UNDERGRADUATE))\n                  : {}\n              }\n            />\n            <Menu.Item\n              name={\"Postgraduate\"}\n              active={props.userState.studyLevel === StudyLevel.POSTGRADUATE}\n              onClick={\n                () => props.userState.studyLevel !== StudyLevel.POSTGRADUATE\n                  ? setStudyLevelChangeAction(() => () => props.userState.setStudyLevel(StudyLevel.POSTGRADUATE))\n                  : {}\n              }\n            />\n            <Menu.Item\n              name={\"Research\"}\n              active={props.userState.studyLevel === StudyLevel.RESEARCH}\n              onClick={\n                () => props.userState.studyLevel !== StudyLevel.RESEARCH\n                  ? setStudyLevelChangeAction(() => () => props.userState.setStudyLevel(StudyLevel.RESEARCH))\n                  : {}\n              }\n            />\n          </MenuBarView>\n\n          <Modal\n            size='small'\n            open={studyLevelChangeAction !== undefined}\n            onClose={() => setStudyLevelChangeAction(undefined)}\n          >\n            <Modal.Header>Study Level Change</Modal.Header>\n            <Modal.Content>\n              <p>Changing study level will reset all current progress. Do you want to continue?</p>\n            </Modal.Content>\n            <Modal.Actions>\n              <Button negative onClick={() => setStudyLevelChangeAction(undefined)}>\n                No\n              </Button>\n              <Button positive onClick={() => {\n                if (studyLevelChangeAction) {\n                  studyLevelChangeAction()\n                }\n                setStudyLevelChangeAction(undefined)\n              }}>\n                Yes\n              </Button>\n            </Modal.Actions>\n          </Modal>\n\n        </React.Fragment>\n      )\n    }}\n  </Observer>\n})\n","import styled from 'styled-components'\nimport { CourseModel } from '../../../models/CourseModel';\nimport { Draggable, DraggableProvided, DraggableStateSnapshot } from 'react-beautiful-dnd'\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { IError } from '../../../interfaces/ModelInterfaces';\nimport { TermModel } from '../../../models/TermModel';\nimport { Menu, MenuItemProps, Popup } from 'semantic-ui-react';\nimport React from 'react';\nimport { IMultiSelectProps, IContextMenuProps, IRegionSelectProps } from '../Planner';\n\nconst getBackgroundColor = (props) => {\n  return (\n    props.isPrerequisiteOfCurrentDraggable\n      ? '#c5eafc'\n      : props.hasErrors()\n        ? '#f5bfc8'\n        : props.isDragging\n          ? 'lightgrey'\n          : 'white'\n  )\n}\n\nconst Container = styled.div`\n  border: ${(props) =>\n    props.isSelected\n      ? \"2px dashed royalblue\"\n      : \"2px solid lightgrey\"\n  };\n  border-radius: 8px;\n  padding: 8px;\n  margin: 0px 2px 8px 2px;\n  background-color: ${getBackgroundColor};\n  ${(props) =>\n    props.isDragging\n      ? `box-shadow: 2px 2px 1px lightgrey;`\n      : ''\n  }\n  \n  ${(props) =>\n    props.isGhosting\n      ? 'opacity: 0.9; color: darkgrey;'\n      : ''\n  }\n\n  /* needed for SelectionCount */\n  position: relative;\n\n  ${props => props.horizontal ? \"\" : \"flex-grow: 1;\"}\n  height: fit-content;\n  max-width: 350px;\n\n  &:active {\n    outline: none;\n    ${props => props.isRegionSelecting ? \"\" : \"border: 2px inset lightgrey;\"}\n  }\n\n\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */\n`\nconst SelectionCount = styled.div`\n  right: -20px;\n  top: -20px;\n  color: white;\n  background: royalblue;\n  border-radius: 50%;\n  height: 35px;\n  width: 35px;\n  line-height: 35px;\n  position: absolute;\n  text-align: center;\n  font-size: 15px;\n  \n`;\n\nconst UnselectableText = styled.p`\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */      \n`\n\nconst tooltipStyle = {\n  fontSize: 13,\n}\n\ninterface ICourseViewProps {\n  droppableIndex: number\n  course: CourseModel\n  prerequisitesOfCurrentDraggable: Set<string>\n  horizontal?: boolean\n  isSelected: boolean\n  isGhosting: boolean\n  selectionCount: number\n\n  multiSelect: IMultiSelectProps;\n  contextMenu: IContextMenuProps;\n  regionSelect: IRegionSelectProps;\n}\n\nconst CourseView = (props: ICourseViewProps) => {\n  let termOffering = formatTermOffering(props.course.termOffering, props.course.allocatedTerm);\n  let errorList: string[] = formatErrors(props.course.errors);\n\n  const wasToggleInSelectionGroupKeyUsed = (event: MouseEvent | KeyboardEvent) => {\n    const isUsingMac = navigator.platform.indexOf('Mac') >= 0;\n    return isUsingMac ? event.metaKey : event.ctrlKey;\n  };\n\n  const performAction = (event: MouseEvent | KeyboardEvent) => {\n    if (wasToggleInSelectionGroupKeyUsed(event)) {\n      props.multiSelect.toggleSelectionInGroup(props.course);\n      return;\n    }\n\n    props.multiSelect.toggleSelection(props.course);\n  };\n\n  const onKeyDown = (event: KeyboardEvent, provided: DraggableProvided, snapshot: DraggableStateSnapshot) => {\n    if (event.defaultPrevented) return;\n\n    if (snapshot.isDragging) return;\n\n    if (event.key !== \"enter\") return;\n\n    event.preventDefault();\n    performAction(event);\n  }\n\n  const onClick = (event: MouseEvent) => {\n    if (event.defaultPrevented) return;\n\n    if (event.button !== 0) return;\n\n    if (props.regionSelect.isRegionSelecting) return;\n\n    event.preventDefault();\n    if (props.contextMenu.isAnyContextOpen) return;\n\n    performAction(event);\n  };\n\n  // Drag region selection\n  const draggableRef = React.useRef<HTMLDivElement | null | undefined>();\n  props.regionSelect.registerDraggable(props.course, draggableRef);\n\n  const contextRef = React.useRef<any>();\n  const [isCourseContextOpen, setIsCourseContextOpen] = React.useState(false);\n\n  const onContextMenu = (event: MouseEvent) => {\n    event.preventDefault()\n\n    if (props.contextMenu.isAnyContextOpen) {\n      props.contextMenu.currentOpenContextStateSetter.current(false);\n    }\n\n    props.contextMenu.currentOpenContextStateSetter.current = setIsCourseContextOpen;\n\n    contextRef.current = {\n      getBoundingClientRect: () => ({\n        left: event.clientX,\n        top: event.clientY,\n        right: event.clientX + 1,\n        bottom: event.clientY + 1,\n        height: 0,\n        width: 0,\n      }),\n    }\n\n    // If course not in selectedCourses, toggle selection\n    if (!props.multiSelect.selectedCourses.courses.find((courseModel: CourseModel) => courseModel.id === props.course.id)) {\n      props.multiSelect.toggleSelection(props.course);\n    }\n    setIsCourseContextOpen(true)\n    props.contextMenu.setIsAnyContextOpen(true)\n  }\n\n  return (\n    <Draggable draggableId={props.course.code} index={props.droppableIndex} >\n      {((provided, snapshot) => {\n        const shouldShowSelection: boolean = snapshot.isDragging && props.selectionCount > 1;\n        return (\n          <Container\n            horizontal={props.horizontal}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            ref={(el) => {\n              provided.innerRef(el);\n              draggableRef.current = el;\n            }}\n            isDragging={snapshot.isDragging}\n            isPrerequisiteOfCurrentDraggable={props.prerequisitesOfCurrentDraggable.has(props.course.id)}\n            hasErrors={() => props.course.hasErrors()}\n            isSelected={props.isSelected}\n            onClick={onClick}\n            onKeyDown={(event: KeyboardEvent) => onKeyDown(event, provided, snapshot)}\n            isGhosting={props.isGhosting}\n            onContextMenu={(e) => {\n              props.contextMenu.setIsAnyContextOpen(true);\n              onContextMenu(e);\n            }}\n            isRegionSelecting={props.regionSelect.isRegionSelecting}\n            data-draggable={true}\n          >\n            <Popup\n              basic\n              context={contextRef}\n              onClose={() => {\n                setIsCourseContextOpen(false);\n                props.contextMenu.setIsAnyContextOpen(false);\n              }}\n              open={isCourseContextOpen && props.contextMenu.isAnyContextOpen}\n            >\n              <Menu\n                items={props.contextMenu.getContextMenuItems(props.course)}\n                onItemClick={(e) => {\n                  e.preventDefault();\n                  setIsCourseContextOpen(false);\n                  props.contextMenu.setIsAnyContextOpen(false);\n                }}\n                secondary\n                vertical\n              />\n            </Popup>\n\n            {!props.regionSelect.isRegionSelecting ? (\n              <Tooltip title={\n                <span>\n                  <UnselectableText style={tooltipStyle}>{termOffering}</UnselectableText>\n                  <UnselectableText style={tooltipStyle}>{errorList[0]}</UnselectableText>\n                  <UnselectableText style={tooltipStyle}>{errorList[1]}</UnselectableText>\n                </span>}\n                aria-label=\"add\" aria-multiline=\"true\" arrow={true}\n              >\n                <UnselectableText> {props.course.code} - {props.course.title}</UnselectableText>\n              </Tooltip>\n            ) : <UnselectableText> {props.course.code} - {props.course.title}</UnselectableText>}\n\n            {shouldShowSelection ? (\n              <SelectionCount>{props.selectionCount}</SelectionCount>\n            ) : undefined}\n          </Container>\n        )\n      })}\n    </Draggable>\n  )\n}\n\nfunction formatErrors(errors: IError[]): string[] {\n  let output: string[] = [];\n  let missing: string[] = [];\n  let missingFormatted: string[] = [];\n  const regex = /<br\\/>/ig;\n\n  if (errors.length === 0) {\n    return [\"\"];\n  }\n\n  if (errors.length === 1) {\n    return [errors[0].message.replace(regex, \"\"), `${errors[0].missing} `];\n  }\n\n  for (let i = 0; i < errors.length; i++) {\n    output.push(errors[i].message.replace(regex, \"\"));\n    missing.push(errors[i].missing);\n  }\n\n  // Format missing arr for empty elements and remove from array before joining\n  for (let i = 0; i < errors.length; i++) {\n    if (missing[i] !== \"\") {\n      missingFormatted.push(missing[i]);\n    }\n  }\n\n  return [output.join(\" & \"), missingFormatted.join(\" & \")];\n}\n\nfunction formatTermOffering(termOffering: string[], allocatedPeriod: TermModel | undefined) {\n  termOffering = termOffering.slice().sort();\n  let output: string = termOffering.join(\", \");\n\n  output = `Term Offerings: ${output} `;\n\n  return output;\n}\n\nexport default CourseView\n","import { makeAutoObservable } from \"mobx\";\nimport { TermModel } from \"./TermModel\";\nimport { SerializedCourse, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\nimport { ICourse, ConditionalTree, IValidatableEntity, IError } from '../interfaces/ModelInterfaces';\n\nexport enum CourseStatus {\n  UNPLANNED,\n  PLANNED,\n  ALLOCATED,\n  COMPLETED,\n}\n\nexport class CourseModel implements ICourse, IValidatableEntity, ISerializableEntity {\n  allocatedTerm: TermModel | undefined = undefined;\n  public readonly id: string\n  public courseStatus: CourseStatus = CourseStatus.UNPLANNED // Default unplanned\n\n  private _errors: Set<IError> = new Set<IError>()\n\n  constructor(\n    public readonly code: string,\n    public readonly contentTypeLabel: string,\n    public readonly corequisites: string[],\n    public readonly creditPoints: number,\n    public readonly description: string,\n    public readonly effectiveDate: Date, // Form (new Date('YYYY-MM-DD'));\n    public readonly enrolmentRules: string[],\n    public readonly exclusion: string[],\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly keywords: string[],\n    public readonly prerequisites: ConditionalTree,\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly termOffering: string[],\n    public readonly title: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code;\n    makeAutoObservable(this)\n  }\n\n  setAllocated(term: TermModel) {\n    this.courseStatus = CourseStatus.ALLOCATED\n    this.allocatedTerm = term\n  }\n\n  setUnplanned() {\n    this._errors.clear()\n    this.courseStatus = CourseStatus.UNPLANNED\n    this.allocatedTerm = undefined\n  }\n\n  setCompleted() {\n    this._errors.clear()\n    this.courseStatus = CourseStatus.COMPLETED\n    this.allocatedTerm = undefined\n  }\n\n  setPlanned() {\n    this.courseStatus = CourseStatus.PLANNED\n    this.allocatedTerm = undefined\n  }\n\n  //#region IValidatableEntity\n  addError(error: IError) {\n    this._errors.add(error)\n  }\n\n  removeError (error: IError) {\n    this._errors.delete(error)\n  }\n\n  hasErrors(): boolean {\n    return this._errors.size > 0\n  }\n\n  clearErrors() {\n    this._errors.clear()\n  }\n\n  get errors(): IError[] {\n    return [...this._errors]\n  }\n  //#endregion\n\n  serialize(): SerializedCourse {\n    if (this.courseStatus !== CourseStatus.ALLOCATED) {\n      return {\n        id: this.id,\n        status: CourseStatus[this.courseStatus],\n      }\n    } else {\n      return {\n        id: this.id,\n        status: CourseStatus[this.courseStatus],\n        period: this.allocatedTerm?.serialize(),\n      }\n    }\n  }\n\n  async deserialize(course: SerializedCourse) {\n    if (course.id !== this.id) {\n      console.error(`ERROR: This course is not ${course.id} (is: ${this.id})`);\n      return;\n    }\n\n    switch(course.status) {\n      case (CourseStatus[CourseStatus.PLANNED]): {\n        this.setPlanned();\n        break;\n      }\n      case (CourseStatus[CourseStatus.COMPLETED]): {\n        this.setCompleted();\n        break;\n      }\n      case (CourseStatus[CourseStatus.ALLOCATED]): {\n        if (course.period) {\n          try {\n            let termModel = TermModel.termFromSerializedData(course.period);\n            this.setAllocated(termModel);\n          } catch (e) {\n            console.error(`ERROR: invalid term period passed in ${course.period} (${e.message})`);\n          }\n          \n        } else {\n          console.error(`ERROR: Allocated course status with no period ${course.id}`);\n        }\n        break;\n      }\n      default: {\n        console.error(`ERROR: ${course.status} is not a valid status`);\n      }\n    }\n  }\n\n  toString() {\n    return `[COURSE_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadCourseByCode(courseCode: string) {\n//   return db.collection(\"courses\")\n//     .doc(courseCode)!\n//     .withConverter(courseConverter)\n//     .get().then((doc) => {\n//       if (doc.exists) {\n//         var course = doc.data()!;\n\n//         return course;\n//       } else {\n//         console.log(\"No such document!\");\n//       }\n//     }).catch((error) => {\n//       console.log(\"Error getting document:\", error);\n//       throw new Error();\n//     });\n// }\n\n// let courseConverter = {\n//   toFirestore: function (course) {\n//     return {\n//       name: course.code,\n//     };\n//   },\n//   fromFirestore: function (snapshot, options) {\n//     const data = snapshot.data(options);\n//     let effectiveDate = new Date(data.effectiveDate);\n\n//     return new CourseModel(\n//       data.code,\n//       data.contentTypeLabel,\n//       data.corequisites,\n//       Number(data.creditPoints),\n//       data.description,\n//       effectiveDate,\n//       data.enrolmentRules,\n//       data.exclusion,\n//       data.facultyName,\n//       Number(data.implementationYear),\n//       data.keywords,\n//       data.prerequisites,\n//       data.schoolName,\n//       data.studyLevel,\n//       data.termOffering,\n//       data.title,\n//       data.urlMap,\n//     );\n//   }\n// };","import { Droppable } from 'react-beautiful-dnd';\nimport { Label } from 'semantic-ui-react';\nimport styled from 'styled-components'\nimport { CourseModel } from '../../../models/CourseModel';\nimport { TermModel } from '../../../models/TermModel';\nimport CourseView from '../CourseView/CourseView';\nimport { ICourseGroup, ICurrentDraggableProps } from '../PlannerViewModel';\nimport { MenuItemProps } from 'semantic-ui-react'\nimport memoizeOne from \"memoize-one\"\nimport { IMultiSelectProps, IContextMenuProps, IRegionSelectProps } from '../Planner';\n\nconst Container = styled.div`\n    margin: 8px;\n    border: 1px solid lightgrey;\n    border-radius:2px;\n\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n    ${props => !props.horizontal ? \"max-width: 350px\" : \"\"};\n    ${props => props.title === \"Planned\" ? \"min-width: 350px\" : \"\"};\n    -webkit-user-select: none;  /* Chrome all / Safari all */\n    -moz-user-select: none;     /* Firefox all */\n    -ms-user-select: none;      /* IE 10+ */\n    user-select: none;          /* Likely future */ \n`\n\nconst Title = styled.h3`\n    padding: 6px;\n    margin: 0 0;\n    display: flex;\n    width: 200px;\n`;\n\nconst CourseList = styled.div`\n    padding: 6px;\n    min-height: 100px;\n    transition: background-color 0.2s ease;\n    background-color: ${props =>\n  (props.isDraggingOver\n    ? props.isValidDroppable || props.isMultiSelectDragging\n      ? '#8debb7'\n      : '#ff99b0'\n    : props.isPossibleTermOfCurrentDraggable\n      ? '#cafae0'\n      : (props.courseID === \"completed\")\n        ? '#edf2f4'\n        : (props.courseID === \"planned\")\n          ? '#edf2f4'\n          : '#edf2f4'\n  )\n  };\n    flex-grow: 1;\n    display: flex;\n    flex-direction: ${props => props.horizontal ? \"row\" : \"column\"};\n    flex-flow: row ${props => props.horizontal ? \"wrap\" : \"nowrap\"};\n    align-content: flex-start;\n    max-width: inherit;\n`;\n\n\n\nconst TermHeader = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n`\n\nconst UocLabel = styled(Label)`\n    && {\n        margin: auto 0 auto 0;\n        height: fit-content;\n        vertical-align: middle;\n        white-space: nowrap;\n    } \n`\n\ninterface ITermViewProps {\n  id: string\n  title: string\n  courses: CourseModel[]\n  term: TermModel | null\n  currentDraggableProps: ICurrentDraggableProps\n  horizontal?: boolean\n\n  multiSelect: IMultiSelectProps;\n  contextMenu: IContextMenuProps;\n  regionSelect: IRegionSelectProps;\n}\n\nconst getSelectedMap = memoizeOne((selectedCourses: ICourseGroup) =>\n  selectedCourses.courses.reduce((previous, current) => {\n    previous[current.id] = true;\n    return previous;\n  }, {}),\n);\n\nconst CourseGroupView = (props: ITermViewProps) => {\n  const isPossibleTerm = (term: TermModel | null): boolean => {\n    return props.currentDraggableProps.possibleTerms.filter(_term => _term.equals(term)).length > 0\n  }\n  const totalUoc = props.courses.map(course => course.creditPoints).reduce((a, b) => a + b, 0)\n\n  return (\n    <Container horizontal={props.horizontal} title={props.title}>\n      <TermHeader>\n        <Title>{props.title}</Title>\n        {\n          props.term\n            ? <UocLabel\n              color={(totalUoc === 18 || props.courses.length === 3)\n                ? \"green\"\n                : totalUoc < 18\n                  ? \"orange\"\n                  : \"yellow\"\n              }\n              content={`${totalUoc} UOC`}\n              size={\"small\"}\n            />\n            : <></>\n        }\n      </TermHeader>\n      <Droppable\n        droppableId={props.id}\n        direction={props.horizontal ? 'horizontal' : 'vertical'}\n      >\n        {\n          (provided, snapshot) => (\n            <CourseList\n              horizontal\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              isDraggingOver={snapshot.isDraggingOver}\n              courseID={provided.droppableProps['data-rbd-droppable-id']}\n              isPossibleTermOfCurrentDraggable={isPossibleTerm(props.term)}\n              isValidDroppable={props.term === null || isPossibleTerm(props.term)}\n              isMultiSelectDragging={props.multiSelect.selectedCourses.courses.length > 1}\n            >\n              {\n                props.courses ? props.courses.map((course, index) => {\n                  const isSelected: boolean = !!getSelectedMap(props.multiSelect.selectedCourses)[course.id]\n                  const isGhosting: boolean = isSelected && !!props.multiSelect.draggingCourseId && props.multiSelect.draggingCourseId !== course.id;\n                  return (\n                    <CourseView\n                      horizontal={props.horizontal}\n                      key={course.code}\n                      course={course}\n                      droppableIndex={index}\n                      prerequisitesOfCurrentDraggable={props.currentDraggableProps.prerequisiteCourseIds}\n                      isSelected={isSelected}\n                      isGhosting={isGhosting}\n                      selectionCount={props.multiSelect.selectedCourses.courses.length}\n                      multiSelect={props.multiSelect}\n                      contextMenu={props.contextMenu}\n                      regionSelect={props.regionSelect}\n                    />\n                  )\n                })\n                  : undefined\n              }\n              {provided.placeholder}\n            </CourseList>\n          )\n        }\n      </Droppable>\n    </Container>\n  )\n};\nexport default CourseGroupView\n","import { MenuItemProps } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport { CourseModel } from '../../../models/CourseModel';\nimport CourseGroupView from '../CourseGroupView/CourseGroupView';\nimport { IContextMenuProps, IMultiSelectProps, IRegionSelectProps } from '../Planner';\nimport { ICourseGroup, ICurrentDraggableProps } from '../PlannerViewModel';\n\nconst Container = styled.div`\n    margin: 8px;\n    border: 1px solid lightgrey;\n    border-radius:2px;\n    width: 250px;\n    -webkit-user-select: none;  /* Chrome all / Safari all */\n    -moz-user-select: none;     /* Firefox all */\n    -ms-user-select: none;      /* IE 10+ */\n    user-select: none;          /* Likely future */ \n`\n\nconst Title = styled.h3`\n    padding: 6px;\n    margin: 3px;\n    display: flex;\n    width: 200px;\n`;\n\ninterface IYearViewProps {\n  id: string,\n  title: string,\n  year: number,\n  courseGroups: ICourseGroup[],\n  currentDraggableProps: ICurrentDraggableProps,\n\n  multiSelect: IMultiSelectProps;\n  contextMenu: IContextMenuProps;\n  regionSelect: IRegionSelectProps;\n}\n\nconst YearView = (props: IYearViewProps) => {\n  return (\n    <Container>\n      <Title>{props.year}</Title>\n      {\n        props.courseGroups.map(courseGroup => {\n          // console.log(`Rendering term ${courseGroup.title} with courses ${courseGroup.courses}`)\n          return (\n            <CourseGroupView\n              key={courseGroup.id}\n              id={courseGroup.id}\n              title={courseGroup.title}\n              courses={courseGroup.courses}\n              term={courseGroup.term}\n              currentDraggableProps={props.currentDraggableProps}\n              multiSelect={props.multiSelect}\n              contextMenu={props.contextMenu}\n              regionSelect={props.regionSelect}\n            />\n          )\n        })\n      }\n    </Container>\n  )\n};\nexport default YearView\n","import { makeAutoObservable } from \"mobx\";\nimport { SerializedTerm, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\n\nexport class TermModel implements ISerializableEntity {\n    year: number;\n    name: string;\n\n    constructor(\n        year: number,\n        name: string,\n    ) {\n        makeAutoObservable(this);\n        this.checkTermConstraints(year, name);\n        \n        this.year = year;\n        this.name = name;\n    }\n\n    static termFromSerializedData(serializedTerm: SerializedTerm) {\n        return new TermModel(serializedTerm.year, serializedTerm.name);\n    }\n\n    private checkTermConstraints(year?: number, name?: string) {\n        if (!year) throw Error(`ERROR: ${year} is not a valid term year.`);\n        if (!name) throw Error(`ERROR: ${name} is not a valid term name.`);\n\n        // Do other term checks here\n    }\n\n    // getShortName() {\n    //     if (this.tryGetTermNumber()) {\n    //         return `${this.year % 100}T${this.tryGetTermNumber()}`\n    //     }\n    //     return `${this.year % 100} ${this.name}`\n    // }\n\n    get getMappingName() {\n        return `${this.year}_${this.name}`\n    }\n\n    update(year: number, name: string) {\n        this.year = year\n        this.name = name\n    }\n\n    updateFromMappingName(mappingName: string) {\n        let year = parseInt(mappingName.split('_')[0])\n        let name = mappingName.split('_')[1]\n        this.update(year, name)\n    }\n\n    get getFullName() {\n        return `${this.year} ${this.name}`\n    }\n\n    get getTermName() {\n        return `${this.name}`\n    }\n\n    static fromMappingName(mappingName: string) {\n        let year = parseInt(mappingName.split('_')[0])\n        let term_name = mappingName.split('_')[1]\n\n        return new TermModel(year, term_name)\n    }\n\n    private tryGetTermNumber(): number | undefined {\n        switch (this.name) {\n            case \"Summer Term\":\n                return 0\n            case \"Term 1\":\n                return 1\n            case \"Term 2\":\n                return 2\n            case \"Term 3\":\n                return 3\n            default:\n                return undefined\n        }\n    }\n\n    public equals(obj: TermModel | null): boolean {\n        if (!obj) {\n            return false\n        }\n        return this.year === obj.year && this.name === obj.name\n    }\n\n    public isBefore(term: TermModel) {\n        return this.year < term.year\n            || (term.year === this.year && ( (this.tryGetTermNumber() ?? 99) < (term.tryGetTermNumber() ?? 99)) );\n    }\n\n    serialize(): SerializedTerm {\n        return {\n            year: this.year,\n            name: this.name,\n        };\n    }\n\n    deserialize(serializedTerm: SerializedTerm): Promise<void> {\n        throw Error(`ERROR: use static method termFromSerializedData to construct the term from serialized data ${serializedTerm}.`);\n    }\n}\n","import { autorun, makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport { CourseModel } from \"../../models/CourseModel\";\nimport { FilterModel } from \"../../models/Filters/FilterModel\";\nimport { getCourseFilters, getProgramFilters, getSpecialisationFilters } from \"../../models/Filters/Filters\";\nimport { ProgramModel } from \"../../models/ProgramModel\";\nimport { SpecialisationModel } from \"../../models/SpecialisationModel\";\nimport { SearchDataState } from \"../../states/SearchDataState\";\n\nexport interface ISearchQuery<T> {\n  queryText: string,\n  filters: FilterModel<T>[],\n}\n\nexport interface ISearchResults {\n  courseSearchResults: CourseModel[],\n  programSearchResults: ProgramModel[],\n  specialisationSearchResults: SpecialisationModel[],\n}\n\nexport interface ISearchFilters {\n  courseFilters: FilterModel<CourseModel>[],\n  programFilters: FilterModel<ProgramModel>[],\n  specialisationFilters: FilterModel<SpecialisationModel>[],\n}\n\nexport enum SearchPanelItem {\n  COURSES,\n  PROGRAMS,\n  SPECIALISATIONS,\n}\n\nexport class SearchPanelViewModel {\n  constructor(\n    public readonly searchDataState: SearchDataState,\n  ) {\n    makeAutoObservable<SearchPanelViewModel>(this)\n\n    reaction(() => searchDataState.courseSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.courseFilters = getCourseFilters(searchDataState.courseSearchData)\n    }, {fireImmediately: true})\n\n    reaction(() => searchDataState.programSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.programFilters = getProgramFilters(searchDataState.programSearchData)\n    }, {fireImmediately: true})\n\n    reaction(() => searchDataState.specialisationSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.specialisationFilters = getSpecialisationFilters(searchDataState.specialisationSearchData)\n    }, {fireImmediately: true})\n\n    autorun(() => {\n      this.searchCourses()\n    });\n\n    autorun(() => {\n      this.searchPrograms()\n    });\n\n    autorun(() => {\n      this.searchSpecialisations()\n    });\n  }\n\n  public queryText: string = \"\"\n  public isLoading: boolean = true\n  public resultsPerPage: number = 10\n  public isInputActive: boolean = false\n  public searchFilters: ISearchFilters = {\n    courseFilters: [],\n    programFilters: [],\n    specialisationFilters: [],\n  }\n  public searchResults: ISearchResults = {\n    courseSearchResults: [],\n    programSearchResults: [],\n    specialisationSearchResults: [],\n  }\n  public activeItem: SearchPanelItem = SearchPanelItem.COURSES\n\n  public setActiveItem = (item: SearchPanelItem) => {\n    this.activeItem = item\n  }\n\n  get shouldShowPanel() {\n    return this.isInputActive || this.queryText.length > 0\n  }\n\n  setInputActive(isInputActive: boolean) {\n    this.isInputActive = isInputActive;\n  }\n\n  setQueryText(queryText: string) {\n    this.queryText = queryText\n  }\n\n  setIsLoading(isLoading: boolean) {\n    this.isLoading = isLoading\n  }\n\n  setResultsPerPage(resultsPerPage: number) {\n    this.resultsPerPage = resultsPerPage\n  }\n\n  searchCourses() {\n    let results = this.searchDataState.courseSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.courseSearchData\n        .filter(course => {\n          return course.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || course.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.courseFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.courseSearchResults = results)\n  }\n  \n\n  searchPrograms() {\n    let results = this.searchDataState.programSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.programSearchData\n        .filter(program => {\n          return program.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || program.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.programFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.programSearchResults = results)\n  }\n\n  searchSpecialisations() {\n    let results = this.searchDataState.specialisationSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.specialisationSearchData\n        .filter(specialisation => {\n          return specialisation.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || specialisation.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.specialisationFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.specialisationSearchResults = results)\n  }\n\n\n}\n","import { Observer, observer } from 'mobx-react';\nimport React, { useEffect, useCallback, useRef, useState } from 'react';\nimport styled from 'styled-components'\nimport { DragDropContext, DragStart, DropResult } from 'react-beautiful-dnd';\nimport { TermModel } from '../../models/TermModel';\nimport { ICourseGroup, PlannerViewModel } from './PlannerViewModel';\nimport CourseGroupView from './CourseGroupView/CourseGroupView';\nimport YearView from './YearView/YearView';\nimport { CourseModel, CourseStatus } from '../../models/CourseModel';\nimport { Menu, MenuItemProps, Popup } from 'semantic-ui-react';\nimport { Box, useSelectionContainer } from 'react-drag-to-select'\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n`\n\nconst YearPlanner = styled.div`\n  display: inherit;\n  overflow: auto;\n`\n\nexport interface IMultiSelectProps {\n  selectedCourses: ICourseGroup;\n  draggingCourseId?: string;\n  toggleSelection: (course: CourseModel) => void;\n  toggleSelectionInGroup: (course: CourseModel) => void;\n}\n\nexport interface IContextMenuProps {\n  getContextMenuItems: (course: CourseModel) => MenuItemProps[];\n  isAnyContextOpen: boolean;\n  setIsAnyContextOpen: (b: boolean) => void;\n  currentOpenContextStateSetter: React.MutableRefObject<any>;\n}\n\nexport interface IRegionSelectProps {\n  registerDraggable: (courseModel: CourseModel, ref: React.MutableRefObject<HTMLDivElement | null | undefined>) => void;\n  isRegionSelecting: boolean;\n}\n\nconst Planner = observer(({ plannerViewModel }: { [key: string]: PlannerViewModel }) => {\n  return <Observer>\n    {() => {\n      useEffect(() => {\n        window.addEventListener(\"keydown\", onWindowKeyDown);\n        window.addEventListener(\"contextmenu\", onWindowContextMenu);\n        window.addEventListener(\"dragenter\", onDragEnter);\n        window.addEventListener(\"dragexit\", onDragExit);\n        window.addEventListener(\"mouseup\", onMouseUp);\n\n        return () => {\n          window.removeEventListener(\"keydown\", onWindowKeyDown);\n          window.removeEventListener(\"contextmenu\", onWindowContextMenu);\n          window.removeEventListener(\"dragenter\", onDragEnter);\n          window.removeEventListener(\"dragexit\", onDragExit);\n          window.removeEventListener(\"mouseup\", onMouseUp);\n        }\n      });\n\n      const courseState = plannerViewModel.courseState;\n      const plannerState = plannerViewModel.plannerState;\n\n      // Drag region selection\n      const [isRegionSelecting, setIsRegionSelecting] = useState(false);\n      const draggableItemRef = useRef<Map<CourseModel, HTMLDivElement>>(new Map<CourseModel, HTMLDivElement>());\n      const linesRef = useRef<[CourseModel, [number, number, number][]][]>([]);\n\n      const registerDraggable = (courseModel: CourseModel, ref: React.MutableRefObject<HTMLDivElement | null | undefined>) => {\n        if (!ref.current) return;\n        draggableItemRef.current?.set(courseModel, ref.current);\n      }\n\n      const isIntersectingHorizontal = (box: Box, y: number, x1: number, x2: number): boolean => {\n        return (\n          (box.top <= y && y <= box.top + box.height) &&\n          (\n            (x1 <= box.left && box.left <= x2) ||\n            (x1 <= box.left + box.width && box.left + box.width <= x2)\n          )\n        )\n      }\n\n      const isIntersectingVertical = (box: Box, x: number, y1: number, y2: number): boolean => {\n        return (\n          (box.left <= x && x <= box.left + box.width) &&\n          (\n            (y1 <= box.top && box.top <= y2) ||\n            (y1 <= box.top + box.height && box.top + box.height <= y2)\n          )\n        )\n      }\n\n      const isInsideBox = (box: Box, x: number, y: number, _) => {\n        return (\n          box.left <= x && x <= box.left + box.width &&\n          box.top <= y && y <= box.top + box.height\n        )\n      }\n\n      const handleSelectionChange = useCallback((box: Box) => {\n        linesRef.current.reduce((previous: CourseModel[], [courseModel, lines]) => {\n          const isSelected: boolean = plannerViewModel.selectedGroup.courses.includes(courseModel);\n          const isIntersecting: boolean = (\n            isIntersectingHorizontal(box, ...lines[0]) ||\n            isIntersectingHorizontal(box, ...lines[1]) ||\n            isIntersectingVertical(box, ...lines[2]) ||\n            isIntersectingVertical(box, ...lines[3]) ||\n            isInsideBox(box, ...lines[4])\n          );\n\n          if (isSelected !== isIntersecting) return [...previous, courseModel];\n          else return previous;\n        }, []).forEach(toggleSelectionInGroup);\n      }, []);\n\n      const { DragSelection } = useSelectionContainer({\n        onSelectionStart: () => {\n          setIsRegionSelecting(true);\n          linesRef.current = [...draggableItemRef.current.entries()].reduce((previous: [CourseModel, [number, number, number][]][], [courseModel, div]) => {\n            const rect = div.getBoundingClientRect();\n            return [\n              ...previous,\n              [courseModel, [\n                [rect.top, rect.left, rect.right],\n                [rect.bottom, rect.left, rect.right],\n                [rect.left, rect.top, rect.bottom],\n                [rect.right, rect.top, rect.bottom],\n                [rect.x, rect.y, 0]\n              ]]\n            ];\n          }, []);\n        },\n        onSelectionChange: handleSelectionChange,\n        onSelectionEnd: () => {\n          linesRef.current = [];\n        }\n      });\n\n      // Dragging\n      const [isDragging, setIsDragging] = React.useState(false);\n      const onDragStart = (initial: DragStart) => {\n        setIsDragging(true);\n        const selected: CourseModel | undefined = plannerViewModel.selectedGroup.courses.find(\n          (course: CourseModel): boolean => course.id === initial.draggableId,\n        );\n\n        if (!selected) plannerViewModel.unselectAllCourses();\n\n        plannerViewModel.draggingCourseId = initial.draggableId;\n\n        const course = courseState.getCourseById(initial.draggableId);\n\n        if (!course) return;\n\n        // Don't calculate validations if we are multi selecting\n        if (plannerViewModel.selectedGroup.courses.length > 1) return;\n\n        plannerViewModel.currentDraggableProps = {\n          ...plannerViewModel.currentDraggableProps,\n          possibleTerms: plannerViewModel.calculateDisplayableTerms().filter(term => {\n            return courseState.getMissingRequirementsWhenAssigningCourseToTerm(course, term).length === 0\n          }),\n          prerequisiteCourseIds: new Set<string>(courseState.getFlattenedPrerequisiteList(course.prerequisites))\n        }\n      }\n\n      const onDragEnd = (result: DropResult) => {\n        const { destination, source } = result;\n        if (!destination || result.reason === \"CANCEL\") {\n          plannerViewModel.draggingCourseId = undefined;\n          return;\n        }\n        if (!plannerViewModel.draggingCourseId) return;\n\n        plannerViewModel.selectedGroup.courses.forEach((course: CourseModel) =>\n          plannerViewModel.setCourseByDroppableId(course, source.droppableId, destination.droppableId, draggableItemRef.current)\n        );\n\n        const allGroups = plannerViewModel.getAllGroups();\n        allGroups.forEach((group: ICourseGroup) => {\n          group.courses = group.courses.filter((courseInGroup: CourseModel) =>\n            !plannerViewModel.selectedGroup.courses.find((selectedCourse: CourseModel) =>\n              selectedCourse.id === courseInGroup.id\n            )\n          )\n        })\n        plannerViewModel.spliceByGroupId(destination.droppableId, destination.index, 0, ...plannerViewModel.selectedGroup.courses)\n\n        const draggingCourseIsSelected: boolean = !!plannerViewModel.selectedGroup.courses.find((courseModel) => {\n          return courseModel.id === plannerViewModel.draggingCourseId;\n        });\n        if (!draggingCourseIsSelected) {\n          const courseModel = courseState.getCourseById(plannerViewModel.draggingCourseId);\n          if (courseModel) {\n            plannerViewModel.setCourseByDroppableId(courseModel, source.droppableId, destination.droppableId, draggableItemRef.current);\n            plannerViewModel.spliceByGroupId(source.droppableId, source.index, 1);\n            plannerViewModel.spliceByGroupId(destination.droppableId, destination.index + plannerViewModel.selectedGroup.courses.length, 0, courseModel);\n          }\n        }\n\n        plannerViewModel.draggingCourseId = undefined;\n\n        setIsDragging(false);\n\n        plannerViewModel.synchronizePlannerState()\n        plannerViewModel.clearCurrentDraggableProps()\n      }\n\n      const onBeforeCapture = () => {\n        plannerViewModel.currentDraggableProps = {\n          ...plannerViewModel.currentDraggableProps,\n          isDragging: true,\n        }\n      }\n\n      // Multi select\n      const onWindowKeyDown = (event: KeyboardEvent) => {\n        if (event.defaultPrevented) return;\n\n        if (event.key === \"Escape\") plannerViewModel.unselectAllCourses();\n      }\n\n      const onMouseUp = (event: MouseEvent) => {\n        if (isAnyContextOpen) return;\n\n        if (isDragging) return;\n\n        event.preventDefault();\n\n        if (isRegionSelecting) {\n          setIsRegionSelecting(false);\n          return;\n        }\n\n        if (event.button !== 0) return;\n        if (event.ctrlKey) return;\n\n        plannerViewModel.unselectAllCourses();\n      }\n\n      const onDragEnter = (event) => {\n        event.preventDefault();\n      }\n\n      const onDragExit = (event) => {\n        event.preventDefault();\n      }\n\n      const toggleSelection = (course: CourseModel) => {\n        const selectedCourses = plannerViewModel.selectedGroup;\n        const wasSelected: boolean = selectedCourses.courses.includes(course);\n\n        const newCourses = (() => {\n          // Task not previously selected or part of the selected group, now the only selected item\n          if (!wasSelected || selectedCourses.courses.length > 1) {\n            return [course];\n          }\n\n          // Task previously selected but not in a group, clear the selection\n          return [];\n        })();\n\n        plannerViewModel.selectCourses(newCourses);\n      }\n\n      const toggleSelectionInGroup = (course: CourseModel) => {\n        const selectedCourses = plannerViewModel.selectedGroup;\n        const index: number = selectedCourses.courses.indexOf(course);\n\n        // if not selected - add it to the selected items\n        if (index === -1) {\n          plannerViewModel.selectCourses([...selectedCourses.courses, course]);\n          return;\n        }\n\n        // it was previously selected and now needs to be removed from the group\n        const newCourses: CourseModel[] = [...selectedCourses.courses];\n        newCourses.splice(index, 1);\n        plannerViewModel.selectCourses(newCourses);\n      };\n\n      // Context Menu\n      const getContextMenuItems = (course?: CourseModel) => {\n        const areMultipleItems = plannerViewModel.selectedGroup.courses.length > 1;\n        let menuItems: MenuItemProps[] = [\n          {\n            key: 'remove',\n            content: `Remove ${areMultipleItems ? \"all courses\" : \"course\"}`,\n            icon: 'delete calendar',\n            onClick: () => plannerViewModel.moveCourseToRemoved(draggableItemRef.current, course)\n          },\n          {\n            key: 'plan',\n            content: `Move ${areMultipleItems ? \"all courses\" : \"course\"} to planned`,\n            icon: 'bookmark',\n            onClick: () => plannerViewModel.moveCourseToPlanned(course)\n          },\n          {\n            key: 'complete',\n            content: `Move ${areMultipleItems ? \"all courses\" : \"course\"} to completed`,\n            icon: 'checked calendar',\n            onClick: () => plannerViewModel.moveCourseToCompleted(course)\n          },\n        ];\n        if (course) {\n          if (course.courseStatus === CourseStatus.UNPLANNED) {\n            menuItems.splice(0, 1);\n          } else if (course.courseStatus === CourseStatus.PLANNED) {\n            menuItems.splice(1, 1);\n          } else if (course.courseStatus === CourseStatus.COMPLETED) {\n            menuItems.splice(2, 1);\n          }\n        }\n        return menuItems;\n      }\n\n      const [isAnyContextOpen, setIsAnyContextOpen] = React.useState(false);\n      const [isWindowContextOpen, setIsWindowContextOpen] = React.useState(false);\n\n      const currentOpenContextStateSetter = React.useRef<React.Dispatch<React.SetStateAction<boolean>>>();\n\n      const contextRef = React.useRef<any>();\n\n      const onWindowContextMenu = (event) => {\n        if (event.defaultPrevented) return;\n\n        // Don't use context when no items selected. Possibly change this.\n        if (plannerViewModel.selectedGroup.courses.length === 0) return;\n\n        event.preventDefault();\n\n        if (isAnyContextOpen && currentOpenContextStateSetter.current) {\n          currentOpenContextStateSetter.current(false);\n        }\n\n        currentOpenContextStateSetter.current = setIsWindowContextOpen;\n\n        contextRef.current = {\n          getBoundingClientRect: () => ({\n            left: event.clientX,\n            top: event.clientY,\n            right: event.clientX + 1,\n            bottom: event.clientY + 1,\n            height: 0,\n            width: 0,\n          }),\n        }\n        setIsAnyContextOpen(true)\n        setIsWindowContextOpen(true)\n      }\n\n      const multiSelectProps: IMultiSelectProps = {\n        selectedCourses: plannerViewModel.selectedGroup,\n        draggingCourseId: plannerViewModel.draggingCourseId,\n        toggleSelection: toggleSelection,\n        toggleSelectionInGroup: toggleSelectionInGroup,\n      };\n\n      const contextMenuProps: IContextMenuProps = {\n        getContextMenuItems: getContextMenuItems,\n        isAnyContextOpen: isAnyContextOpen,\n        setIsAnyContextOpen: setIsAnyContextOpen,\n        currentOpenContextStateSetter: currentOpenContextStateSetter,\n      }\n\n      const regionSelectProps: IRegionSelectProps = {\n        registerDraggable: registerDraggable,\n        isRegionSelecting: isRegionSelecting,\n      }\n\n      return (\n        <React.Fragment>\n          <DragSelection />\n          <Popup\n            basic\n            context={contextRef}\n            onClose={() => {\n              setIsAnyContextOpen(false)\n              setIsWindowContextOpen(false)\n            }}\n            open={isWindowContextOpen}\n          >\n            <Menu\n              items={getContextMenuItems()}\n              onItemClick={(e) => {\n                e.preventDefault();\n                setIsAnyContextOpen(false)\n                setIsWindowContextOpen(false)\n              }}\n              secondary\n              vertical\n            />\n          </Popup>\n          <DragDropContext\n            onBeforeCapture={onBeforeCapture}\n            onDragStart={onDragStart}\n            onDragEnd={onDragEnd}\n          >\n            {\n              <CourseGroupView\n                horizontal={true}\n                key={plannerState.completedGroup.id}\n                id={plannerState.completedGroup.id}\n                title={plannerState.completedGroup.title}\n                term={null}\n                courses={plannerState.completedGroup.courses}\n                currentDraggableProps={plannerViewModel.currentDraggableProps}\n                multiSelect={multiSelectProps}\n                contextMenu={contextMenuProps}\n                regionSelect={regionSelectProps}\n              />\n            }\n            <Container>\n              {\n                <CourseGroupView\n                  horizontal={false}\n                  key={plannerState.plannedGroup.id}\n                  id={plannerState.plannedGroup.id}\n                  title={plannerState.plannedGroup.title}\n                  term={null}\n                  courses={plannerState.plannedGroup.courses}\n                  currentDraggableProps={plannerViewModel.currentDraggableProps}\n                  multiSelect={multiSelectProps}\n                  contextMenu={contextMenuProps}\n                  regionSelect={regionSelectProps}\n                />\n              }\n              <YearPlanner>\n                {\n                  plannerState.yearGroups.map(yearGroup => {\n                    return <YearView\n                      id={yearGroup.id}\n                      title={yearGroup.title}\n                      year={yearGroup.year}\n                      courseGroups={yearGroup.courseGroups}\n                      currentDraggableProps={plannerViewModel.currentDraggableProps}\n                      multiSelect={multiSelectProps}\n                      contextMenu={contextMenuProps}\n                      regionSelect={regionSelectProps}\n                    />\n                  })\n                }\n              </YearPlanner>\n            </Container>\n            {\n              plannerViewModel.currentDraggableProps.isDragging\n                ?\n                <CourseGroupView\n                  horizontal={true}\n                  key={\"trash\"}\n                  id={\"trash\"}\n                  title={\"Remove\"}\n                  term={null}\n                  courses={[]}\n                  currentDraggableProps={plannerViewModel.currentDraggableProps}\n                  multiSelect={multiSelectProps}\n                  contextMenu={contextMenuProps}\n                  regionSelect={regionSelectProps}\n                />\n                : <></>\n            }\n          </DragDropContext>\n        </React.Fragment>\n      )\n    }}\n  </Observer >\n})\n\nexport default Planner;\n","import { action, computed, makeObservable, observable } from \"mobx\";\nimport { CourseModel, CourseStatus } from \"../../models/CourseModel\";\nimport { TermModel } from \"../../models/TermModel\";\nimport { CourseState } from \"../../states/CourseState\";\n\nexport interface ICourseGroup {\n  id: string,\n  title: string,\n  term: TermModel | null,\n  courses: CourseModel[],\n}\n\nexport interface IYearGroup {\n  id: string,\n  year: number\n  title: string,\n  courseGroups: ICourseGroup[],\n}\n\nexport interface IPlannerState {\n  id: string,\n  title: string,\n  allocatedGroups: ICourseGroup[],\n  yearGroups: IYearGroup[],\n  completedGroup: ICourseGroup,\n  plannedGroup: ICourseGroup,\n}\n\nexport interface ICurrentDraggableProps {\n  isDragging: boolean,\n  possibleTerms: TermModel[]\n  prerequisiteCourseIds: Set<string>\n}\n\nexport class PlannerViewModel {\n  constructor(courseState: CourseState) {\n    makeObservable<PlannerViewModel,\n      \"_currentDraggableProps\"\n    >(this, {\n      _currentDraggableProps: observable,\n      currentDraggableProps: computed,\n      clearCurrentDraggableProps: action,\n    })\n\n    this._courseState = courseState\n    this._plannerState = {\n      id: \"plannerState\",\n      title: \"Visualizer\",\n      allocatedGroups: [],\n      yearGroups: [],\n      completedGroup: {\n        id: \"completed\",\n        title: \"Completed\",\n        term: null,\n        courses: [],\n      },\n      plannedGroup: {\n        id: \"planned\",\n        title: \"Planned\",\n        term: null,\n        courses: [],\n      },\n    }\n\n    makeObservable<PlannerViewModel,\n      \"_selectedGroup\"\n    >(this, {\n      _selectedGroup: observable,\n      selectedGroup: computed,\n    });\n\n    makeObservable<PlannerViewModel,\n      \"_draggingCourseId\"\n    >(this, {\n      _draggingCourseId: observable,\n      draggingCourseId: computed,\n    });\n  }\n\n  private _courseState: CourseState\n  get courseState(): CourseState {\n    return this._courseState\n  }\n\n  private _plannerState: IPlannerState\n  get plannerState(): IPlannerState {\n    this.synchronizePlannerState()\n    return this._plannerState\n  }\n\n  //#region selectedGroup\n\n  private _selectedGroup: ICourseGroup = {\n    id: \"selected\",\n    title: \"Selected\",\n    term: null,\n    courses: [],\n  };\n  get selectedGroup(): ICourseGroup {\n    return this._selectedGroup;\n  }\n  set selectedGroup(state: ICourseGroup) {\n    this._selectedGroup = state;\n  }\n\n  //#endregion\n\n  setCourseByDroppableId(course: CourseModel, sourceDroppableId: string, destDroppableId: string, draggableItemMap: Map<CourseModel, HTMLDivElement>) {\n    if (sourceDroppableId === destDroppableId) return;\n\n    if (destDroppableId === \"trash\") {\n      course.setUnplanned()\n      draggableItemMap.delete(course);\n    } else if (destDroppableId === \"completed\") {\n      course.setCompleted()\n    } else if (destDroppableId === \"planned\") {\n      course.setPlanned()\n    } else {\n      course.setAllocated(TermModel.fromMappingName(destDroppableId))\n    }\n  }\n\n  unselectAllCourses() {\n    this.selectedGroup = {\n      ...this.selectedGroup,\n      courses: [],\n    };\n  }\n\n  selectCourses(courses: CourseModel[]) {\n    this.selectedGroup = {\n      ...this.selectedGroup,\n      courses: courses,\n    };\n  }\n\n  moveSelectedToRemoved(draggableItemMap: Map<CourseModel, HTMLDivElement>) {\n    this.selectedGroup.courses.filter((courseModel: CourseModel) => {\n      return courseModel.courseStatus !== CourseStatus.UNPLANNED;\n    }).forEach((courseModel: CourseModel) => {\n      courseModel.setUnplanned();\n      draggableItemMap.delete(courseModel);\n    });\n    this.unselectAllCourses();\n  }\n\n  moveCourseToRemoved(draggableItemMap: Map<CourseModel, HTMLDivElement>, course?: CourseModel) {\n    if (!course) {\n      this.moveSelectedToRemoved(draggableItemMap);\n      return;\n    }\n\n    if (course.courseStatus !== CourseStatus.UNPLANNED) {\n      course.setUnplanned();\n      draggableItemMap.delete(course);\n    }\n\n    if (this.selectedGroup.courses.includes(course)) {\n      this.moveSelectedToRemoved(draggableItemMap);\n    }\n\n    this.synchronizePlannerState();\n  }\n\n  moveSelectedToPlanned() {\n    this.selectedGroup.courses.filter((courseModel: CourseModel) =>\n      courseModel.courseStatus !== CourseStatus.PLANNED\n    ).forEach(courseModel => courseModel.setPlanned());\n  }\n\n  moveCourseToPlanned(course?: CourseModel) {\n    if (!course) {\n      this.moveSelectedToPlanned();\n      return;\n    }\n\n    if (course.courseStatus !== CourseStatus.PLANNED) {\n      course.setPlanned();\n    }\n\n    if (this.selectedGroup.courses.includes(course)) {\n      this.moveSelectedToPlanned();\n    }\n\n    this.synchronizePlannerState();\n  }\n\n  moveSelectedToCompleted() {\n    this.selectedGroup.courses.filter((courseModel: CourseModel) =>\n      courseModel.courseStatus !== CourseStatus.COMPLETED\n    ).forEach(courseModel => courseModel.setCompleted());\n  }\n\n  moveCourseToCompleted(course?: CourseModel) {\n    if (!course) {\n      this.moveSelectedToCompleted();\n      return;\n    }\n\n    if (course.courseStatus !== CourseStatus.COMPLETED) {\n      course.setCompleted();\n    }\n\n    if (this.selectedGroup.courses.includes(course)) {\n      this.moveSelectedToCompleted();\n    }\n\n    this.synchronizePlannerState();\n  }\n\n  //#region draggingCourseId\n\n  private _draggingCourseId: undefined | string = undefined;\n  get draggingCourseId(): undefined | string {\n    return this._draggingCourseId;\n  }\n  set draggingCourseId(id: undefined | string) {\n    this._draggingCourseId = id;\n  }\n\n  //#endregion\n\n  private synchronizeCourseList(referenceCourses: CourseModel[], targetCourses: CourseModel[]): void {\n    let expectedCourses = new Set(referenceCourses)\n    let actualCourses = new Set(targetCourses)\n\n    let coursesToRemove = new Set([...actualCourses].filter(course => !expectedCourses.has(course)))\n    let coursesToAdd = new Set([...expectedCourses].filter(course => !actualCourses.has(course)))\n\n    coursesToRemove.forEach(course => {\n      let index = targetCourses.indexOf(course)\n      targetCourses.splice(index, 1)\n    })\n\n    coursesToAdd.forEach(course => {\n      targetCourses.push(course)\n    })\n  }\n\n  calculateDisplayableTerms(): TermModel[] {\n    let maxAllocatedYear = this._courseState.getMaxAllocatedYear\n    const currentYear = new Date().getFullYear()\n    let displayableTerms: TermModel[] = []\n    for (let year: number = currentYear; year <= maxAllocatedYear + 1; ++year) {\n      displayableTerms.push(new TermModel(year, \"Summer Term\"))\n      displayableTerms.push(new TermModel(year, \"Term 1\"))\n      displayableTerms.push(new TermModel(year, \"Term 2\"))\n      displayableTerms.push(new TermModel(year, \"Term 3\"))\n    }\n    return displayableTerms\n  }\n\n  synchronizePlannerState(): void {\n    const displayableTerms = this.calculateDisplayableTerms()\n    const uniqueYears = [...new Set(displayableTerms.map(term => term.year))].sort()\n    const allocatedGroups: ICourseGroup[] = displayableTerms.map((term: TermModel) => {\n      return {\n        id: term.getMappingName,\n        title: term.getFullName,\n        term: term,\n        courses: this._plannerState.allocatedGroups.find(group => group.id === term.getMappingName)?.courses ?? [],\n      }\n    })\n    let newPlannerState: IPlannerState = {\n      ...this._plannerState,\n      allocatedGroups: allocatedGroups,\n      yearGroups: uniqueYears.map((year: number) => {\n        return {\n          id: `yearGroup_${year.toString()}`,\n          title: year.toString(),\n          year: year,\n          courseGroups: allocatedGroups.filter(group => group.term?.year === year) ?? [],\n        }\n      }),\n    }\n\n    newPlannerState.allocatedGroups.forEach((courseGroup: ICourseGroup) => {\n      this.synchronizeCourseList(this._courseState.termCourseMap.get(courseGroup.id) ?? [], courseGroup.courses)\n    })\n\n    newPlannerState.yearGroups.forEach(yearGroup => {\n      yearGroup.courseGroups.forEach((courseGroup: ICourseGroup) => {\n        this.synchronizeCourseList(this._courseState.termCourseMap.get(courseGroup.id) ?? [], courseGroup.courses)\n      })\n    })\n\n    this.synchronizeCourseList(this._courseState.plannedCourses, newPlannerState.plannedGroup.courses)\n    this.synchronizeCourseList(this._courseState.completedCourses, newPlannerState.completedGroup.courses)\n    this._plannerState = newPlannerState\n  }\n\n  private getCourseGroupById(groupId: string): ICourseGroup | undefined {\n    if (this._plannerState.completedGroup.id === groupId) {\n      return this._plannerState.completedGroup\n    } else if (this._plannerState.plannedGroup.id === groupId) {\n      return this._plannerState.plannedGroup\n    } else {\n      return this._plannerState.allocatedGroups.find(group => group.id === groupId)\n    }\n  }\n\n  getAllGroups(): ICourseGroup[] {\n    return [this._plannerState.completedGroup, this._plannerState.plannedGroup, ...this._plannerState.allocatedGroups];\n  }\n\n  spliceByGroupId(droppableId: string, start: number, deleteCount?: number): CourseModel[];\n\n  spliceByGroupId(droppableId: string, start: number, deleteCount: number, ...items: CourseModel[]): CourseModel[];\n\n  spliceByGroupId(droppableId: string, start: number, deleteCount?: number, ...items: CourseModel[]): CourseModel[] {\n    const group = this.getCourseGroupById(droppableId);\n    if (!group) return [];\n\n    if (deleteCount) {\n      return group.courses.splice(start, deleteCount, ...items)\n    } else {\n      return group.courses.splice(start, 0, ...items);\n    }\n  }\n\n  //#region currentDraggableProps\n\n  private _currentDraggableProps: ICurrentDraggableProps = {\n    isDragging: false,\n    possibleTerms: [],\n    prerequisiteCourseIds: new Set<string>(),\n  }\n\n  get currentDraggableProps(): ICurrentDraggableProps {\n    return { ...this._currentDraggableProps }\n  }\n\n  set currentDraggableProps(props: ICurrentDraggableProps) {\n    this._currentDraggableProps = props;\n  }\n\n  clearCurrentDraggableProps(): void {\n    this.currentDraggableProps = {\n      isDragging: false,\n      possibleTerms: [],\n      prerequisiteCourseIds: new Set<string>(),\n    }\n  }\n\n  //#endregion\n\n}\n","import { ConditionalTree, isAndConditionalTree, isOrConditionalTree } from \"../interfaces/ModelInterfaces\";\n\n\nexport const conditionalTreeTraverser = (\n  treeNode: ConditionalTree,\n  fnIsLeafValid: (treeNode: ConditionalTree) => boolean,\n): string[] => {\n  let invalidations: string[] = [];\n\n  if (isOrConditionalTree(treeNode)) {\n    for (let childNode of treeNode.or) {\n      let result = conditionalTreeTraverser(childNode, fnIsLeafValid)\n      if (result.length === 0) {\n        invalidations = []\n        break\n      }\n      invalidations.push(...result)\n    }\n  } else if (isAndConditionalTree(treeNode)) {\n    treeNode.and.forEach(childNode => {\n      invalidations.push(...conditionalTreeTraverser(childNode, fnIsLeafValid))\n    })\n  } else if (!fnIsLeafValid(treeNode)) {\n    invalidations.push(treeNode)\n  }\n  // console.log(treeNode)\n  // console.log(invalidations)\n  return invalidations\n}\n","import { action, makeAutoObservable, reaction, transaction, when } from \"mobx\";\nimport { conditionalTreeTraverser } from '../helpers/ConditionalTreeTraverser';\nimport { ConditionalTree, StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { CourseModel, CourseStatus } from \"../models/CourseModel\";\nimport { SerializedCourseState, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\nimport { TermModel } from \"../models/TermModel\";\nimport { getCourseValidations } from \"../models/Validations/Validations\";\nimport { UserState } from \"./UserState\";\nimport axios from \"axios\"\n\nexport class CourseState implements ISerializableEntity {\n  constructor(\n    private _userState: UserState\n  ) {\n    makeAutoObservable(this)\n    reaction(\n      () => this._userState.studyLevel,\n      () => {\n        this._isUpdated = false;\n        this._updateStudyLevel()\n          // .then(() => {\n          //   // this.getCourseById(\"COMP1511\")?.setCompleted()\n    \n          //   this.getCourseById(\"COMP1521\")?.setPlanned()\n    \n          //   this.getCourseById(\"COMP3231\")?.setPlanned()\n          //   let COMP9444 = this.getCourseById(\"COMP9444\")\n          //   if (COMP9444) {\n          //     this.assignCourseToTerm(COMP9444, new TermModel(2021, \"Term 3\"))\n          //   }\n          //   let MATH1081 = this.getCourseById(\"MATH1081\")\n          //   if (MATH1081) {\n          //     this.assignCourseToTerm(MATH1081, new TermModel(2021, \"Term 2\"))\n          //   }\n          //   let COMP2041 = this.getCourseById(\"COMP2041\")\n          //   if (COMP2041) {\n          //     this.assignCourseToTerm(COMP2041, new TermModel(2021, \"Term 2\"))\n          //   }\n          //   let COMP9417 = this.getCourseById(\"COMP9417\")\n          //   if (COMP9417) {\n          //     this.assignCourseToTerm(COMP9417, new TermModel(2022, \"Term 3\"))\n          //   }\n          //   let MATH1231 = this.getCourseById(\"MATH1231\")\n          //   if (MATH1231) {\n          //     this.assignCourseToTerm(MATH1231, new TermModel(2021, \"Term 3\"))\n          //   }\n          // })\n      },\n      { fireImmediately: true }\n    );\n    _userState.registerStudyLevelUpdateActionCallback(() => Promise.resolve(this._updateStudyLevel()));\n  }\n\n  private validations = getCourseValidations(this)\n\n  private coursesMapById = new Map<string, CourseModel>();\n\n  private coursesMapByActiveStatus = new Map<CourseStatus, Map<string, CourseModel>>();\n\n  private _isUpdated: boolean = false;\n\n  get isUpdated(): boolean {\n    return this._isUpdated;\n  }\n\n  get allCourses() {\n    return [...this.coursesMapById.values()]\n  }\n\n  private _resetCourseMap() {\n    this.coursesMapById = new Map<string, CourseModel>();\n    this.coursesMapByActiveStatus = new Map<CourseStatus, Map<string, CourseModel>>();\n    this.coursesMapByActiveStatus.set(CourseStatus.UNPLANNED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.PLANNED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.ALLOCATED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.COMPLETED, new Map<string, CourseModel>());\n  }\n\n  private async _loadAllCourses(studyLevel: StudyLevel) {\n    return axios.get(`https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_courses.json`)\n      .then(response => {\n        transaction(() => {\n          this._resetCourseMap()\n          response.data.forEach(courseObj => {\n            let course = new CourseModel(\n              courseObj.code,\n              courseObj.contentTypeLabel,\n              courseObj.corequisites,\n              courseObj.creditPoints,\n              courseObj.description,\n              courseObj.effectiveDate,\n              courseObj.enrolmentRules,\n              courseObj.exclusion,\n              courseObj.facultyName,\n              courseObj.implementationYear,\n              courseObj.keywords,\n              courseObj.prerequisites,\n              courseObj.schoolName,\n              courseObj.studyLevel,\n              courseObj.termOffering,\n              courseObj.title,\n              courseObj.urlMap,\n            )\n\n            this.addCourse(course)\n          })\n        })\n    });\n  }\n\n  private async _updateStudyLevel() {\n    await this._loadAllCourses(this._userState.studyLevel);\n    this._isUpdated = true;\n  }\n\n  get termCourseMap(): Map<string, CourseModel[]> {\n    // console.log('running mapping')\n    let mapping = new Map<string, CourseModel[]>();\n    this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.forEach(course => {\n      if (!course.allocatedTerm) {\n        return;\n      }\n      let courseList = mapping.get(course.allocatedTerm.getMappingName)\n      if (!courseList) {\n        mapping.set(course.allocatedTerm.getMappingName, [course])\n      } else {\n        courseList.push(course)\n      }\n    })\n    return mapping\n  }\n\n  get completedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.COMPLETED)?.values() ?? []]\n  }\n\n  get plannedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.PLANNED)?.values() ?? []]\n  }\n\n  get allocatedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.values() ?? []]\n  }\n\n  get activeCourses(): CourseModel[] {\n    let allCourses: CourseModel[] = [];\n    allCourses = allCourses.concat(this.completedCourses, this.plannedCourses, this.allocatedCourses);\n    return allCourses;\n  }\n\n  get getMaxAllocatedYear(): number {\n    const uniqueTerms = [...this.termCourseMap.keys()]\n    let maxYear = new Date().getFullYear()\n    if (uniqueTerms.length > 0) {\n      maxYear = TermModel.fromMappingName(uniqueTerms.sort().slice(-1)[0]).year\n    }\n    return maxYear\n  }\n\n  getCourseById(id: string): CourseModel | undefined {\n    return this.coursesMapById.get(id)\n  }\n\n  addCourse(course: CourseModel) {\n    this.coursesMapById.set(course.id, course);\n    reaction(() => course.courseStatus, () => {\n      for (let courseStatusEnum in CourseStatus) {\n        if (!isNaN(Number(courseStatusEnum))) continue\n        const courseStatus: CourseStatus = CourseStatus[courseStatusEnum as keyof typeof CourseStatus]\n        if (courseStatus !== course.courseStatus) {\n          this.coursesMapByActiveStatus.get(courseStatus)?.delete(course.id)\n        } else {\n          this.coursesMapByActiveStatus.get(courseStatus)?.set(course.id, course)\n        }\n      }\n    }, {\n      fireImmediately: true,\n    })\n\n    reaction(() => course.courseStatus, () => {\n      this.runValidations();\n    }, {\n      fireImmediately: true,\n    })\n\n    reaction(() => course.allocatedTerm, () => {\n      this.runValidations();\n    }, {\n      fireImmediately: true,\n    })\n  }\n\n  runValidations() {\n    transaction(() => {\n      this.coursesMapByActiveStatus.get(CourseStatus.PLANNED)?.forEach(_course => {\n        _course.clearErrors()\n        this.validations.forEach(fnValidate => {\n          fnValidate(_course)\n        })\n      })\n      this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.forEach(_course => {\n        _course.clearErrors()\n        this.validations.forEach(fnValidate => {\n          fnValidate(_course)\n        })\n      })\n      this.coursesMapByActiveStatus.get(CourseStatus.COMPLETED)?.forEach(_course => {\n        _course.clearErrors()\n      })\n    })\n  }\n\n  private resetHard() {\n    [...this.coursesMapById.values()].forEach((course) => {\n      course.setUnplanned();\n    });\n  }\n\n  getFlattenedPrerequisiteList(prerequisiteTree: ConditionalTree) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      return false\n    })\n  }\n\n  getMissingPrerequisitesBeforeTerm(prerequisiteTree: ConditionalTree, term: TermModel) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      if (typeof (treeNode) === 'string') {\n        const courseCode: string = treeNode;\n        const course = this.getCourseById(courseCode)\n\n        return course\n          ? ((course.courseStatus === CourseStatus.ALLOCATED && course.allocatedTerm?.isBefore(term))\n            || course.courseStatus === CourseStatus.COMPLETED)\n          : false\n      }\n      return true\n    })\n  }\n\n  getMissingPrerequisitesPlanned(prerequisiteTree: ConditionalTree) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      if (typeof (treeNode) === 'string') {\n        const courseCode: string = treeNode;\n        const course = this.getCourseById(courseCode)\n        return course\n          ? course.courseStatus !== CourseStatus.UNPLANNED\n          : false\n      }\n      return true\n    })\n  }\n\n  courseIsOffered(term: TermModel, termOffering: string[]): boolean {\n    for (let i = 0; i < termOffering.length; i++) {\n      if (term.getTermName === termOffering[i]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getMissingRequirementsWhenAssigningCourseToTerm(course: CourseModel, term: TermModel): string[] {\n    let resp: string[] = this.getMissingPrerequisitesBeforeTerm(course.prerequisites, term)\n\n    // term = current term input, termOffering = List of avaliable terms\n    if (!this.courseIsOffered(term, course.termOffering)) {\n      resp.push(`Course is not offered in ${term.getFullName}`)\n    }\n\n    return resp\n  }\n\n  assignCourseToTerm(course: CourseModel, term: TermModel): boolean {\n    const invalidations = this.getMissingRequirementsWhenAssigningCourseToTerm(course, term)\n    if (invalidations.length === 0) {\n      course.setAllocated(term)\n      return true\n    }\n\n    return false\n  }\n\n  serialize(): SerializedCourseState {\n    return {\n      courses: this.activeCourses.map((courseModel) => {\n        return courseModel.serialize();\n      })\n    }\n  }\n\n  async deserialize(json: TermtanglesSerialized): Promise<void> {\n    if (!json.courseState) {\n      return;\n    }\n\n    const serializedCourseState = json.courseState;\n    if (!serializedCourseState.courses) {\n      return;\n    }\n\n    await when(() => { return this._isUpdated; })\n\n    this.resetHard();\n\n    serializedCourseState.courses.forEach((serializedCourse) => {\n      if (!serializedCourse.id) return;\n\n      const courseModel = this.getCourseById(serializedCourse.id);\n      if (courseModel) {\n        courseModel.deserialize(serializedCourse);\n      } else {\n        console.error(`ERROR: ${serializedCourse.id} is not a valid course.`);\n      }\n    });\n  }\n}\n","import { ErrorCode } from \"../../interfaces/ModelInterfaces\"\nimport { CourseState } from \"../../states/CourseState\"\nimport { CourseModel, CourseStatus } from \"../CourseModel\"\n\nexport const getCourseValidations = (courseState: CourseState): ((course: CourseModel) => void)[] => {\n  const validations = [\n    (course: CourseModel) => {\n      // console.log(`Running validation COURSE_NOT_OFFERED_IN_SELECTED_TERM on course ${course.code}`)\n      if (course.allocatedTerm && !course.termOffering.includes(course.allocatedTerm.getTermName)) {\n        course.addError({\n          code: ErrorCode.COURSE_NOT_OFFERED_IN_SELECTED_TERM,\n          message: `This course is not offered in ${course.allocatedTerm.getTermName}`,\n          missing: \"\"\n        })\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation PREREQUISITE_REQUIREMENT_NOT_MET on course ${course.code}`)\n      if (course.allocatedTerm) {\n        let missing = courseState.getMissingPrerequisitesBeforeTerm(course.prerequisites, course.allocatedTerm)\n        if (missing.length > 0) {\n          course.addError({\n            code: ErrorCode.PREREQUISITE_REQUIREMENT_NOT_MET,\n            message: `The prerequisites for this course are not satisfied\\n${course.enrolmentRules.join(\";\")}`,\n            missing: `Missing: ${missing}`\n          })\n        }\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation PREREQUISITES_NOT_PLANNED on course ${course.code}`)\n      if (course.courseStatus !== CourseStatus.ALLOCATED) {\n        let missing = courseState.getMissingPrerequisitesPlanned(course.prerequisites)\n        if (missing.length > 0) {\n          course.addError({\n            code: ErrorCode.PREREQUISITES_NOT_PLANNED,\n            message: `A valid combination of prerequisites for this course have not been planned\\n${course.enrolmentRules.join(\";\")}`,\n            missing: `Missing: ${missing}`\n          })\n        }\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation EXCLUSION_COURSE_CONFLICT on course ${course.code}`)\n      let conflictingExclusionCourses: string[] = []\n      course.exclusion.forEach((exclusionCourseCode) => {\n        let exclusionCourse = courseState.getCourseById(exclusionCourseCode)\n        if (exclusionCourse && exclusionCourse.courseStatus !== CourseStatus.UNPLANNED) {\n          conflictingExclusionCourses.push(exclusionCourseCode)\n        }\n      })\n      if (conflictingExclusionCourses.length > 0) {\n        course.addError({\n          code: ErrorCode.EXCLUSION_COURSE_CONFLICT,\n          message: `The following exclusion courses conflict with this course ${conflictingExclusionCourses.join(\", \")}`,\n          missing: \"\"\n        })\n      }\n    }\n  ]\n  return validations\n}\n","import { ICurriculumContainer, ICurriculumElement } from \"../interfaces/ModelInterfaces\";\nimport {v4 as uuidv4} from 'uuid';\n\nexport class CurriculumContainer implements ICurriculumContainer {\n    public readonly id: string = uuidv4();\n    constructor(\n        public readonly title: string,\n        public readonly description: string,\n        public readonly creditPoints: number,\n        public readonly elements: ICurriculumElement[],\n        public readonly containers: ICurriculumContainer[],\n        public readonly order: number,\n    ) {\n    }\n\n    toString() {\n        return this.title + ', ' + this.description;\n    }\n}\n\nexport class CurriculumElement implements ICurriculumElement {\n    constructor(\n        public readonly name: string,\n        public readonly description: string,\n        public readonly type: string,\n        public readonly creditPoints: number,\n        public readonly itemCode: string,\n        public readonly url: string,\n        public readonly order: number,\n    ) { }\n\n    public isCourse(): boolean {\n        return this.type.toLowerCase() === \"course\"\n    }\n\n    public isSpecialisation(): boolean {\n        return [\"major\", \"minor\", \"specialisation\", \"honours\"].includes(this.type.toLowerCase())\n    }\n\n    toString() {\n        return this.name + ', ' + this.type;\n    }\n}\n\n// Arg: Array of json data where each json contains data for Children Obj\nexport const parseCurriculumContainers = (childrenData: Array<any>): Array<CurriculumContainer> => {\n    let rootContainerList: CurriculumContainer[] = [];\n    \n    childrenData.forEach((data) => {\n        let childContainerList: CurriculumContainer[] = [];\n        let elementList: CurriculumElement[] = [];\n        // If nested children containers exist, recursively transform jsonData \n        // into Children obj\n        if (data.children.length > 0) {\n            childContainerList = parseCurriculumContainers(data.children);\n        }\n\n        if (data.relationships.length > 0) {\n            elementList = parseCurriculumElements(data.relationships);\n        }\n\n        let container = new CurriculumContainer(\n            data.title,\n            data.description,\n            Number(data.creditPoints),\n            elementList,\n            childContainerList,\n            Number(data.order)\n        );\n\n        rootContainerList.push(container);\n    })\n\n    return rootContainerList;\n}\n\n// Arg: Array of json data where each json contains data for Relationship obj\nexport const parseCurriculumElements = (relationData: Array<any>): Array<CurriculumElement> => {\n    let relationshipList: CurriculumElement[] = [];\n\n    relationData.forEach((data) => {\n        let relationshipObj = new CurriculumElement(\n            data.name,\n            data.description,\n            data.type,\n            Number(data.creditPoints),\n            data.itemCode,\n            data.url,\n            Number(data.order)\n        )\n\n        relationshipList.push(relationshipObj);\n    })\n\n    return relationshipList;\n}\n","import { makeAutoObservable } from 'mobx';\nimport { ICurriculumContainer, IProgram, IProgressionEntity, ProgressionStatus } from '../interfaces/ModelInterfaces';\nimport { SerializedProgram, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\n\nexport class ProgramModel implements IProgram, IProgressionEntity, ISerializableEntity {\n  public readonly id: string\n  public progressionStatus: ProgressionStatus = ProgressionStatus.UNPLANNED\n\n  constructor(\n    public readonly code: string,\n    public readonly title: string,\n    public readonly academicItemType: string,\n    public readonly additionalInfo: string,\n    public readonly creditPoints: number,\n    public readonly structureSummary: string,\n    public readonly curriculumStructure: Array<ICurriculumContainer>,\n    public readonly description: string,\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly intakePeriod: Array<string>,\n    public readonly programConstraints: Array<any>,\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code\n    makeAutoObservable(this)\n  }\n\n  setPlanned() {\n    this.progressionStatus = ProgressionStatus.PLANNED\n  }\n\n  setUnplanned() {\n    this.progressionStatus = ProgressionStatus.UNPLANNED\n  }\n\n  serialize(): SerializedProgram {\n    return {\n      id: this.code,\n    };\n  }\n\n  async deserialize(program: SerializedProgram): Promise<void> {\n    if (program.id !== this.id) {\n      console.error(`ERROR: This program is not ${program.id} (is: ${this.id})`);\n      return;\n    }\n    \n    this.setPlanned();\n  }\n\n  toString() {\n    return `[PROGRAM_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadProgramByCode(programCode: string) {\n//     return db.collection(\"programs\")\n//         .doc(programCode)!\n//         .withConverter(programConverter)\n//         .get().then((doc) => {\n//             if (doc.exists) {\n//                 var program = doc.data()!;\n\n//                 return program;\n//             } else {\n//                 console.log(\"No such document!\");\n//             }\n//         }).catch((error) => {\n//             console.log(\"Error getting document:\", error);\n//             throw new Error();\n//         });\n// }\n\n// let programConverter = {\n//     toFirestore: function (program) {\n//         return {\n//             name: program.code,\n//         };\n//     },\n//     fromFirestore: function (snapshot, options) {\n//         const data = snapshot.data(options);\n\n//         return new ProgramModel(\n//             data.academicItemType,\n//             data.additionalInformation,\n//             data.code,\n//             Number(data.creditPoints),\n//             parseCurriculumContainers(data.curriculumStructure),\n//             data.description,\n//             data.facultyName,\n//             Number(data.implementationYear),\n//             data.intakePeriod,\n//             data.programConstraints,\n//             data.schoolName,\n//             data.studyLevel,\n//             data.title,\n//             data.urlMap\n//         );\n//     }\n// };","import { makeAutoObservable } from 'mobx';\nimport { ICurriculumContainer, IProgressionEntity, ISpecialisation, ProgressionStatus } from '../interfaces/ModelInterfaces';\nimport { SerializedSpecialisation, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\n\nexport class SpecialisationModel implements ISpecialisation, IProgressionEntity, ISerializableEntity {\n  public readonly id: string\n  public progressionStatus: ProgressionStatus = ProgressionStatus.UNPLANNED\n\n  constructor(\n    public readonly code: string,\n    public readonly title: string,\n    public readonly academicItemType: string,\n    public readonly creditPoints: number,\n    public readonly structureSummary: string,\n    public readonly curriculumStructure: Array<ICurriculumContainer>,\n    public readonly description: string,\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly keywords: string[],\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code\n    makeAutoObservable(this)\n  }\n\n  setPlanned() {\n    this.progressionStatus = ProgressionStatus.PLANNED\n  }\n\n  setUnplanned() {\n    this.progressionStatus = ProgressionStatus.UNPLANNED\n  }\n\n  serialize(): SerializedSpecialisation {\n    return {\n      id: this.code,\n    };\n  }\n\n  async deserialize(specialisation: SerializedSpecialisation) {\n    if (specialisation.id !== this.id) {\n      console.error(`ERROR: This specialisation is not ${specialisation.id} (is: ${this.id})`);\n      return;\n    }\n\n    this.setPlanned();   \n  }\n\n  toString() {\n    return `[SPECIALISATION_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadSpecialisationByCode(specialisationCode: string) {\n//     return db.collection(\"specialisations\")\n//         .doc(specialisationCode)!\n//         .withConverter(specialisationConverter)\n//         .get().then((doc) => {\n//             if (doc.exists) {\n//                 var specialisation = doc.data()!;\n\n//                 return specialisation;\n//             } else {\n//                 console.log(\"No such document!\");\n//             }\n//         }).catch((error) => {\n//             console.log(\"Error getting document:\", error);\n//             throw new Error();\n//         });\n// }\n\n// let specialisationConverter = {\n//     toFirestore: function (specialisation) {\n//         return {\n//             name: specialisation.code,\n//         };\n//     },\n//     fromFirestore: function (snapshot, options) {\n//         const data = snapshot.data(options);\n\n//         return new SpecialisationModel(\n//             data.academicItemType,\n//             data.code,\n//             Number(data.creditPoints),\n//             parseCurriculumContainers(data.curriculumStructure),\n//             data.description,\n//             data.facultyName,\n//             Number(data.implementationYear),\n//             data.keywords,\n//             data.schoolName,\n//             data.studyLevel,\n//             data.title,\n//             data.urlMap,\n//         );\n//     }\n// };","import { action, makeAutoObservable, reaction, transaction, when } from \"mobx\";\nimport { IProgressionEntity, ProgressionStatus, StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { SerializedProgressionState, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\nimport { parseCurriculumContainers } from \"../models/CurriculumModel\";\nimport { ProgramModel } from \"../models/ProgramModel\";\nimport { SpecialisationModel } from \"../models/SpecialisationModel\";\nimport { UserState } from \"./UserState\";\nimport axios from \"axios\"\n\nexport class ProgressionState implements ISerializableEntity {\n  constructor(\n    userState: UserState\n  ) {\n    makeAutoObservable(this)\n    this._userState = userState\n    reaction(\n      () => this._userState.studyLevel,\n      () => {\n        this._isUpdated = false;\n        this._updateStudyLevel()\n      },\n      { fireImmediately: true }\n    )\n    userState.registerStudyLevelUpdateActionCallback(() => Promise.resolve(this._updateStudyLevel()));\n  }\n\n  private _userState: UserState\n  private _programMapById = new Map<string, ProgramModel>();\n  private _specialisationMapById = new Map<string, SpecialisationModel>();\n  private _isUpdated: boolean = false;\n\n  get isUpdated(): boolean {\n    return this._isUpdated;\n  }\n\n  private _updateStudyLevel = async () => {\n    await this.loadAllPrograms(this._userState.studyLevel);\n    await this.loadAllSpecialisations(this._userState.studyLevel);\n    this._isUpdated = true;\n  };\n\n  get allPrograms() {\n    return [...this._programMapById.values()]\n  }\n\n  get allSpecialisations() {\n    return [...this._specialisationMapById.values()]\n  }\n\n  getProgramById(id: string) {\n    return this._programMapById.get(id)\n  }\n\n  getSpecialisationById(id: string) {\n    return this._specialisationMapById.get(id)\n  }\n\n  get plannedPrograms(): ProgramModel[] {\n    return this.allPrograms.filter(program => program.progressionStatus === ProgressionStatus.PLANNED)\n  }\n\n  get plannedSpecialisations(): SpecialisationModel[] {\n    return this.allSpecialisations.filter(specialisation => specialisation.progressionStatus === ProgressionStatus.PLANNED)\n  }\n\n  get plannedProgressionEntities(): IProgressionEntity[] {\n    let result: IProgressionEntity[] = this.plannedPrograms\n    result = result.concat(this.plannedSpecialisations)\n    return result\n  }\n\n  private resetHard(): void {\n    this._programMapById.forEach((program) => {\n      program.setUnplanned();\n    });\n    this._specialisationMapById.forEach((specialisation) => {\n      specialisation.setUnplanned();\n    });\n  }\n\n  addProgram(program: ProgramModel) {\n    this._programMapById.set(program.id, program)\n  }\n  addSpecialisation(specialisation: SpecialisationModel) {\n    this._specialisationMapById.set(specialisation.id, specialisation)\n  }\n\n  serialize(): SerializedProgressionState {\n    return {\n      programs: this.plannedPrograms.map((programModel) => {\n        return programModel.serialize();\n      }),\n      specialisations: this.plannedSpecialisations.map((specialisationModel) => {\n        return specialisationModel.serialize();\n      }),\n    }\n  }\n\n  async deserialize(json: TermtanglesSerialized) {\n    if (!json.progressionState) {\n      return;\n    }\n\n    await when(() => { return this._isUpdated; });\n\n    this.resetHard();\n    const serializedProgressionState = json.progressionState;\n    if (serializedProgressionState.programs) {\n      serializedProgressionState.programs.forEach((serializedProgram) => {\n        if (!serializedProgram.id) return;\n\n        const programModel = this.getProgramById(serializedProgram.id);\n        if (programModel) {\n          programModel.deserialize(serializedProgram);\n        } else {\n          console.error(`ERROR: ${serializedProgram.id} is not a valid program.`);\n        }\n      });\n    }\n    if (serializedProgressionState.specialisations) {\n      serializedProgressionState.specialisations.forEach((serializedSpecialisation) => {\n        if (!serializedSpecialisation.id) return;\n\n        const specialisationModel = this.getSpecialisationById(serializedSpecialisation.id);\n        if (specialisationModel) {\n          specialisationModel.deserialize(serializedSpecialisation);\n        } else {\n          console.error(`ERROR: ${serializedSpecialisation.id} is not a valid specialisation.`);\n        }\n      });\n    }\n  }\n\n  private loadAllPrograms = action((studyLevel: StudyLevel) => {\n    return axios.get(`https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_programs.json`)\n    .then(response => {\n      transaction(() => {\n        this._programMapById.clear()\n        response.data.forEach(programObj => {\n          let program = new ProgramModel(\n            programObj.code,\n            programObj.title,\n            programObj.academicItemType,\n            programObj.additionalInfo,\n            programObj.creditPoints,\n            programObj.structureSummary,\n            parseCurriculumContainers(programObj.curriculumStructure),\n            programObj.description,\n            programObj.facultyName,\n            programObj.implementationYear,\n            programObj.intakePeriod,\n            programObj.programConstraints,\n            programObj.schoolName,\n            programObj.studyLevel,\n            programObj.urlMap\n          )\n\n          this.addProgram(program);\n        })\n      })\n    })\n  })\n\n  private loadAllSpecialisations = action((studyLevel: StudyLevel) => {\n    return axios.get(`https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_specialisations.json`)\n      .then(response => {\n        transaction(() => {\n          this._specialisationMapById.clear()\n          response.data.forEach(specialisationObj => {\n            let specialisation = new SpecialisationModel(\n              specialisationObj.code,\n              specialisationObj.title,\n              specialisationObj.academicItemType,\n              specialisationObj.creditPoints,\n              specialisationObj.structureSummary,\n              parseCurriculumContainers(specialisationObj.curriculumStructure),\n              specialisationObj.description,\n              specialisationObj.facultyName,\n              specialisationObj.implementationYear,\n              specialisationObj.keywords,\n              specialisationObj.schoolName,\n              specialisationObj.studyLevel,\n              specialisationObj.urlMap,\n            )\n\n            this.addSpecialisation(specialisation);\n          })\n        })\n    })\n  });\n}\n\n","import { CourseModel } from '../models/CourseModel';\r\nimport { ProgramModel } from '../models/ProgramModel';\r\nimport { SpecialisationModel } from '../models/SpecialisationModel';\r\nimport { CourseState } from './CourseState';\r\nimport { ProgressionState } from './ProgressionState';\r\n\r\n\r\nexport class SearchDataState {\r\n  constructor(\r\n    private _courseState: CourseState,\r\n    private _progressionState: ProgressionState,\r\n  ) {}\r\n\r\n  get courseSearchData(): CourseModel[] {\r\n    return this._courseState.allCourses.sort((a, b) => (a.code > b.code) ? 1 : -1)\r\n  }\r\n  get programSearchData(): ProgramModel[] {\r\n    return this._progressionState.allPrograms.sort((a, b) => (a.title > b.title) ? 1 : -1)\r\n  }\r\n  get specialisationSearchData(): SpecialisationModel[] {\r\n    return this._progressionState.allSpecialisations.sort((a, b) => (a.title > b.title) ? 1 : -1)\r\n  }\r\n}\r\n","import { makeAutoObservable, when } from \"mobx\";\nimport { StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { SerializedUserState, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\n\nconst stringToStudyLevelMap = ((str: string) => {\n  switch(str) {\n    case \"undergraduate\": return StudyLevel.UNDERGRADUATE;\n    case \"postgraduate\": return StudyLevel.POSTGRADUATE;\n    case \"research\": return StudyLevel.RESEARCH;\n    default: return undefined;\n  }\n});\n\nexport class UserState implements ISerializableEntity {\n  constructor() {\n    makeAutoObservable(this)\n  }\n\n  private _studyLevel: StudyLevel = StudyLevel.UNDERGRADUATE\n  private _isUpdated: boolean = true;\n  private _studyLevelUpdateActionCallbacks: (() => Promise<void>)[] = [];\n\n  get studyLevel() {\n    return this._studyLevel\n  }\n\n  async setStudyLevel (studyLevel: StudyLevel) {\n    if (this._studyLevel !== studyLevel) {\n      this._studyLevel = studyLevel;\n      const studyLevelPromises: Promise<void>[] = this._studyLevelUpdateActionCallbacks.map(callback => callback());\n      return Promise.all(studyLevelPromises);\n    }\n  }\n\n  set isUpdated(isUpdated: boolean) {\n    this._isUpdated = isUpdated;\n  }\n  \n  get isUpdated(): boolean {\n    return this._isUpdated;\n  }\n\n  registerStudyLevelUpdateActionCallback(updateAction: () => Promise<void>) {\n    this._studyLevelUpdateActionCallbacks.push(updateAction);\n  }\n\n  serialize(): SerializedUserState {\n    return {studyLevel: this._studyLevel};\n  }\n\n  async deserialize(json: TermtanglesSerialized): Promise<void> {\n    if (!json.userState) {\n      throw \"ERROR: User state not included.\";\n    }\n\n    const serializedUserState = json.userState;\n    if (!serializedUserState.studyLevel) {\n      throw `ERROR: User state must include a studyLevel parameter.`;\n    }\n\n    const level = stringToStudyLevelMap(serializedUserState.studyLevel);\n    if (!level) {\n      throw `ERROR: ${serializedUserState.studyLevel} is not a valid study level.`\n    }\n\n    await this.setStudyLevel(level);\n  }\n}\n","import { createContext } from 'react'\nimport { CourseState } from '../states/CourseState'\nimport { ProgressionState } from '../states/ProgressionState';\nimport { SearchDataState } from '../states/SearchDataState';\nimport { UserState } from '../states/UserState';\n\nconst userState = new UserState();\nconst courseState = new CourseState(userState);\nconst progressionState = new ProgressionState(userState);\nconst searchDataState = new SearchDataState(courseState, progressionState);\n\nexport const ApplicationContext = createContext({\n    userState,\n    courseState,\n    progressionState,\n    searchDataState,\n})\n","\nimport { Grid, Item, Pagination } from 'semantic-ui-react'\nimport styled from 'styled-components'\n\nexport const ResultItem = styled(Item)`\n  &&& {\n    border: 0px solid lightgrey;\n    padding: 6px;\n    display: flex;\n    align-items: flex-start;\n    justify-content: space-between;\n    margin:0px\n  }\n  &&&&{\n    padding:1em 0;\n  }\n`\n\nexport const ResultItemHeader = styled(Item.Header)`\n`\n\nexport const ResultItemContent = styled(Item.Content)`\n  &&&&& {\n    flex: 1;\n    padding:0;\n  }\n`\n\nexport const ResultItemExtra = styled(Item.Extra)`\n  &&&& {\n    margin: 0;\n    text-align: right;\n    flex: 1;\n  }\n`\n\nexport const ResultCollection = styled(Item.Group)`\n  && {\n    padding: 15px 0px 10px 0px;\n    margin: 0px;\n  }\n`\n\nexport const ResultsPagination = styled(Pagination)`\n  max-height: 40px;\n`\n\nexport const ResultsColumn = styled(Grid.Column)`\n`\n\n","import { Observer, observer } from \"mobx-react\"\nimport { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { CourseModel, CourseStatus } from \"../../../models/CourseModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra, ResultItemHeader } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  course: T\n}\n\nexport const CourseResultView = observer((props: IResultViewProps<CourseModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseOver={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <ResultItemHeader>{props.course.code}</ResultItemHeader>\n              <Item.Description>{props.course.title}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n              ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.course.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.course.courseStatus === CourseStatus.PLANNED\n                        ? <Icon color=\"red\" className=\"bookmark\" />\n                        : props.course.courseStatus === CourseStatus.ALLOCATED\n                          ? <Icon color=\"orange\" className=\"calendar alternate outline\" />\n                          : props.course.courseStatus === CourseStatus.COMPLETED\n                            ? <Icon color=\"green\" className=\"check\" />\n                            : \"\"\n                    }\n\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.course.courseStatus !== CourseStatus.PLANNED && props.course.courseStatus !== CourseStatus.ALLOCATED}\n                        icon={props.course.courseStatus === CourseStatus.ALLOCATED ? 'calendar alternate outline' : 'bookmark'}\n                        content={props.course.courseStatus === CourseStatus.ALLOCATED ? 'Scheduled' : 'Interested'}\n                        color={props.course.courseStatus === CourseStatus.ALLOCATED ? 'orange' : 'blue'}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.course.courseStatus === CourseStatus.PLANNED || props.course.courseStatus === CourseStatus.ALLOCATED) {\n                            props.course.setUnplanned()\n                          } else {\n                            props.course.setPlanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {props.course.courseStatus !== CourseStatus.COMPLETED}\n                        icon='check'\n                        content='Done'\n                        color=\"green\"\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.course.courseStatus === CourseStatus.COMPLETED) {\n                            props.course.setUnplanned()\n                          } else {\n                            props.course.setCompleted()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.course.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { ProgressionStatus } from \"../../../interfaces/ModelInterfaces\"\nimport { SpecialisationModel } from \"../../../models/SpecialisationModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  specialisation: T\n}\n\nexport const SpecialisationResultView = observer((props: IResultViewProps<SpecialisationModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener, noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseEnter={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <Item.Header>{props.specialisation.title}</Item.Header>\n              <Item.Description>{props.specialisation.academicItemType} - {props.specialisation.code}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n              ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.specialisation.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.specialisation.progressionStatus === ProgressionStatus.PLANNED\n                        ? <Icon color=\"green\" className=\"calendar alternate outline\" />\n                        : <></>\n                    }\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED}\n                        icon={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"plus circle\" : \"minus circle\"}\n                        content={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"Add\" : \"Remove\"}\n                        color={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"green\" : \"red\"}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED) {\n                            props.specialisation.setPlanned()\n                          } else {\n                            props.specialisation.setUnplanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.specialisation.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\";\nimport { ApplicationContext } from \"../../../contexts/ApplicationContext\";\nimport { CurriculumElement } from \"../../../models/CurriculumModel\";\nimport React, { useContext } from \"react\";\nimport { CourseResultView } from \"../../SearchPanel/Results/CourseResultView\";\nimport { SpecialisationResultView } from \"../../SearchPanel/Results/SpecialisationResultView\";\nimport { ResultCollection } from \"../../SearchPanel/SearchPanelStyles\";\n\nexport interface ICurriculumElementViewProps {\n  entityId: string,\n  curriculumElements: CurriculumElement[]\n}\n\nexport const CurriculumElementsView = observer((props: ICurriculumElementViewProps) => {\n  const applicationContext = useContext(ApplicationContext);\n  return <Observer>\n    {\n      () => {\n        return props.curriculumElements.length > 0\n          ? <ResultCollection divided>\n            {\n              props.curriculumElements\n                .sort((a, b) => Number(a.order) - Number(b.order))\n                .map(element => {\n                  if (element.isCourse()) {\n                    let course = applicationContext.courseState.getCourseById(element.itemCode)\n                    return course ? <CourseResultView course={course} /> : <></>\n                  } else if (element.isSpecialisation()) {\n                    let specialisation = applicationContext.progressionState.getSpecialisationById(element.itemCode)\n                    return specialisation ? <SpecialisationResultView specialisation={specialisation} /> : <></>\n                  }\n                  return <p>{element.description}</p>\n                })\n            }\n          </ResultCollection>\n          : <></>\n      }\n    }\n  </Observer>\n});\n","import parse from 'html-react-parser';\nimport { Observer, observer } from \"mobx-react\";\nimport React from \"react\";\nimport sanitizeHtml from 'sanitize-html';\nimport { Accordion, Icon, Label } from \"semantic-ui-react\";\nimport styled from 'styled-components';\nimport { CurriculumContainer } from \"../../../models/CurriculumModel\";\nimport { ProgressionPlannerViewModel } from \"../ProgressionPlannerViewModel\";\nimport { CurriculumElementsView } from \"./CurriculumElementsView\";\n\nexport interface ICurriculumContainerViewProps {\n  entityId: string\n  curriculumContainer: CurriculumContainer[]\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n}\n\nexport const CurriculumAccordionCreditPoints = styled(Label)`\n  &&& {\n    margin-left:auto\n    \n  }\n`\n\nexport const CurriculumAccordionTitle = styled(Accordion.Title)`\n  &&& {\n    display:flex;\n  }\n`\nexport const CurriculumDescriptionDiv = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nexport const CurriculumExpandCollapseLink = styled.a`\n  min-width: 80px;\n  text-align: right;\n`\n\nexport const CurriculumContent = styled.div`\n  margin-left:10px;\n`\n\nexport const CurriculumContainerView = observer((props: ICurriculumContainerViewProps) => {\n  const getCreditPointsView = (container: CurriculumContainer) => {\n    const uocOfChildren = props.progressionPlannerViewModel.calculateUocOfChildren(container)\n    if (container.creditPoints > 0) {\n      return <CurriculumAccordionCreditPoints\n        size=\"small\"\n        color={uocOfChildren === container.creditPoints\n          ? \"green\"\n          : uocOfChildren < container.creditPoints\n            ? \"orange\"\n            : \"yellow\"\n        }\n      >\n        {uocOfChildren} / {container.creditPoints} UOC\n      </CurriculumAccordionCreditPoints>\n    } else if (uocOfChildren > 0) {\n      return <CurriculumAccordionCreditPoints\n        size=\"small\"\n        color=\"green\"\n      >\n        {uocOfChildren} UOC\n      </CurriculumAccordionCreditPoints>\n    }\n  }\n\n  return <Observer>\n    {\n      () => {\n        return props.curriculumContainer.length > 0\n          ? <Accordion.Accordion\n            key={props.entityId}\n            exclusive={false}\n            panels={[...props.curriculumContainer]\n              .sort((a, b) => Number(a.order) - Number(b.order))\n              .map(container => {\n                return {\n                  key: container.id,\n                  title: <CurriculumAccordionTitle>\n                    <Icon className={\n                      props.progressionPlannerViewModel.isContainerActive(container.id)\n                      ? \"caret down\"\n                      : \"caret right\"\n                    }/>\n                    {container.title}\n                    {getCreditPointsView(container)}\n                  </CurriculumAccordionTitle>,\n                  content: {\n                    content: <div>\n                      <CurriculumContent>\n                      <CurriculumDescriptionDiv>\n                        <span>{parse(sanitizeHtml(container.description))}</span>\n                        {\n                          container.containers.length > 0\n                            ? <CurriculumExpandCollapseLink\n                              href=\"#\"\n                              onClick={() => props.progressionPlannerViewModel.toggleAllContainers(container)}\n                            >\n                              {\n                                props.progressionPlannerViewModel.isAnySubContainerActive(container)\n                                  ? \"Collapse All\"\n                                  : \"Expand All\"\n                              }\n                            </CurriculumExpandCollapseLink>\n                            : <></>\n                        }\n                      </CurriculumDescriptionDiv>\n                      <CurriculumElementsView entityId={props.entityId} curriculumElements={container.elements} />\n                      </CurriculumContent>\n                      <CurriculumContainerView\n                        entityId={props.entityId}\n                        curriculumContainer={container.containers}\n                        progressionPlannerViewModel={props.progressionPlannerViewModel}\n                      />\n                    </div>\n                  },\n                  active: props.progressionPlannerViewModel.isContainerActive(container.id),\n                  onTitleClick: () => { props.progressionPlannerViewModel.toggleContainer(container.id) }\n                }\n              })}\n          />\n          : <></>\n      }\n    }\n  </Observer>\n});\n","import { Observer, observer } from 'mobx-react';\nimport React from 'react';\nimport { Accordion } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport { IProgressionEntity } from '../../interfaces/ModelInterfaces';\nimport { CurriculumContainerView } from './CurriculumView/CurriculumContainerView';\nimport { ProgressionPlannerViewModel } from './ProgressionPlannerViewModel';\nimport parse from 'html-react-parser';\nimport sanitizeHtml from 'sanitize-html';\n\nexport interface IProgressionEntityViewProps {\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n  entity: IProgressionEntity\n}\n\nconst ProgressionEntityTitle = styled.a`\ncolor: black;\nbackground-color: transparent;\ntext-decoration: none;\n\n&:hover {\n  color: #db2828;\n  background-color: transparent;\n  text-decoration: line-through;\n}\n`\n\nconst ProgressionEntityView = observer((props: IProgressionEntityViewProps) => {\n  return <Observer>\n    {() => {\n      return <>\n        <h2>\n          <ProgressionEntityTitle\n            href=\"#\"\n            onClick={() => props.entity.setUnplanned()}\n          >{props.entity.title}</ProgressionEntityTitle>\n        </h2>\n        <span>{parse(sanitizeHtml(props.entity.structureSummary))}</span>\n        <Accordion fluid styled>\n          <CurriculumContainerView\n            entityId={props.entity.id}\n            curriculumContainer={props.entity.curriculumStructure}\n            progressionPlannerViewModel={props.progressionPlannerViewModel}\n          />\n        </Accordion>\n      </>\n    }}\n  </Observer>\n})\n\nexport default ProgressionEntityView;\n","import { Observer, observer } from 'mobx-react';\nimport React from 'react';\nimport { Container } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport ProgressionEntityView from './ProgressionEntityView';\nimport { ProgressionPlannerViewModel } from './ProgressionPlannerViewModel';\n\nexport const ProgressionContainer = styled(Container)`\n  margin:1em 0;\n`\n\nexport interface IProgressionPlannerProps {\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n}\n\nconst ProgresionPlanner = observer(({ progressionPlannerViewModel }: IProgressionPlannerProps) => {\n  return <Observer>\n    {() => {\n      return (\n        <React.Fragment>\n          <ProgressionContainer>\n            {\n              progressionPlannerViewModel\n                .progressionState\n                .plannedProgressionEntities\n                .map(entity => {\n                  return <ProgressionEntityView\n                    entity={entity}\n                    progressionPlannerViewModel={progressionPlannerViewModel}\n                  />\n                })\n            }\n          </ProgressionContainer>\n        </React.Fragment>\n      )\n    }}\n  </Observer>\n})\n\nexport default ProgresionPlanner;\n","import { makeObservable, observable } from \"mobx\";\nimport { ProgressionStatus } from \"../../interfaces/ModelInterfaces\";\nimport { CourseStatus } from \"../../models/CourseModel\";\nimport { CurriculumContainer } from \"../../models/CurriculumModel\";\nimport { ProgramModel } from \"../../models/ProgramModel\";\nimport { SpecialisationModel } from \"../../models/SpecialisationModel\";\nimport { CourseState } from \"../../states/CourseState\";\nimport { ProgressionState } from \"../../states/ProgressionState\";\n\nexport interface IProgressionPlannerState {\n  id: string,\n  title: string,\n  programs: ProgramModel[],\n  specialisations: SpecialisationModel[],\n}\n\nexport class ProgressionPlannerViewModel {\n  private _progressionState: ProgressionState\n  private _courseState: CourseState\n  private _progressionPlannerState: IProgressionPlannerState\n  private _displayableContainerPanels: Set<string> = new Set<string>()\n\n  constructor(\n    progressionState: ProgressionState,\n    courseState: CourseState,\n  ) {\n    makeObservable<ProgressionPlannerViewModel,\n      \"_displayableContainerPanels\"\n    >(this, {\n      _displayableContainerPanels: observable,\n    })\n\n    this._progressionState = progressionState\n    this._progressionPlannerState = {\n      id: \"progressionPlanner\",\n      title: \"Progression Planner\",\n      programs: [],\n      specialisations: [],\n    }\n    this._courseState = courseState\n  }\n\n  get progressionState() {\n    return this._progressionState;\n  }\n\n  get progressionPlannerState() {\n    return this._progressionPlannerState;\n  }\n\n  calculateUocOfChildren(curriculumContainer: CurriculumContainer): number {\n    return [...this.getUniqueUocOfCurriculumContainer(curriculumContainer).values()].reduce((a, b) => a + b, 0)\n  }\n\n  getUniqueUocOfCurriculumContainer(curriculumContainer: CurriculumContainer): Map<string, number> {\n    let allChildren = new Map<string, number>()\n    curriculumContainer.elements.forEach(element => {\n      if (element.isCourse()) {\n        let course = this._courseState.getCourseById(element.itemCode)\n        if (course && course.courseStatus !== CourseStatus.UNPLANNED) {\n          allChildren.set(element.itemCode, element.creditPoints)\n        }\n      } else if (element.isSpecialisation()) {\n        let specialisation = this.progressionState.getSpecialisationById(element.itemCode)\n        if (specialisation && specialisation.progressionStatus !== ProgressionStatus.UNPLANNED) {\n          allChildren.set(element.itemCode, element.creditPoints)\n        }\n      }\n    })\n    curriculumContainer.containers.forEach(container => {\n      let childResult = this.getUniqueUocOfCurriculumContainer(container)\n      childResult.forEach((value, key) => allChildren.set(key, value))\n    })\n    return allChildren\n  }\n\n  toggleContainer(containerId: string) {\n    if (this._displayableContainerPanels.has(containerId)) {\n      this._displayableContainerPanels.delete(containerId)\n    } else {\n      this._displayableContainerPanels.add(containerId)\n    }\n  }\n\n  isAnySubContainerActive(rootContainer: CurriculumContainer): boolean {\n    return rootContainer.containers.filter(container => {\n      return this._displayableContainerPanels.has(container.id)\n        || this.isAnySubContainerActive(container)\n    }).length > 0\n  }\n\n  toggleAllContainers(rootContainer: CurriculumContainer) {\n    if (this.isAnySubContainerActive(rootContainer)) {\n      rootContainer.containers.forEach(container => {\n        this.setAllContainersInactive(container)\n      })\n    } else {\n      rootContainer.containers.forEach(container => {\n        this.setAllContainersActive(container)\n      })\n    }\n  }\n\n  private setAllContainersActive(rootContainer: CurriculumContainer) {\n    rootContainer.containers.forEach(container => {\n      this.setAllContainersActive(container)\n    })\n    this._displayableContainerPanels.add(rootContainer.id)\n  }\n\n  private setAllContainersInactive(rootContainer: CurriculumContainer) {\n    rootContainer.containers.forEach(container => {\n      this.setAllContainersInactive(container)\n    })\n    this._displayableContainerPanels.delete(rootContainer.id)\n  }\n\n  isContainerActive(containerId: string): boolean {\n    return this._displayableContainerPanels.has(containerId)\n  }\n}\n","import { makeAutoObservable } from \"mobx\";\nexport type FilterValue = string\n\nexport interface IFilterElementState {\n  filterElementName: string\n  numMatchingRecords: number\n}\n\nexport class FilterModel<T> {\n  private _possibleValues: Set<FilterValue> = new Set();\n  private _selectedValues: Set<FilterValue> = new Set();\n  constructor(\n    public readonly name: string,\n    private readonly fnGetTargetValue: (searchResult: T) => FilterValue[],\n  ) {\n    makeAutoObservable(this)\n  }\n\n  private filterResultMapping = new Map<string, number>();\n  public initializeFilter = (allSearchData: T[]) =>{\n    this._possibleValues = new Set(allSearchData\n      .map(result => this.fnGetTargetValue(result))\n      .flat()\n      .filter(value => value !== \"\")\n    )\n  }\n\n  public applyFilter = (searchResults: T[]): T[] => {\n    let results = searchResults\n    if (this._selectedValues.size > 0) {\n      results = searchResults\n        .filter(result => [...this._selectedValues.values()]\n          .filter(filterValue => this.fnGetTargetValue(result).includes(filterValue))\n          .length > 0\n        )\n    }\n    return results\n  }\n\n  public getFilterState(searchResults: T[]): IFilterElementState[] {\n    const isNumerical = [...this._possibleValues.values()].filter(value => isNaN(Number(value))).length === 0\n    return [...this._possibleValues.values()]\n      .sort((a, b) => {\n        if (isNumerical) {\n          return Number(a) - Number(b)\n        } else {\n          return a > b ? 1 : -1\n        }\n      })\n      .map(possibleFilterValue => {\n        return {\n          filterElementName: possibleFilterValue.toString(),\n          numMatchingRecords: searchResults.filter(result => this.fnGetTargetValue(result).includes(possibleFilterValue)).length,\n        }\n      })\n  }\n\n  public isSelected(value: FilterValue) {\n    return this._selectedValues.has(value)\n  }\n\n  public toggleValue(value: FilterValue) {\n    if (!this._possibleValues.has(value)) {\n      console.log(`invalid value toggled: ${value}`)\n      return;\n    }\n    if (this._selectedValues.has(value)) {\n      this._selectedValues.delete(value)\n    } else {\n      this._selectedValues.add(value)\n    }\n  }\n\n  public resetValue(value: FilterValue) {\n    if (!this._possibleValues.has(value)) {\n      console.log(`invalid value toggled: ${value}`)\n      return;\n    }\n    if (this._selectedValues.has(value)) {\n      this._selectedValues.delete(value)\n    }\n  }\n\n}","import { CourseModel } from \"../CourseModel\"\nimport { ProgramModel } from \"../ProgramModel\"\nimport { SpecialisationModel } from \"../SpecialisationModel\"\nimport { FilterModel } from \"./FilterModel\"\n\nexport const getCourseFilters = (allSearchData: CourseModel[]) => {\n  const filters: FilterModel<CourseModel>[] = [\n    new FilterModel<CourseModel>(\"Offering Periods\", (course) => course.termOffering),\n    new FilterModel<CourseModel>(\"Faculty\", (course) => [course.facultyName]),\n    new FilterModel<CourseModel>(\"School\", (course) => [course.schoolName]),\n    new FilterModel<CourseModel>(\"Credit Points\", (course) => [course.creditPoints.toString()]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n\nexport const getProgramFilters = (allSearchData: ProgramModel[]) => {\n  const filters: FilterModel<ProgramModel>[] = [\n    new FilterModel<ProgramModel>(\"Intake Periods\", (program) => program.intakePeriod),\n    new FilterModel<ProgramModel>(\"Faculty\", (program) => [program.facultyName]),\n    new FilterModel<ProgramModel>(\"School\", (program) => [program.schoolName]),\n    new FilterModel<ProgramModel>(\"Credit Points\", (program) => [program.creditPoints.toString()]),\n    new FilterModel<ProgramModel>(\"Academic Item Type\", (program) => [program.academicItemType]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n\nexport const getSpecialisationFilters = (allSearchData: SpecialisationModel[]) => {\n  const filters: FilterModel<SpecialisationModel>[] = [\n    new FilterModel<SpecialisationModel>(\"Faculty\", (specialisation) => [specialisation.facultyName]),\n    new FilterModel<SpecialisationModel>(\"School\", (specialisation) => [specialisation.schoolName]),\n    new FilterModel<SpecialisationModel>(\"Credit Points\", (specialisation) => [specialisation.creditPoints.toString()]),\n    new FilterModel<SpecialisationModel>(\"Academic Item Type\", (specialisation) => [specialisation.academicItemType]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n","/* May remove */\n\nexport const ResetButtonStyle = {\n  backgroundColor: \"#dcdcdc\",\n  border: \"none\",\n  color: \"black\",\n  padding: \"15px 32px\",\n  textDecoration: \"none\",\n  display: \"inline-block\",\n  fontSize: \"16px\",\n  margin: \"4px 2px\",\n  cursor: \"pointer\",\n  width: \"100%\",\n  height: \"100%\"\n}","import { Observer, observer } from \"mobx-react\"\nimport { useState } from \"react\"\nimport { Accordion, Form, Menu } from \"semantic-ui-react\"\nimport { FilterModel } from \"../../../models/Filters/FilterModel\"\n\nexport interface IFilterSectionProps<T> {\n  searchResults: T[]\n  filter: FilterModel<T>\n}\n\nexport const FilterSection = observer(<T,>(props: IFilterSectionProps<T>) => {\n  const [expandedFilters, setExpandedFilters] = useState(new Set<string>())\n\n  return <Observer>\n    {\n      () => {\n        let filterState = props.filter.getFilterState(props.searchResults)\n        return (\n            <Menu.Item key={props.filter.name}>\n              <Accordion.Title\n                active={expandedFilters.has(props.filter.name)}\n                content={props.filter.name}\n                onClick={() => {\n                  let newExpandedFilters = new Set(expandedFilters)\n                  if (expandedFilters.has(props.filter.name)) {\n                    newExpandedFilters.delete(props.filter.name)\n                  } else {\n                    newExpandedFilters.add(props.filter.name)\n                  }\n                  setExpandedFilters(newExpandedFilters)\n                }}\n              />\n              <Accordion.Content\n                active={expandedFilters.has(props.filter.name)}\n                content={\n                  <Form>\n                    <Form.Group grouped>\n                      {\n                        filterState.map(filterElementState => {\n                          return <Form.Checkbox\n                            key={filterElementState.filterElementName}\n                            label={`${filterElementState.filterElementName}`}\n                            name={props.filter.name}\n                            type=\"checkbox\"\n                            value={filterElementState.filterElementName}\n                            checked={props.filter.isSelected(filterElementState.filterElementName)}\n                            onClick={() => {\n                              props.filter.toggleValue(filterElementState.filterElementName)\n                            }}\n                          />\n                        })\n                      }\n                    </Form.Group>\n                  </Form>\n                }\n              />\n            </Menu.Item>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from 'mobx-react'\nimport { Accordion, Menu } from 'semantic-ui-react'\nimport { ResetButtonStyle } from '../../../config/ResetButtonStyle'\nimport { FilterModel } from '../../../models/Filters/FilterModel'\nimport { FilterSection } from './FilterSection'\nimport './ResetButton.css'\nexport interface IFilterMenuProps<T> {\n  searchResults: T[]\n  filters: FilterModel<T>[]\n}\n\nexport const FilterMenuView = observer(<T,>(props: IFilterMenuProps<T>) => {\n  const handlereset = () => {\n    props.filters.forEach((filter) => {\n      filter.getFilterState(props.searchResults).forEach((element) => {\n        filter.resetValue(element.filterElementName)\n      })\n    })\n  }\n\n  return (\n    <Observer>\n      {\n        () => {\n          return <div >\n            <div className=\"resetbutton\">\n              <button style={ResetButtonStyle} onClick={() => handlereset()}>Reset Filter</button>\n            </div>\n            <Accordion fluid as={Menu} vertical>\n              {\n                props.filters.map(filter => {\n                  return <FilterSection\n                    searchResults={props.searchResults}\n                    filter={filter}\n                  />\n                })\n              }\n            </Accordion>\n\n          </div>\n        }\n\n      }\n    </Observer>\n  )\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React from \"react\"\nimport { Item } from \"semantic-ui-react\"\nimport styled from 'styled-components'\nimport { CourseModel } from \"../../../models/CourseModel\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\nimport { CourseResultView } from \"./CourseResultView\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nconst CourseCollection = styled(Item.Group)`\n  &&& {\n    padding: 15px 0px 10px 0px;\n  }\n`\n        \nexport const CourseResultCollectionView = observer((props: IResultCollectionViewProps<CourseModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(course => {\n                return (\n                  <CourseResultView course={course} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { CourseResultCollectionView } from \"../Results/CourseResultCollectionView\"\nimport { ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const CourseSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <Grid.Column key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.courseSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.courseFilters}\n                  />\n                </Grid.Column>\n                <ResultsColumn key=\"results\" width={12}>\n                  <CourseResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.courseSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.courseSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.courseSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { ProgressionStatus } from \"../../../interfaces/ModelInterfaces\"\nimport { ProgramModel } from \"../../../models/ProgramModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  program: T\n}\n\nexport const ProgramResultView = observer((props: IResultViewProps<ProgramModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseEnter={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <Item.Header>{props.program.title}</Item.Header>\n              <Item.Description>{props.program.academicItemType} - {props.program.code}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n                ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.program.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.program.progressionStatus === ProgressionStatus.PLANNED\n                        ? <Icon color=\"green\" className=\"calendar alternate outline\" />\n                        : <></>\n                    }\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.program.progressionStatus === ProgressionStatus.UNPLANNED}\n                        icon={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"plus circle\" : \"minus circle\"}\n                        content={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"Add\" : \"Remove\"}\n                        color={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"green\" : \"red\"}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.program.progressionStatus === ProgressionStatus.UNPLANNED) {\n                            props.program.setPlanned()\n                          } else {\n                            props.program.setUnplanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.program.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport { ProgramModel } from \"../../../models/ProgramModel\"\nimport { ProgramResultView } from \"./ProgramResultView\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nexport const ProgramResultCollectionView = observer((props: IResultCollectionViewProps<ProgramModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(program => {\n                return (\n                  <ProgramResultView program={program} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { ProgramResultCollectionView } from \"../Results/ProgramResultCollectionView\"\nimport { ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const ProgramSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <Grid.Column key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.programSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.programFilters}\n                  />\n                </Grid.Column>\n                <ResultsColumn key=\"results\" width={12}>\n                  <ProgramResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.programSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.programSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.programSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport { SpecialisationModel } from \"../../../models/SpecialisationModel\"\nimport { SpecialisationResultView } from \"./SpecialisationResultView\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nexport const SpecialisationResultCollectionView = observer((props: IResultCollectionViewProps<SpecialisationModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(specialisation => {\n                return (\n                  <SpecialisationResultView specialisation={specialisation} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { SpecialisationResultCollectionView } from \"../Results/SpecialisationResultCollectionView\"\nimport { ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const SpecialisationSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <Grid.Column key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.specialisationSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.specialisationFilters}\n                  />\n                </Grid.Column>\n                <ResultsColumn key=\"results\" width={12}>\n                  <SpecialisationResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.specialisationSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.specialisationSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.specialisationSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from 'mobx-react'\nimport React from 'react'\nimport { Container, Dropdown, Icon, Input, Menu } from 'semantic-ui-react'\nimport styled from 'styled-components'\nimport { SearchPanelItem, SearchPanelViewModel } from './SearchPanelViewModel'\nimport { CourseSearchTab } from './SearchTab/CourseSearchTab'\nimport { ProgramSearchTab } from './SearchTab/ProgramSearchTab'\nimport { SpecialisationSearchTab } from './SearchTab/SpecialisationSearchTab'\n\n\nconst ResultsSubtextContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n  padding: 6px;\n`\n\nconst FoundResults = styled.h4`\n  &&& {\n    margin: 1rem 0 0.5rem 0.5rem\n  }\n`\n\nconst SearchPanel = observer(({ searchPanelViewModel }: { [key: string]: SearchPanelViewModel }) => {\n  const getNumResults = () => {\n    let numResults = -1\n    switch (searchPanelViewModel.activeItem) {\n      case (SearchPanelItem.COURSES):\n        numResults = searchPanelViewModel.searchResults.courseSearchResults.length\n        break\n      case (SearchPanelItem.PROGRAMS):\n        numResults = searchPanelViewModel.searchResults.programSearchResults.length\n        break\n      case (SearchPanelItem.SPECIALISATIONS):\n        numResults = searchPanelViewModel.searchResults.specialisationSearchResults.length\n        break\n    }\n    return numResults\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <React.Fragment>\n            <Container>\n              <Input\n                placeholder=\"Click here to to get started!\"\n                fluid\n                loading={searchPanelViewModel.isLoading}\n                icon={\n                  <Icon\n                    link={searchPanelViewModel.isInputActive}\n                    className={searchPanelViewModel.isInputActive ? \"x\" : \"search\"}\n                    onClick={() => {\n                      searchPanelViewModel.setQueryText(\"\")\n                      searchPanelViewModel.setInputActive(false)\n                    }}\n                  />\n                }\n                onClick={() => {\n                  searchPanelViewModel.setInputActive(true)\n                }}\n                onChange={(e, data) => searchPanelViewModel.setQueryText(data.value)}\n                value={searchPanelViewModel.queryText}\n              />\n              {\n                searchPanelViewModel.shouldShowPanel\n                  ? <>\n                    <Menu pointing secondary>\n                      <Menu.Item\n                        name={\"courses\"}\n                        active={searchPanelViewModel.activeItem === SearchPanelItem.COURSES}\n                        onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.COURSES)}\n                      >\n                        {`Courses (${searchPanelViewModel.searchResults.courseSearchResults.length})`}\n                      </Menu.Item>\n                      <Menu.Item\n                        name={\"programs\"}\n                        active={searchPanelViewModel.activeItem === SearchPanelItem.PROGRAMS}\n                        onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.PROGRAMS)}\n                      >\n                        {`Programs (${searchPanelViewModel.searchResults.programSearchResults.length})`}\n                      </Menu.Item>\n                      <Menu.Item\n                        name={\"specialisations\"}\n                        active={searchPanelViewModel.activeItem === SearchPanelItem.SPECIALISATIONS}\n                        onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.SPECIALISATIONS)}\n                      >\n                        {`Specialisations (${searchPanelViewModel.searchResults.specialisationSearchResults.length})`}\n                      </Menu.Item>\n                    </Menu>\n                    <ResultsSubtextContainer>\n                      <FoundResults>\n                        Found {getNumResults()} result{getNumResults() === 1 ? \"\" : \"s\"}\n                      </FoundResults>\n\n                      <span>\n                        <span style={{ marginRight: \"10px\"}}>Results per page</span>\n                        <Dropdown\n                          text={searchPanelViewModel.resultsPerPage.toString()}\n                          selection\n                          options={[\n                            { text: 10, value: 10 },\n                            { text: 20, value: 20 },\n                            { text: 30, value: 30 },\n                            { text: 50, value: 50 },\n                          ]}\n                          onChange={(e, data) => { searchPanelViewModel.setResultsPerPage(Number(data.value)) }}\n                        />\n                      </span>\n                    </ResultsSubtextContainer>\n                    {\n                      searchPanelViewModel.activeItem === SearchPanelItem.COURSES\n                        ? <CourseSearchTab searchPanelViewModel={searchPanelViewModel} />\n                        : <></>\n                    }\n                    {\n                      searchPanelViewModel.activeItem === SearchPanelItem.PROGRAMS\n                        ? <ProgramSearchTab searchPanelViewModel={searchPanelViewModel} />\n                        : <></>\n                    }\n                    {\n                      searchPanelViewModel.activeItem === SearchPanelItem.SPECIALISATIONS\n                        ? <SpecialisationSearchTab searchPanelViewModel={searchPanelViewModel} />\n                        : <></>\n                    }\n                  </>\n                  : <></>\n              }\n            </Container>\n          </React.Fragment>\n        )\n      }\n    }\n  </Observer>\n\n})\n\nexport default SearchPanel\n","import styled from \"styled-components\"\nimport { AutoPlannerViewModel } from \"./AutoPlannerModel\"\n\nconst AutoPlanButton = styled.button`\n  background-color: forestgreen;\n  border: none;\n  border-radius: 4px;\n  color: white;\n  padding: 15px 32px;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin: 4px 2px;\n  cursor: pointer;\n  width: 100%;\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */ \n`\nconst AutoPlanner = ({ autoPlannerViewModel }: { [key: string]: AutoPlannerViewModel }) => {\n  return (\n    <AutoPlanButton onClick={() => autoPlannerViewModel.autoPlan()}>\n      Auto Plan Degree\n    </AutoPlanButton>\n  )\n};\n\nexport default AutoPlanner;","import { CourseState } from \"../../states/CourseState\";\r\nimport { CourseModel } from \"../../models/CourseModel\";\r\nimport { TermModel } from \"../../models/TermModel\";\r\n\r\nexport class AutoPlannerViewModel {\r\n    private courseState: CourseState;\r\n  \r\n    constructor(courseState: CourseState) {\r\n        this.courseState = courseState;\r\n    }\r\n\r\n    get autoPlanCourseState(): CourseState {\r\n        return this.courseState;\r\n    }\r\n\r\n    autoPlan() {\r\n        let canAllocateCourses: boolean = true;\r\n        let listYearsToTryAllocate: number[] = this.getYearsToTryAllocate(this.courseState.getMaxAllocatedYear);\r\n        let listTermsToTryAllocate: string[] = [\"Term 1\", \"Term 2\", \"Term 3\"]\r\n\r\n        while (canAllocateCourses === true) {\r\n            let coursesToBeAllocated: CourseModel[] = this.courseState.plannedCourses;\r\n            let nCoursesToAllocate: number = coursesToBeAllocated.length;\r\n            let hasChanged = false;\r\n\r\n            // Try for each year, term; if allocation spot is free & pre-req is met, add course to term\r\n            for (var counter = 0; counter < coursesToBeAllocated.length; counter++) {\r\n                let termAllocatedFlag = false;\r\n                for (let i = 0; i < listYearsToTryAllocate.length; i++) {\r\n                    if (termAllocatedFlag === false) {\r\n                        for (let j = 0; j < listTermsToTryAllocate.length; j++) {\r\n                            let canAssignToTerm : string[] | boolean = this.courseState.getMissingRequirementsWhenAssigningCourseToTerm(coursesToBeAllocated[counter], new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]));\r\n                            let termHasSpaceToAllocate : boolean = this.termHasLessThanThreeCourses(listYearsToTryAllocate[i], listTermsToTryAllocate[j], this.courseState.termCourseMap);\r\n                            let termIsDisabled: boolean = new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]).isBefore(new TermModel(2021, \"Term 2\"))\r\n                            if (canAssignToTerm.length === 0) {\r\n                                canAssignToTerm = true;\r\n                            } else {\r\n                                canAssignToTerm = false;\r\n                            }\r\n\r\n                            if (!termIsDisabled && termHasSpaceToAllocate && canAssignToTerm) {\r\n                                this.courseState.assignCourseToTerm(coursesToBeAllocated[counter], new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]));\r\n                                termAllocatedFlag = true;\r\n                                hasChanged = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Terminating condition\r\n            // If there are no changes, this means that there are no more courses that can be allocated\r\n            // and hence terminate allocation attempt\r\n            if (hasChanged === false) {\r\n                canAllocateCourses = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    termHasLessThanThreeCourses(year: number, term: string, allocatedCourses: Map<string, CourseModel[]>) : boolean {\r\n        let dictKey = year + \"_\" + term;\r\n\r\n        if (allocatedCourses.has(dictKey)) {\r\n            // A term already has 3 courses, can't allocate\r\n            if (allocatedCourses.get(dictKey)!.length >= 3) {\r\n                return false;\r\n            }\r\n\r\n            // Term exists in allocatedTerm array, but has less than 3 courses, can allocate\r\n            return true;\r\n        } else {\r\n            // Term has not been allocated, can allocate\r\n            return true;\r\n        }\r\n    }\r\n\r\n    getYearsToTryAllocate(maxYear: number) {\r\n        var list: number[] = [];\r\n\r\n        // Return list of years with excess, incase all previous terms are full\r\n        for (var i = 2021; i <= maxYear + 4; i++) {\r\n            list.push(i);\r\n        }\r\n\r\n        return list;\r\n    }\r\n}","import \"fomantic-ui-css/semantic.min.css\";\nimport { Observer } from 'mobx-react-lite';\nimport React, { useContext } from 'react';\nimport SplitPane from 'react-split-pane';\nimport 'semantic-ui-react';\nimport { Container } from 'semantic-ui-react';\nimport './App.css';\nimport LocalImportExport from \"./containers/LocalImportExport/LocalImportExport\"\nimport { LocalImportExportViewModel } from './containers/LocalImportExport/LocalImportExportViewModel';\nimport { MenuBar } from './containers/MenuBar/MenuBar';\nimport Planner from './containers/Planner/Planner';\nimport { PlannerViewModel } from './containers/Planner/PlannerViewModel';\nimport ProgressionPlanner from './containers/ProgressionPlanner/ProgressionPlanner';\nimport { ProgressionPlannerViewModel } from './containers/ProgressionPlanner/ProgressionPlannerViewModel';\nimport SearchPanel from './containers/SearchPanel/SearchPanel';\nimport { SearchPanelViewModel } from './containers/SearchPanel/SearchPanelViewModel';\nimport { ApplicationContext } from './contexts/ApplicationContext';\nimport AutoPlanner from './containers/AutoPlan/AutoPlannerView';\nimport { AutoPlannerViewModel } from \"./containers/AutoPlan/AutoPlannerModel\";\n\nconst App = () => {\n  const applicationContext = useContext(ApplicationContext)\n\n  const searchPanelViewModel = new SearchPanelViewModel(applicationContext.searchDataState);\n  const plannerViewModel = new PlannerViewModel(applicationContext.courseState);\n  const progressionPlannerViewModel = new ProgressionPlannerViewModel(applicationContext.progressionState, applicationContext.courseState);\n  const localImportExportModel = new LocalImportExportViewModel(applicationContext.userState, applicationContext.progressionState, applicationContext.courseState);\n  const autoPlannerViewModel = new AutoPlannerViewModel(applicationContext.courseState);\n\n  return (\n    <ApplicationContext.Provider value={applicationContext}>\n      <div className=\"ui maincontainer\">\n        <MenuBar userState={applicationContext.userState} />\n        <SplitPane\n          className=\"split-pane-flex\"\n          split=\"vertical\"\n          defaultSize={\"min(50vw, 1000px)\"}\n          primary=\"second\"\n        >\n          <Container style={{ padding: 10 }} fluid>\n            <SearchPanel searchPanelViewModel={searchPanelViewModel} />\n            <Observer>\n              {\n                () => {\n                  return (\n                    !searchPanelViewModel.shouldShowPanel\n                      ? <ProgressionPlanner progressionPlannerViewModel={progressionPlannerViewModel} />\n                      : <></>\n                  )\n                }\n              }\n            </Observer>\n          </Container>\n          <Container style={{ padding: 10, paddingLeft: 50 }} fluid>\n            <LocalImportExport localImportExportViewModel={localImportExportModel} />\n            <AutoPlanner autoPlannerViewModel={autoPlannerViewModel} />\n            <Planner plannerViewModel={plannerViewModel} />\n          </Container>\n        </SplitPane>\n      </div>\n    </ApplicationContext.Provider>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}