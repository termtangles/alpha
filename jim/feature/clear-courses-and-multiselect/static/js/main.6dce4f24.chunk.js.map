{"version":3,"sources":["interfaces/ModelInterfaces.ts","containers/LocalImportExport/LocalImportExport.tsx","containers/LocalImportExport/LocalImportExportViewModel.ts","containers/MenuBar/MenuBar.tsx","containers/Planner/CourseView/CourseView.tsx","models/CourseModel.ts","containers/Planner/CourseGroupView/CourseGroupView.tsx","containers/Planner/YearView/YearView.tsx","models/TermModel.ts","containers/SearchPanel/SearchPanelViewModel.tsx","containers/Planner/components/ContextMenu/ContextMenuView.tsx","containers/Planner/utils.ts","containers/Planner/components/RegionSelect/RegionSelectView.tsx","containers/Planner/components/Dragging/DraggingView.tsx","containers/Planner/Planner.tsx","containers/Planner/PlannerViewModel.tsx","helpers/ConditionalTreeTraverser.ts","states/CourseState.ts","models/Validations/Validations.ts","models/CurriculumModel.ts","models/ProgramModel.ts","models/SpecialisationModel.ts","states/ProgressionState.ts","states/SearchDataState.ts","states/UserState.ts","contexts/ApplicationContext.ts","containers/SearchPanel/SearchPanelStyles.ts","containers/SearchPanel/Results/CourseResultView.tsx","containers/SearchPanel/Results/SpecialisationResultView.tsx","containers/ProgressionPlanner/CurriculumView/CurriculumElementsView.tsx","containers/ProgressionPlanner/CurriculumView/CurriculumContainerView.tsx","containers/ProgressionPlanner/ProgressionEntityView.tsx","containers/ProgressionPlanner/ProgressionPlanner.tsx","containers/ProgressionPlanner/ProgressionPlannerViewModel.ts","models/Filters/FilterModel.ts","models/Filters/Filters.ts","config/ResetButtonStyle.ts","containers/SearchPanel/Filter/FilterSection.tsx","containers/SearchPanel/Filter/FilterMenuView.tsx","containers/SearchPanel/Results/CourseResultCollectionView.tsx","containers/SearchPanel/SearchTab/CourseSearchTab.tsx","containers/SearchPanel/Results/ProgramResultView.tsx","containers/SearchPanel/Results/ProgramResultCollectionView.tsx","containers/SearchPanel/SearchTab/ProgramSearchTab.tsx","containers/SearchPanel/Results/SpecialisationResultCollectionView.tsx","containers/SearchPanel/SearchTab/SpecialisationSearchTab.tsx","containers/SearchPanel/SearchPanel.tsx","containers/AutoPlan/AutoPlannerView.tsx","containers/AutoPlan/AutoPlannerModel.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ProgressionStatus","ErrorCode","StudyLevel","ImportExportButton","styled","button","props","primary","css","ImportExportButtonContainer","div","LocalImportExport","localImportExportViewModel","inputRef","React","useRef","Fragment","onClick","export","current","click","ref","onChange","event","import","type","style","display","accept","SerializableVersionNumber","_versionNumber","this","imported","a","_version","console","log","LocalImportExportViewModel","userState","progressionState","courseState","_serializables","Map","set","data","FileSaver","saveAs","Blob","JSON","stringify","DateTime","now","toFormat","studyLevel","forEach","serializable","key","serialize","serializeToFile","json","parse","Promise","resolve","get","deserialize","then","catch","error","message","file","target","files","reader","FileReader","onload","ev","result","deserializeFromString","toString","value","readAsText","MenuBarView","Menu","MenuBar","observer","useState","undefined","studyLevelChangeAction","setStudyLevelChangeAction","pointing","Item","header","name","active","UNDERGRADUATE","setStudyLevel","POSTGRADUATE","RESEARCH","Modal","size","open","onClose","Header","Content","Actions","Button","negative","positive","Container","isSelected","isPrerequisiteOfCurrentDraggable","hasErrors","isDragging","isGhosting","horizontal","SelectionCount","UnselectableText","p","tooltipStyle","fontSize","CourseView","CourseStatus","termOffering","allocatedPeriod","output","slice","sort","join","formatTermOffering","course","allocatedTerm","errorList","errors","missing","missingFormatted","regex","length","replace","i","push","formatErrors","useEffect","registerDraggableRef","draggableRef","draggableId","code","index","droppableIndex","provided","snapshot","draggableProps","dragHandleProps","el","innerRef","prerequisitesOfCurrentDraggable","has","id","onCourseClick","onContextMenu","onCourseContextMenu","data-draggable","isRegionSelecting","Tooltip","title","aria-label","aria-multiline","arrow","selectedCoursesCount","Title","h3","CourseList","isDraggingOver","isValidDroppable","isMultiSelectDragging","isPossibleTermOfCurrentDraggable","courseID","TermHeader","UocLabel","Label","CourseGroupView","isPossibleTerm","term","currentDraggableProps","possibleTerms","filter","_term","equals","totalUoc","courses","map","creditPoints","reduce","b","color","content","droppableId","direction","droppableProps","selectedCourses","includes","draggingCourseId","prerequisiteCourseIds","placeholder","YearView","year","courseGroups","courseGroup","TermModel","makeAutoObservable","checkTermConstraints","Error","mappingName","parseInt","split","update","obj","tryGetTermNumber","serializedTerm","SearchPanelItem","CourseModel","contentTypeLabel","corequisites","description","effectiveDate","enrolmentRules","exclusion","facultyName","implementationYear","keywords","prerequisites","schoolName","urlMap","courseStatus","UNPLANNED","_errors","Set","ALLOCATED","clear","COMPLETED","PLANNED","add","delete","status","period","setPlanned","setCompleted","termModel","termFromSerializedData","setAllocated","e","ContextMenu","window","addEventListener","onWindowContextMenu","removeEventListener","contextRef","menuItems","setMenuItems","getContextMenuItems","areMultipleItems","plannerViewModel","remove","icon","moveSelectedToRemoved","courseModel","setUnplanned","unselectAllCourses","plan","moveSelectedToPlanned","complete","moveSelectedToCompleted","items","Object","values","defaultPrevented","preventDefault","getBoundingClientRect","left","clientX","top","clientY","right","bottom","height","width","setIsContextOpen","openContext","Popup","basic","context","isContextOpen","onItemClick","secondary","vertical","wasToggleInSelectionGroupKeyUsed","navigator","platform","metaKey","ctrlKey","RegionSelect","onMouseDown","onMouseUp","isToggleSelectionKeyUsed","setIsToggleSelectionKeyUsed","draggableBoxesRef","wasInRegion","setWasInRegion","DragSelection","useSelectionContainer","onSelectionStart","setIsRegionSelecting","draggableItemsMap","entries","previous","rect","onSelectionEnd","onSelectionChange","useCallback","box","draggableBox","alreadyInRegion","nowInRegion","boxesIntersect","prevSelected","courseSelected","toggleSelectionInGroup","Dragging","onBeforeCapture","onDragStart","initial","setIsDragging","find","getCourseById","calculateDisplayableTerms","getMissingRequirementsWhenAssigningCourseToTerm","getFlattenedPrerequisiteList","onDragEnd","destination","source","reason","setCourseByDroppableId","getAllGroups","group","courseInGroup","selectedCourse","spliceByGroupId","clearCurrentDraggableProps","children","YearPlanner","Planner","plannerState","onWindowKeyDown","onDragEnter","onDragExit","draggableItemsRef","registerDraggable","toggleSelection","completedGroup","plannedGroup","yearGroups","yearGroup","PlannerViewModel","_courseState","_plannerState","_selectedCourses","_draggingCourseId","_currentDraggableProps","makeObservable","observable","computed","action","allocatedGroups","synchronizePlannerState","state","newCourses","indexOf","splice","sourceDroppableId","destDroppableId","fromMappingName","referenceCourses","targetCourses","expectedCourses","actualCourses","coursesToRemove","coursesToAdd","maxAllocatedYear","getMaxAllocatedYear","displayableTerms","Date","getFullYear","uniqueYears","getMappingName","getFullName","newPlannerState","synchronizeCourseList","termCourseMap","plannedCourses","completedCourses","groupId","start","deleteCount","getCourseGroupById","conditionalTreeTraverser","treeNode","fnIsLeafValid","invalidations","or","childNode","and","isAndConditionalTree","CourseState","_userState","validations","getTermName","addError","COURSE_NOT_OFFERED_IN_SELECTED_TERM","getMissingPrerequisitesBeforeTerm","PREREQUISITE_REQUIREMENT_NOT_MET","getMissingPrerequisitesPlanned","PREREQUISITES_NOT_PLANNED","conflictingExclusionCourses","exclusionCourseCode","exclusionCourse","EXCLUSION_COURSE_CONFLICT","coursesMapById","coursesMapByActiveStatus","_isUpdated","reaction","_updateStudyLevel","fireImmediately","registerStudyLevelUpdateActionCallback","axios","response","transaction","_resetCourseMap","courseObj","addCourse","_loadAllCourses","mapping","courseList","allCourses","concat","allocatedCourses","uniqueTerms","keys","maxYear","courseStatusEnum","isNaN","Number","runValidations","_course","clearErrors","fnValidate","prerequisiteTree","courseCode","isBefore","resp","courseIsOffered","activeCourses","serializedCourseState","when","resetHard","serializedCourse","CurriculumContainer","elements","containers","order","uuidv4","CurriculumElement","itemCode","url","toLowerCase","parseCurriculumContainers","childrenData","rootContainerList","childContainerList","elementList","relationships","parseCurriculumElements","container","relationData","relationshipList","relationshipObj","ProgramModel","academicItemType","additionalInfo","structureSummary","curriculumStructure","intakePeriod","programConstraints","progressionStatus","program","SpecialisationModel","specialisation","ProgressionState","_programMapById","_specialisationMapById","loadAllPrograms","loadAllSpecialisations","programObj","addProgram","specialisationObj","addSpecialisation","allPrograms","allSpecialisations","plannedPrograms","plannedSpecialisations","programs","programModel","specialisations","specialisationModel","serializedProgressionState","serializedProgram","getProgramById","serializedSpecialisation","getSpecialisationById","SearchDataState","_progressionState","stringToStudyLevelMap","str","_studyLevel","_studyLevelUpdateActionCallbacks","studyLevelPromises","callback","all","isUpdated","updateAction","serializedUserState","level","searchDataState","ApplicationContext","createContext","ResultItem","ResultItemHeader","ResultItemContent","ResultItemExtra","Extra","ResultCollection","Group","ResultsPagination","Pagination","ResultsColumn","Grid","Column","CourseResultView","showOptions","setShowOptions","onMouseOver","onMouseLeave","Description","newWindow","opener","openInNewTab","Icon","className","SpecialisationResultView","onMouseEnter","CurriculumElementsView","applicationContext","useContext","curriculumElements","divided","element","isCourse","isSpecialisation","CurriculumAccordionCreditPoints","CurriculumAccordionTitle","Accordion","CurriculumDescriptionDiv","CurriculumExpandCollapseLink","CurriculumContent","CurriculumContainerView","getCreditPointsView","uocOfChildren","progressionPlannerViewModel","calculateUocOfChildren","curriculumContainer","exclusive","panels","isContainerActive","sanitizeHtml","href","toggleAllContainers","isAnySubContainerActive","entityId","onTitleClick","toggleContainer","ProgressionEntityTitle","ProgressionEntityView","entity","fluid","ProgressionContainer","ProgresionPlanner","plannedProgressionEntities","ProgressionPlannerViewModel","_progressionPlannerState","_displayableContainerPanels","getUniqueUocOfCurriculumContainer","allChildren","containerId","rootContainer","setAllContainersInactive","setAllContainersActive","FilterModel","fnGetTargetValue","_possibleValues","_selectedValues","filterResultMapping","initializeFilter","allSearchData","flat","applyFilter","searchResults","results","filterValue","isNumerical","possibleFilterValue","filterElementName","numMatchingRecords","SearchPanelViewModel","queryText","isLoading","resultsPerPage","isInputActive","searchFilters","courseFilters","programFilters","specialisationFilters","courseSearchResults","programSearchResults","specialisationSearchResults","activeItem","COURSES","setActiveItem","item","courseSearchData","setIsLoading","filters","getCourseFilters","programSearchData","getProgramFilters","specialisationSearchData","getSpecialisationFilters","autorun","searchCourses","searchPrograms","searchSpecialisations","runInAction","ResetButtonStyle","backgroundColor","border","padding","textDecoration","margin","cursor","FilterSection","expandedFilters","setExpandedFilters","filterState","getFilterState","newExpandedFilters","Form","grouped","filterElementState","Checkbox","label","checked","toggleValue","FilterMenuView","resetValue","as","CourseResultCollectionView","CourseSearchTab","activePageNumber","setActivePageNumber","columns","Row","searchPanelViewModel","Math","min","totalPages","ceil","onPageChange","activePage","ProgramResultView","ProgramResultCollectionView","ProgramSearchTab","SpecialisationResultCollectionView","SpecialisationSearchTab","ResultsSubtextContainer","FoundResults","h4","SearchPanel","getNumResults","numResults","PROGRAMS","SPECIALISATIONS","Input","loading","link","setQueryText","setInputActive","shouldShowPanel","marginRight","Dropdown","text","selection","options","setResultsPerPage","AutoPlanButton","AutoPlanner","autoPlannerViewModel","autoPlan","AutoPlannerViewModel","canAllocateCourses","listYearsToTryAllocate","getYearsToTryAllocate","listTermsToTryAllocate","coursesToBeAllocated","hasChanged","counter","termAllocatedFlag","j","canAssignToTerm","termHasSpaceToAllocate","termHasLessThanThreeCourses","termIsDisabled","assignCourseToTerm","dictKey","list","App","localImportExportModel","Provider","defaultSize","ProgressionPlanner","paddingLeft","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6dce4f24.chunk.js","sourcesContent":["export interface ICurriculumContainer {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    creditPoints: number;\r\n    elements: ICurriculumElement[];\r\n    containers: ICurriculumContainer[];\r\n    order: number;\r\n}\r\n\r\nexport interface ICurriculumElement {\r\n    name: string;\r\n    description: string;\r\n    type: string;\r\n    creditPoints: number;\r\n    itemCode: string;\r\n    url: string;\r\n    order: number;\r\n    isCourse: () => boolean;\r\n    isSpecialisation: () => boolean;\r\n}\r\n\r\nexport interface IOrConditionalTree {\r\n    or: ConditionalTree[]\r\n}\r\nexport interface IAndConditionalTree {\r\n    and: ConditionalTree[]\r\n}\r\n\r\nexport const isOrConditionalTree = (obj: any): obj is IOrConditionalTree => {\r\n    return obj && obj.or\r\n}\r\n\r\nexport const isAndConditionalTree = (obj: any): obj is IAndConditionalTree => {\r\n    return obj && obj.and\r\n}\r\n\r\nexport type ConditionalTree = IOrConditionalTree | IAndConditionalTree | string\r\n\r\nexport interface ICourse {\r\n    id: string;\r\n    code: string;\r\n    contentTypeLabel: string;\r\n    corequisites: string[];\r\n    creditPoints: number;\r\n    description: string;\r\n    effectiveDate: Date; // Form (new Date('YYYY-MM-DD'));\r\n    enrolmentRules: string[];\r\n    exclusion: string[];\r\n    facultyName: string;\r\n    implementationYear: number;\r\n    keywords: string[];\r\n    prerequisites: ConditionalTree;\r\n    schoolName: string;\r\n    studyLevel: string;\r\n    termOffering: string[];\r\n    title: string;\r\n    urlMap: string;\r\n}\r\n\r\nexport interface IProgram {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    additionalInfo: string;\r\n    implementationYear: number;\r\n    intakePeriod: Array<string>;\r\n    programConstraints: Array<any>;\r\n    studyLevel: string;\r\n}\r\n\r\nexport interface ISpecialisation {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    implementationYear: number;\r\n    keywords: string[];\r\n    studyLevel: string;\r\n    urlMap: string;\r\n}\r\n\r\nexport interface IProgressionEntity {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    structureSummary: string,\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    progressionStatus: ProgressionStatus,\r\n    setPlanned: () => void,\r\n    setUnplanned: () => void,\r\n}\r\n\r\nexport enum ProgressionStatus {\r\n    UNPLANNED,\r\n    PLANNED,\r\n}\r\n\r\nexport interface IValidatableEntity {\r\n    addError: (error: IError) => void\r\n    removeError: (error: IError) => void\r\n    hasErrors: () => boolean\r\n    clearErrors: () => void\r\n    errors: IError[]\r\n}\r\n\r\nexport enum ErrorCode {\r\n    UNKNOWN,\r\n    COURSE_NOT_OFFERED_IN_SELECTED_TERM,\r\n    PREREQUISITES_NOT_PLANNED,  \r\n    PREREQUISITE_REQUIREMENT_NOT_MET,\r\n    COREQUISITE_REQUIREMENT_NOT_MET,\r\n    EXCLUSION_COURSE_CONFLICT,\r\n}\r\n\r\nexport interface IError {\r\n    code: ErrorCode,\r\n    message: string,\r\n    missing: string,\r\n}\r\n\r\nexport enum StudyLevel {\r\n    UNDERGRADUATE=\"undergraduate\",\r\n    POSTGRADUATE=\"postgraduate\",\r\n    RESEARCH=\"research\",\r\n}\r\n","import React from 'react';\nimport { LocalImportExportViewModel } from \"./LocalImportExportViewModel\"\nimport styled, { css } from \"styled-components\"\n\nconst ImportExportButton = styled.button`\n  background: transparent;\n  border-radius: 4px;\n  border: 2px solid darkgrey;\n  color: black;\n  margin: 4px 2px;\n  padding: 15px 32px;\n  font-size: 20px;\n  display: inline-block;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n\n  transition-duration: 0.2s;\n  :hover {\n    background: #f2f2f2;\n  }\n\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */ \n\n  ${props => props.primary && css`\n    background: darkgrey;\n\n    :hover {\n      background: lightgrey;\n    }\n  `}\n`;\n\nconst ImportExportButtonContainer = styled.div`\n  width: 48%;\n  display: inline;\n  background: transparent;\n  float: left;\n  margin: 0% 1%;\n`;\n\nconst LocalImportExport = ({ localImportExportViewModel }: { [key: string]: LocalImportExportViewModel }) => {\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  return (\n    <React.Fragment>\n      <ImportExportButtonContainer>\n        <ImportExportButton primary onClick={() => { localImportExportViewModel.export() }}>\n          Export\n        </ImportExportButton>\n      </ImportExportButtonContainer>\n      <ImportExportButtonContainer>\n        <ImportExportButton onClick={() => { inputRef.current?.click() }}>\n          Import\n        </ImportExportButton>\n        <input\n          ref={inputRef}\n          onChange={(event) => localImportExportViewModel.import(event)}\n          type=\"file\"\n          style={{ display: \"none\" }}\n          accept=\"application/JSON\"\n        />\n      </ImportExportButtonContainer>\n    </React.Fragment >\n  )\n};\n\nexport default LocalImportExport;","import { CourseState } from \"../../states/CourseState\"\nimport { ProgressionState } from \"../../states/ProgressionState\"\nimport React from \"react\"\nimport { UserState } from \"../../states/UserState\"\nimport { ISerializableEntity, TermtanglesSerialized } from \"../../interfaces/SerializableInterfaces\"\nimport { DateTime } from \"luxon\"\nimport FileSaver from \"file-saver\"\n\nexport class SerializableVersionNumber implements ISerializableEntity {\n  private _versionNumber: number = 1;\n\n  serialize(): Object {\n    return this._versionNumber;\n  }\n\n  async deserialize(imported: TermtanglesSerialized): Promise<void> {\n    if (!imported._version) {\n      throw \"ERROR: Version not included.\";\n    }\n\n    console.log(\"Termtangle data version: \" + imported._version);\n  }\n}\n\nexport class LocalImportExportViewModel {\n  private _serializables = new Map<string, ISerializableEntity>();\n\n  constructor (userState: UserState, progressionState: ProgressionState, courseState: CourseState) {\n    this._serializables.set(\"_version\", new SerializableVersionNumber());\n    this._serializables.set(\"userState\", userState);\n    this._serializables.set(\"progressionState\", progressionState);\n    this._serializables.set(\"courseState\", courseState);\n  }\n\n  serializeToFile(data: TermtanglesSerialized) {\n    FileSaver.saveAs(\n      new Blob([JSON.stringify(data)], { type: \"application/json;charset=utf-8\" }),\n      `termtangles_${DateTime.now().toFormat(\"yyyyMMdd_HHmmssSSS\")}.json`,\n    );\n  }\n\n  export() {\n    const data: TermtanglesSerialized = {\n      _version: 0,\n      userState: {studyLevel: \"\"}\n    };\n    this._serializables.forEach((serializable, key) => {\n      data[key] = serializable.serialize();\n    });\n    this.serializeToFile(data);\n  }\n\n  async deserializeFromString (data: string) {\n    try {\n      const json: TermtanglesSerialized = JSON.parse(data);\n\n      return Promise.resolve(\n        this._serializables.get(\"_version\")?.deserialize(json).then(() => \n          this._serializables.get(\"userState\")?.deserialize(json).then(() => \n            Promise.resolve([\n              this._serializables.get(\"progressionState\")?.deserialize(json),\n              this._serializables.get(\"courseState\")?.deserialize(json),\n            ])\n          )\n        )\n      ).catch((error) => { console.error(error) })\n    } catch (e) {\n      console.error(`ERROR: Invalid JSON (${e.message})`);\n    }\n  }\n\n  import (event: React.ChangeEvent<HTMLInputElement>) {\n    const file: Blob = event.target.files![0];\n    \n    let reader = new FileReader();\n    reader.onload = async (ev) => {\n      if (ev.target?.result) {\n        await this.deserializeFromString(ev.target.result.toString());\n        event.target.value = \"\";\n      }\n    }\n    reader.readAsText(file);\n  }\n}\n","import styled from 'styled-components'\nimport { Observer, observer } from 'mobx-react';\nimport React, { useState } from 'react';\nimport { Button, Menu, Modal } from 'semantic-ui-react';\nimport { StudyLevel } from '../../interfaces/ModelInterfaces';\nimport { UserState } from '../../states/UserState';\n\nexport interface IMenuBarProps {\n  userState: UserState\n}\n\nconst MenuBarView = styled(Menu)`\n  &&{\n    margin: auto 0 auto 0;\n  }\n`\n\nexport const MenuBar = observer((props: IMenuBarProps) => {\n  const [studyLevelChangeAction, setStudyLevelChangeAction] = useState<(() => void) | undefined>(undefined)\n  return <Observer>\n    {() => {\n      return (\n        <React.Fragment>\n          <MenuBarView pointing>\n            <Menu.Item header>Termtangles</Menu.Item>\n            <Menu.Item\n              name={\"Undergraduate\"}\n              active={props.userState.studyLevel === StudyLevel.UNDERGRADUATE}\n              onClick={\n                () => props.userState.studyLevel !== StudyLevel.UNDERGRADUATE\n                  ? setStudyLevelChangeAction(() => () => props.userState.setStudyLevel(StudyLevel.UNDERGRADUATE))\n                  : {}\n              }\n            />\n            <Menu.Item\n              name={\"Postgraduate\"}\n              active={props.userState.studyLevel === StudyLevel.POSTGRADUATE}\n              onClick={\n                () => props.userState.studyLevel !== StudyLevel.POSTGRADUATE\n                  ? setStudyLevelChangeAction(() => () => props.userState.setStudyLevel(StudyLevel.POSTGRADUATE))\n                  : {}\n              }\n            />\n            <Menu.Item\n              name={\"Research\"}\n              active={props.userState.studyLevel === StudyLevel.RESEARCH}\n              onClick={\n                () => props.userState.studyLevel !== StudyLevel.RESEARCH\n                  ? setStudyLevelChangeAction(() => () => props.userState.setStudyLevel(StudyLevel.RESEARCH))\n                  : {}\n              }\n            />\n          </MenuBarView>\n\n          <Modal\n            size='small'\n            open={studyLevelChangeAction !== undefined}\n            onClose={() => setStudyLevelChangeAction(undefined)}\n          >\n            <Modal.Header>Study Level Change</Modal.Header>\n            <Modal.Content>\n              <p>Changing study level will reset all current progress. Do you want to continue?</p>\n            </Modal.Content>\n            <Modal.Actions>\n              <Button negative onClick={() => setStudyLevelChangeAction(undefined)}>\n                No\n              </Button>\n              <Button positive onClick={() => {\n                if (studyLevelChangeAction) {\n                  studyLevelChangeAction()\n                }\n                setStudyLevelChangeAction(undefined)\n              }}>\n                Yes\n              </Button>\n            </Modal.Actions>\n          </Modal>\n\n        </React.Fragment>\n      )\n    }}\n  </Observer>\n})\n","import styled from 'styled-components'\nimport { CourseModel } from '../../../models/CourseModel';\nimport { Draggable } from 'react-beautiful-dnd'\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { IError } from '../../../interfaces/ModelInterfaces';\nimport { TermModel } from '../../../models/TermModel';\nimport React from 'react';\nimport { useEffect } from 'react';\n\nconst getBackgroundColor = (props) => {\n  return (\n    props.isPrerequisiteOfCurrentDraggable\n      ? '#c5eafc'\n      : props.hasErrors()\n        ? '#f5bfc8'\n        : props.isDragging\n          ? 'lightgrey'\n          : 'white'\n  )\n}\n\nconst Container = styled.div`\n  border: ${(props) =>\n    props.isSelected\n      ? \"2px dashed royalblue\"\n      : \"2px solid lightgrey\"\n  };\n  border-radius: 8px;\n  padding: 8px;\n  margin: 0px 2px 8px 2px;\n  background-color: ${getBackgroundColor};\n  ${(props) =>\n    props.isDragging\n      ? `box-shadow: 2px 2px 1px lightgrey;`\n      : ''\n  }\n  \n  ${(props) =>\n    props.isGhosting\n      ? 'opacity: 0.9; color: darkgrey;'\n      : ''\n  }\n\n  /* needed for SelectionCount */\n  position: relative;\n\n  ${props => props.horizontal ? \"\" : \"flex-grow: 1;\"}\n  height: fit-content;\n  max-width: 350px;\n\n  &:active {\n    outline: none;\n    border: 2px inset lightgrey;\n  }\n\n\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */\n`\nconst SelectionCount = styled.div`\n  right: -20px;\n  top: -20px;\n  color: white;\n  background: royalblue;\n  border-radius: 50%;\n  height: 35px;\n  width: 35px;\n  line-height: 35px;\n  position: absolute;\n  text-align: center;\n  font-size: 15px;\n  \n`;\n\nconst UnselectableText = styled.p`\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */      \n`\n\nconst tooltipStyle = {\n  fontSize: 13,\n}\n\ninterface ICourseViewProps {\n  droppableIndex: number\n  course: CourseModel\n  prerequisitesOfCurrentDraggable: Set<string>\n  horizontal?: boolean\n  isSelected: boolean\n  isGhosting: boolean\n\n  registerDraggableRef: (courseModel: CourseModel, ref: React.MutableRefObject<any>) => (() => void)\n\n  selectedCoursesCount: number;\n  onCourseClick: (course: CourseModel, event: MouseEvent) => void;\n\n  onCourseContextMenu: (course: CourseModel, event: MouseEvent) => void;\n\n  isRegionSelecting: boolean;\n}\n\nconst CourseView = (props: ICourseViewProps) => {\n  let termOffering = formatTermOffering(props.course.termOffering, props.course.allocatedTerm);\n  let errorList: string[] = formatErrors(props.course.errors);\n\n  useEffect(() => {\n    return props.registerDraggableRef(props.course, draggableRef);\n  })\n\n  // Drag region selection\n  const draggableRef = React.useRef<HTMLDivElement | null | undefined>();\n\n  return (\n    <Draggable draggableId={props.course.code} index={props.droppableIndex} >\n      {((provided, snapshot) => {\n        return (\n          <Container\n            horizontal={props.horizontal}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            ref={(el) => {\n              provided.innerRef(el);\n              draggableRef.current = el;\n            }}\n            isDragging={snapshot.isDragging}\n            isPrerequisiteOfCurrentDraggable={props.prerequisitesOfCurrentDraggable.has(props.course.id)}\n            hasErrors={() => props.course.hasErrors()}\n            isSelected={props.isSelected}\n            onClick={(event: MouseEvent) => props.onCourseClick(props.course, event)}\n            isGhosting={props.isGhosting}\n            onContextMenu={(event: MouseEvent) => props.onCourseContextMenu(props.course, event)}\n            // https://github.com/AirLabsTeam/react-drag-to-select#working-with-draggable-elements\n            // Tell region select this is a draggable.\n            data-draggable={true}\n          >\n\n            {props.isRegionSelecting ? (\n              <Tooltip title={\n                <span>\n                  <UnselectableText style={tooltipStyle}>{termOffering}</UnselectableText>\n                  <UnselectableText style={tooltipStyle}>{errorList[0]}</UnselectableText>\n                  <UnselectableText style={tooltipStyle}>{errorList[1]}</UnselectableText>\n                </span>}\n                aria-label=\"add\" aria-multiline=\"true\" arrow={true}\n              >\n                <UnselectableText> {props.course.code} - {props.course.title}</UnselectableText>\n              </Tooltip>\n            ) : <UnselectableText> {props.course.code} - {props.course.title}</UnselectableText>}\n\n            {snapshot.isDragging && props.selectedCoursesCount > 1 ? (\n              <SelectionCount>{props.selectedCoursesCount}</SelectionCount>\n            ) : undefined}\n          </Container>\n        )\n      })}\n    </Draggable>\n  )\n}\n\nfunction formatErrors(errors: IError[]): string[] {\n  let output: string[] = [];\n  let missing: string[] = [];\n  let missingFormatted: string[] = [];\n  const regex = /<br\\/>/ig;\n\n  if (errors.length === 0) {\n    return [\"\"];\n  }\n\n  if (errors.length === 1) {\n    return [errors[0].message.replace(regex, \"\"), `${errors[0].missing} `];\n  }\n\n  for (let i = 0; i < errors.length; i++) {\n    output.push(errors[i].message.replace(regex, \"\"));\n    missing.push(errors[i].missing);\n  }\n\n  // Format missing arr for empty elements and remove from array before joining\n  for (let i = 0; i < errors.length; i++) {\n    if (missing[i] !== \"\") {\n      missingFormatted.push(missing[i]);\n    }\n  }\n\n  return [output.join(\" & \"), missingFormatted.join(\" & \")];\n}\n\nfunction formatTermOffering(termOffering: string[], allocatedPeriod: TermModel | undefined) {\n  termOffering = termOffering.slice().sort();\n  let output: string = termOffering.join(\", \");\n\n  output = `Term Offerings: ${output} `;\n\n  return output;\n}\n\nexport default CourseView\n","import { makeAutoObservable } from \"mobx\";\nimport { TermModel } from \"./TermModel\";\nimport { SerializedCourse, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\nimport { ICourse, ConditionalTree, IValidatableEntity, IError } from '../interfaces/ModelInterfaces';\n\nexport enum CourseStatus {\n  UNPLANNED,\n  PLANNED,\n  ALLOCATED,\n  COMPLETED,\n}\n\nexport class CourseModel implements ICourse, IValidatableEntity, ISerializableEntity {\n  allocatedTerm: TermModel | undefined = undefined;\n  public readonly id: string\n  public courseStatus: CourseStatus = CourseStatus.UNPLANNED // Default unplanned\n\n  private _errors: Set<IError> = new Set<IError>()\n\n  constructor(\n    public readonly code: string,\n    public readonly contentTypeLabel: string,\n    public readonly corequisites: string[],\n    public readonly creditPoints: number,\n    public readonly description: string,\n    public readonly effectiveDate: Date, // Form (new Date('YYYY-MM-DD'));\n    public readonly enrolmentRules: string[],\n    public readonly exclusion: string[],\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly keywords: string[],\n    public readonly prerequisites: ConditionalTree,\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly termOffering: string[],\n    public readonly title: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code;\n    makeAutoObservable(this)\n  }\n\n  setAllocated(term: TermModel) {\n    this.courseStatus = CourseStatus.ALLOCATED\n    this.allocatedTerm = term\n  }\n\n  setUnplanned() {\n    this._errors.clear()\n    this.courseStatus = CourseStatus.UNPLANNED\n    this.allocatedTerm = undefined\n  }\n\n  setCompleted() {\n    this._errors.clear()\n    this.courseStatus = CourseStatus.COMPLETED\n    this.allocatedTerm = undefined\n  }\n\n  setPlanned() {\n    this.courseStatus = CourseStatus.PLANNED\n    this.allocatedTerm = undefined\n  }\n\n  //#region IValidatableEntity\n  addError(error: IError) {\n    this._errors.add(error)\n  }\n\n  removeError (error: IError) {\n    this._errors.delete(error)\n  }\n\n  hasErrors(): boolean {\n    return this._errors.size > 0\n  }\n\n  clearErrors() {\n    this._errors.clear()\n  }\n\n  get errors(): IError[] {\n    return [...this._errors]\n  }\n  //#endregion\n\n  serialize(): SerializedCourse {\n    if (this.courseStatus !== CourseStatus.ALLOCATED) {\n      return {\n        id: this.id,\n        status: CourseStatus[this.courseStatus],\n      }\n    } else {\n      return {\n        id: this.id,\n        status: CourseStatus[this.courseStatus],\n        period: this.allocatedTerm?.serialize(),\n      }\n    }\n  }\n\n  async deserialize(course: SerializedCourse) {\n    if (course.id !== this.id) {\n      console.error(`ERROR: This course is not ${course.id} (is: ${this.id})`);\n      return;\n    }\n\n    switch(course.status) {\n      case (CourseStatus[CourseStatus.PLANNED]): {\n        this.setPlanned();\n        break;\n      }\n      case (CourseStatus[CourseStatus.COMPLETED]): {\n        this.setCompleted();\n        break;\n      }\n      case (CourseStatus[CourseStatus.ALLOCATED]): {\n        if (course.period) {\n          try {\n            let termModel = TermModel.termFromSerializedData(course.period);\n            this.setAllocated(termModel);\n          } catch (e) {\n            console.error(`ERROR: invalid term period passed in ${course.period} (${e.message})`);\n          }\n          \n        } else {\n          console.error(`ERROR: Allocated course status with no period ${course.id}`);\n        }\n        break;\n      }\n      default: {\n        console.error(`ERROR: ${course.status} is not a valid status`);\n      }\n    }\n  }\n\n  toString() {\n    return `[COURSE_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadCourseByCode(courseCode: string) {\n//   return db.collection(\"courses\")\n//     .doc(courseCode)!\n//     .withConverter(courseConverter)\n//     .get().then((doc) => {\n//       if (doc.exists) {\n//         var course = doc.data()!;\n\n//         return course;\n//       } else {\n//         console.log(\"No such document!\");\n//       }\n//     }).catch((error) => {\n//       console.log(\"Error getting document:\", error);\n//       throw new Error();\n//     });\n// }\n\n// let courseConverter = {\n//   toFirestore: function (course) {\n//     return {\n//       name: course.code,\n//     };\n//   },\n//   fromFirestore: function (snapshot, options) {\n//     const data = snapshot.data(options);\n//     let effectiveDate = new Date(data.effectiveDate);\n\n//     return new CourseModel(\n//       data.code,\n//       data.contentTypeLabel,\n//       data.corequisites,\n//       Number(data.creditPoints),\n//       data.description,\n//       effectiveDate,\n//       data.enrolmentRules,\n//       data.exclusion,\n//       data.facultyName,\n//       Number(data.implementationYear),\n//       data.keywords,\n//       data.prerequisites,\n//       data.schoolName,\n//       data.studyLevel,\n//       data.termOffering,\n//       data.title,\n//       data.urlMap,\n//     );\n//   }\n// };","import { Droppable } from 'react-beautiful-dnd';\nimport { Label } from 'semantic-ui-react';\nimport styled from 'styled-components'\nimport { CourseModel } from '../../../models/CourseModel';\nimport { TermModel } from '../../../models/TermModel';\nimport CourseView from '../CourseView/CourseView';\nimport { ICurrentDraggableProps } from '../PlannerViewModel';\n\nconst Container = styled.div`\n  margin: 8px;\n  border: 1px solid lightgrey;\n  border-radius:2px;\n\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  ${props => !props.horizontal ? \"max-width: 350px\" : \"\"};\n  ${props => props.title === \"Planned\" ? \"min-width: 350px\" : \"\"};\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */ \n`\n\nconst Title = styled.h3`\n  padding: 6px;\n  margin: 0 0;\n  display: flex;\n  width: 200px;\n`;\n\nconst CourseList = styled.div`\n  padding: 6px;\n  min-height: 100px;\n  transition: background-color 0.2s ease;\n  background-color: ${props =>\n  (props.isDraggingOver\n    ? props.isValidDroppable || props.isMultiSelectDragging\n      ? '#8debb7'\n      : '#ff99b0'\n    : props.isPossibleTermOfCurrentDraggable\n      ? '#cafae0'\n      : (props.courseID === \"completed\")\n        ? '#edf2f4'\n        : (props.courseID === \"planned\")\n          ? '#edf2f4'\n          : '#edf2f4'\n  )\n  };\n  flex-grow: 1;\n  display: flex;\n  flex-direction: ${props => props.horizontal ? \"row\" : \"column\"};\n  flex-flow: row ${props => props.horizontal ? \"wrap\" : \"nowrap\"};\n  align-content: flex-start;\n  max-width: inherit;\n`;\n\n\n\nconst TermHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`\n\nconst UocLabel = styled(Label)`\n  && {\n    margin: auto 0 auto 0;\n    height: fit-content;\n    vertical-align: middle;\n    white-space: nowrap;\n  } \n`\n\ninterface ITermViewProps {\n  id: string\n  title: string\n  courses: CourseModel[]\n  term: TermModel | null\n  currentDraggableProps: ICurrentDraggableProps\n  horizontal?: boolean\n\n  registerDraggableRef: (courseModel: CourseModel, ref: React.MutableRefObject<any>) => (() => void)\n\n  selectedCourses: CourseModel[];\n  draggingCourseId?: string;\n  onCourseClick: (course: CourseModel, event: MouseEvent) => void;\n\n  onCourseContextMenu: (course: CourseModel, event: MouseEvent) => void;\n\n  isRegionSelecting: boolean;\n}\n\nconst CourseGroupView = (props: ITermViewProps) => {\n  const isPossibleTerm = (term: TermModel | null): boolean => {\n    return props.currentDraggableProps.possibleTerms.filter(_term => _term.equals(term)).length > 0\n  }\n  const totalUoc = props.courses.map(course => course.creditPoints).reduce((a, b) => a + b, 0)\n\n  return (\n    <Container horizontal={props.horizontal} title={props.title}>\n      <TermHeader>\n        <Title>{props.title}</Title>\n        {\n          props.term\n            ? <UocLabel\n              color={(totalUoc === 18 || props.courses.length === 3)\n                ? \"green\"\n                : totalUoc < 18\n                  ? \"orange\"\n                  : \"yellow\"\n              }\n              content={`${totalUoc} UOC`}\n              size={\"small\"}\n            />\n            : <></>\n        }\n      </TermHeader>\n      <Droppable\n        droppableId={props.id}\n        direction={props.horizontal ? 'horizontal' : 'vertical'}\n      >\n        {\n          (provided, snapshot) => (\n            <CourseList\n              horizontal\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              isDraggingOver={snapshot.isDraggingOver}\n              courseID={provided.droppableProps['data-rbd-droppable-id']}\n              isPossibleTermOfCurrentDraggable={isPossibleTerm(props.term)}\n              isValidDroppable={props.term === null || isPossibleTerm(props.term)}\n              isMultiSelectDragging={props.selectedCourses.length > 1}\n            >\n              {\n                props.courses ? props.courses.map((course, index) => {\n                  const isSelected: boolean = props.selectedCourses.includes(course);\n                  const isGhosting: boolean = isSelected && !!props.draggingCourseId && props.draggingCourseId !== course.id;\n                  return (\n                    <CourseView\n                      horizontal={props.horizontal}\n                      key={course.code}\n                      course={course}\n                      droppableIndex={index}\n                      prerequisitesOfCurrentDraggable={props.currentDraggableProps.prerequisiteCourseIds}\n                      isSelected={isSelected}\n                      isGhosting={isGhosting}\n                      registerDraggableRef={props.registerDraggableRef}\n                      selectedCoursesCount={props.selectedCourses.length}\n                      onCourseClick={props.onCourseClick}\n                      onCourseContextMenu={props.onCourseContextMenu}\n                      isRegionSelecting={props.isRegionSelecting}\n                    />\n                  )\n                })\n                  : undefined\n              }\n              {provided.placeholder}\n            </CourseList>\n          )\n        }\n      </Droppable>\n    </Container>\n  )\n};\nexport default CourseGroupView\n","import styled from 'styled-components';\nimport { CourseModel } from '../../../models/CourseModel';\nimport CourseGroupView from '../CourseGroupView/CourseGroupView';\nimport { ICourseGroup, ICurrentDraggableProps } from '../PlannerViewModel';\n\nconst Container = styled.div`\n    margin: 8px;\n    border: 1px solid lightgrey;\n    border-radius:2px;\n    width: 250px;\n    -webkit-user-select: none;  /* Chrome all / Safari all */\n    -moz-user-select: none;     /* Firefox all */\n    -ms-user-select: none;      /* IE 10+ */\n    user-select: none;          /* Likely future */ \n`\n\nconst Title = styled.h3`\n    padding: 6px;\n    margin: 3px;\n    display: flex;\n    width: 200px;\n`;\n\ninterface IYearViewProps {\n  id: string,\n  title: string,\n  year: number,\n  courseGroups: ICourseGroup[],\n  currentDraggableProps: ICurrentDraggableProps,\n\n  registerDraggableRef: (courseModel: CourseModel, ref: React.MutableRefObject<any>) => (() => void)\n\n  selectedCourses: CourseModel[];\n  draggingCourseId?: string;\n  onCourseClick: (course: CourseModel, event: MouseEvent) => void;\n\n  onCourseContextMenu: (course: CourseModel, event: MouseEvent) => void;\n\n  isRegionSelecting: boolean;\n}\n\nconst YearView = (props: IYearViewProps) => {\n  return (\n    <Container>\n      <Title>{props.year}</Title>\n      {\n        props.courseGroups.map(courseGroup => {\n          // console.log(`Rendering term ${courseGroup.title} with courses ${courseGroup.courses}`)\n          return (\n            <CourseGroupView\n              key={courseGroup.id}\n              id={courseGroup.id}\n              title={courseGroup.title}\n              courses={courseGroup.courses}\n              term={courseGroup.term}\n              currentDraggableProps={props.currentDraggableProps}\n              registerDraggableRef={props.registerDraggableRef}\n              selectedCourses={props.selectedCourses}\n              draggingCourseId={props.draggingCourseId}\n              onCourseClick={props.onCourseClick}\n              onCourseContextMenu={props.onCourseContextMenu}\n              isRegionSelecting={props.isRegionSelecting}\n            />\n          )\n        })\n      }\n    </Container>\n  )\n};\nexport default YearView\n","import { makeAutoObservable } from \"mobx\";\nimport { SerializedTerm, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\n\nexport class TermModel implements ISerializableEntity {\n    year: number;\n    name: string;\n\n    constructor(\n        year: number,\n        name: string,\n    ) {\n        makeAutoObservable(this);\n        this.checkTermConstraints(year, name);\n        \n        this.year = year;\n        this.name = name;\n    }\n\n    static termFromSerializedData(serializedTerm: SerializedTerm) {\n        return new TermModel(serializedTerm.year, serializedTerm.name);\n    }\n\n    private checkTermConstraints(year?: number, name?: string) {\n        if (!year) throw Error(`ERROR: ${year} is not a valid term year.`);\n        if (!name) throw Error(`ERROR: ${name} is not a valid term name.`);\n\n        // Do other term checks here\n    }\n\n    // getShortName() {\n    //     if (this.tryGetTermNumber()) {\n    //         return `${this.year % 100}T${this.tryGetTermNumber()}`\n    //     }\n    //     return `${this.year % 100} ${this.name}`\n    // }\n\n    get getMappingName() {\n        return `${this.year}_${this.name}`\n    }\n\n    update(year: number, name: string) {\n        this.year = year\n        this.name = name\n    }\n\n    updateFromMappingName(mappingName: string) {\n        let year = parseInt(mappingName.split('_')[0])\n        let name = mappingName.split('_')[1]\n        this.update(year, name)\n    }\n\n    get getFullName() {\n        return `${this.year} ${this.name}`\n    }\n\n    get getTermName() {\n        return `${this.name}`\n    }\n\n    static fromMappingName(mappingName: string) {\n        let year = parseInt(mappingName.split('_')[0])\n        let term_name = mappingName.split('_')[1]\n\n        return new TermModel(year, term_name)\n    }\n\n    private tryGetTermNumber(): number | undefined {\n        switch (this.name) {\n            case \"Summer Term\":\n                return 0\n            case \"Term 1\":\n                return 1\n            case \"Term 2\":\n                return 2\n            case \"Term 3\":\n                return 3\n            default:\n                return undefined\n        }\n    }\n\n    public equals(obj: TermModel | null): boolean {\n        if (!obj) {\n            return false\n        }\n        return this.year === obj.year && this.name === obj.name\n    }\n\n    public isBefore(term: TermModel) {\n        return this.year < term.year\n            || (term.year === this.year && ( (this.tryGetTermNumber() ?? 99) < (term.tryGetTermNumber() ?? 99)) );\n    }\n\n    serialize(): SerializedTerm {\n        return {\n            year: this.year,\n            name: this.name,\n        };\n    }\n\n    deserialize(serializedTerm: SerializedTerm): Promise<void> {\n        throw Error(`ERROR: use static method termFromSerializedData to construct the term from serialized data ${serializedTerm}.`);\n    }\n}\n","import { autorun, makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport { CourseModel } from \"../../models/CourseModel\";\nimport { FilterModel } from \"../../models/Filters/FilterModel\";\nimport { getCourseFilters, getProgramFilters, getSpecialisationFilters } from \"../../models/Filters/Filters\";\nimport { ProgramModel } from \"../../models/ProgramModel\";\nimport { SpecialisationModel } from \"../../models/SpecialisationModel\";\nimport { SearchDataState } from \"../../states/SearchDataState\";\n\nexport interface ISearchQuery<T> {\n  queryText: string,\n  filters: FilterModel<T>[],\n}\n\nexport interface ISearchResults {\n  courseSearchResults: CourseModel[],\n  programSearchResults: ProgramModel[],\n  specialisationSearchResults: SpecialisationModel[],\n}\n\nexport interface ISearchFilters {\n  courseFilters: FilterModel<CourseModel>[],\n  programFilters: FilterModel<ProgramModel>[],\n  specialisationFilters: FilterModel<SpecialisationModel>[],\n}\n\nexport enum SearchPanelItem {\n  COURSES,\n  PROGRAMS,\n  SPECIALISATIONS,\n}\n\nexport class SearchPanelViewModel {\n  constructor(\n    public readonly searchDataState: SearchDataState,\n  ) {\n    makeAutoObservable<SearchPanelViewModel>(this)\n\n    reaction(() => searchDataState.courseSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.courseFilters = getCourseFilters(searchDataState.courseSearchData)\n    }, {fireImmediately: true})\n\n    reaction(() => searchDataState.programSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.programFilters = getProgramFilters(searchDataState.programSearchData)\n    }, {fireImmediately: true})\n\n    reaction(() => searchDataState.specialisationSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.specialisationFilters = getSpecialisationFilters(searchDataState.specialisationSearchData)\n    }, {fireImmediately: true})\n\n    autorun(() => {\n      this.searchCourses()\n    });\n\n    autorun(() => {\n      this.searchPrograms()\n    });\n\n    autorun(() => {\n      this.searchSpecialisations()\n    });\n  }\n\n  public queryText: string = \"\"\n  public isLoading: boolean = true\n  public resultsPerPage: number = 10\n  public isInputActive: boolean = false\n  public searchFilters: ISearchFilters = {\n    courseFilters: [],\n    programFilters: [],\n    specialisationFilters: [],\n  }\n  public searchResults: ISearchResults = {\n    courseSearchResults: [],\n    programSearchResults: [],\n    specialisationSearchResults: [],\n  }\n  public activeItem: SearchPanelItem = SearchPanelItem.COURSES\n\n  public setActiveItem = (item: SearchPanelItem) => {\n    this.activeItem = item\n  }\n\n  get shouldShowPanel() {\n    return this.isInputActive || this.queryText.length > 0\n  }\n\n  setInputActive(isInputActive: boolean) {\n    this.isInputActive = isInputActive;\n  }\n\n  setQueryText(queryText: string) {\n    this.queryText = queryText\n  }\n\n  setIsLoading(isLoading: boolean) {\n    this.isLoading = isLoading\n  }\n\n  setResultsPerPage(resultsPerPage: number) {\n    this.resultsPerPage = resultsPerPage\n  }\n\n  searchCourses() {\n    let results = this.searchDataState.courseSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.courseSearchData\n        .filter(course => {\n          return course.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || course.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.courseFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.courseSearchResults = results)\n  }\n  \n\n  searchPrograms() {\n    let results = this.searchDataState.programSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.programSearchData\n        .filter(program => {\n          return program.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || program.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.programFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.programSearchResults = results)\n  }\n\n  searchSpecialisations() {\n    let results = this.searchDataState.specialisationSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.specialisationSearchData\n        .filter(specialisation => {\n          return specialisation.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || specialisation.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.specialisationFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.specialisationSearchResults = results)\n  }\n\n\n}\n","import { observer, Observer } from \"mobx-react\";\nimport React from \"react\";\nimport { Popup, Menu, MenuItemProps } from \"semantic-ui-react\";\nimport { CourseModel, CourseStatus } from \"../../../../models/CourseModel\";\nimport { PlannerViewModel } from \"../../PlannerViewModel\";\n\ninterface ContextMenuProps {\n  plannerViewModel: PlannerViewModel;\n  isContextOpen: boolean;\n  setIsContextOpen: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nconst ContextMenu = observer((props: ContextMenuProps) => {\n  React.useEffect(() => {\n    window.addEventListener(\"contextmenu\", onWindowContextMenu);\n\n    return () => {\n      window.removeEventListener(\"contextmenu\", onWindowContextMenu);\n    }\n  })\n\n  const contextRef = React.useRef<any>();\n\n  const [menuItems, setMenuItems] = React.useState<MenuItemProps[]>([]);\n\n  const getContextMenuItems = (course?: CourseModel): MenuItemProps[] => {\n    const areMultipleItems = props.plannerViewModel.selectedCourses.length > 1;\n    const menuItems: { [key: string]: MenuItemProps } = {\n      remove: {\n        key: 'remove',\n        content: `Remove ${areMultipleItems ? \"all courses\" : \"course\"}`,\n        icon: 'delete calendar',\n        onClick: () => {\n          const moveSelectedToRemoved = () => {\n            props.plannerViewModel.selectedCourses.forEach((courseModel) => courseModel.setUnplanned());\n            props.plannerViewModel.unselectAllCourses();\n          }\n          if (!course) {\n            moveSelectedToRemoved();\n          } else {\n            if (props.plannerViewModel.selectedCourses.includes(course)) moveSelectedToRemoved();\n            course.setUnplanned();\n          }\n        }\n      },\n      plan: {\n        key: 'plan',\n        content: `Move ${areMultipleItems ? \"all courses\" : \"course\"} to planned`,\n        icon: 'bookmark',\n        onClick: () => {\n          const moveSelectedToPlanned = () => {\n            props.plannerViewModel.selectedCourses.forEach((courseModel) => courseModel.setPlanned());\n          }\n          if (!course) {\n            moveSelectedToPlanned();\n          } else {\n            if (props.plannerViewModel.selectedCourses.includes(course)) moveSelectedToPlanned();\n            course.setPlanned();\n          }\n        }\n      },\n      complete: {\n        key: 'complete',\n        content: `Move ${areMultipleItems ? \"all courses\" : \"course\"} to completed`,\n        icon: 'checked calendar',\n        onClick: () => {\n          const moveSelectedToCompleted = () => {\n            props.plannerViewModel.selectedCourses.forEach((courseModel) => courseModel.setCompleted());\n          }\n          if (!course) {\n            moveSelectedToCompleted();\n          } else {\n            if (props.plannerViewModel.selectedCourses.includes(course)) moveSelectedToCompleted();\n            course.setCompleted();\n          }\n        }\n      },\n    };\n    if (course) {\n      if (course.courseStatus === CourseStatus.UNPLANNED) {\n        const { remove, ...items } = menuItems;\n        return Object.values(items);\n      } else if (course.courseStatus === CourseStatus.PLANNED) {\n        const { plan, ...items } = menuItems;\n        return Object.values(items);\n      } else if (course.courseStatus === CourseStatus.COMPLETED) {\n        const { complete, ...items } = menuItems;\n        return Object.values(items);\n      }\n    }\n    return Object.values(menuItems);\n  }\n\n  const openContext = (event: MouseEvent) => {\n    contextRef.current = {\n      getBoundingClientRect: () => ({\n        left: event.clientX,\n        top: event.clientY,\n        right: event.clientX + 1,\n        bottom: event.clientY + 1,\n        height: 0,\n        width: 0,\n      }),\n    }\n    props.setIsContextOpen(true);\n  }\n\n  const onWindowContextMenu = (event: MouseEvent) => {\n    if (event.defaultPrevented) return;\n\n    const selectedCourses = props.plannerViewModel.selectedCourses;\n    if (selectedCourses.length === 0) {\n      // Don't use context when no items selected. Possibly change this.\n      return;\n    } else if (selectedCourses.length === 1) {\n      // If only 1 selected course, show a relevant context menu for that course\n      setMenuItems(getContextMenuItems(selectedCourses[0]))\n    } else {\n      // If more than 1 selected course, show a general context\n      setMenuItems(getContextMenuItems());\n    }\n\n    event.preventDefault();\n\n    openContext(event);\n  }\n\n  return <Observer>\n    {() => {\n      return (\n        <Popup\n          basic\n          context={contextRef}\n          onClose={() => props.setIsContextOpen(false)}\n          open={props.isContextOpen}\n        >\n          <Menu\n            items={menuItems}\n            onItemClick={(e) => {\n              e.preventDefault();\n              props.setIsContextOpen(false);\n            }}\n            secondary\n            vertical\n          />\n        </Popup>\n      )\n    }}\n  </Observer>\n})\n\nexport default ContextMenu;","import React from \"react\";\n\nexport const wasToggleInSelectionGroupKeyUsed = (event: MouseEvent | React.MouseEvent | KeyboardEvent | React.KeyboardEvent) => {\n  return navigator.platform.includes('Mac')\n    ? event.metaKey\n    : event.ctrlKey;\n};","import React from \"react\";\nimport { useEffect } from \"react\";\nimport { Box, boxesIntersect, useSelectionContainer } from \"react-drag-to-select\";\nimport { CourseModel } from \"../../../../models/CourseModel\";\nimport { PlannerViewModel } from \"../../PlannerViewModel\";\nimport { wasToggleInSelectionGroupKeyUsed } from \"../../utils\";\n\ninterface RegionSelectProps {\n  plannerViewModel: PlannerViewModel,\n  setIsRegionSelecting: (b: boolean) => void;\n  draggableItemsMap: Map<CourseModel, HTMLDivElement>,\n}\n\nconst RegionSelect = (props: RegionSelectProps) => {\n  React.useEffect(() => {\n    window.addEventListener(\"mousedown\", onMouseDown);\n    window.addEventListener(\"mouseup\", onMouseUp);\n\n    return () => {\n      window.removeEventListener(\"mousedown\", onMouseDown)\n      window.removeEventListener(\"mouseup\", onMouseUp);\n    }\n  })\n\n  const onMouseDown = (event: MouseEvent) => {\n    if (isToggleSelectionKeyUsed) return;\n    if (wasToggleInSelectionGroupKeyUsed(event)) setIsToggleSelectionKeyUsed(true)\n  }\n  const onMouseUp = (event: MouseEvent) => {\n    setIsToggleSelectionKeyUsed(false)\n  }\n\n  const draggableBoxesRef = React.useRef<[CourseModel, Box][]>([]);\n\n  const [isToggleSelectionKeyUsed, setIsToggleSelectionKeyUsed] = React.useState(false);\n  const [wasInRegion, setWasInRegion] = React.useState<CourseModel[]>([]);\n\n  const onSelectionStart = () => {\n    props.setIsRegionSelecting(true);\n    draggableBoxesRef.current = [...props.draggableItemsMap.entries()].reduce((previous: [CourseModel, Box][], [courseModel, div]): [CourseModel, Box][] => {\n      const rect = div.getBoundingClientRect();\n      return [\n        ...previous,\n        [courseModel, rect]\n      ];\n    }, []);\n  }\n\n  const onSelectionChangeWithToggleKey = (box: Box) => {\n    draggableBoxesRef.current\n      .filter(([courseModel, draggableBox]) => {\n        const alreadyInRegion = wasInRegion.includes(courseModel);\n        const nowInRegion = boxesIntersect(box, draggableBox);\n\n        // Item not in region and we don't need to worry about it, or item already processed\n        if (alreadyInRegion === nowInRegion) return false;\n\n        if (alreadyInRegion && !nowInRegion) {\n          // Draggable escapes a region, toggle it and remove from items in region.\n          setWasInRegion(prevSelected => prevSelected.filter((courseSelected) => courseSelected.id !== courseModel.id));\n        }\n\n        if (!alreadyInRegion && nowInRegion) {\n          // Draggable enters a region, toggle it and add to items in region.\n          setWasInRegion(prevSelected => [...prevSelected, courseModel]);\n        }\n        return true;\n      }, [])\n      .forEach(([courseModel, _]) => props.plannerViewModel.toggleSelectionInGroup(courseModel));\n  }\n\n  const onSelectionChangeWithoutToggleKey = (box: Box) => {\n    draggableBoxesRef.current\n      .filter(([courseModel, draggableBox]) => {\n        const isSelected: boolean = props.plannerViewModel.selectedCourses.includes(courseModel);\n        const isIntersecting: boolean = boxesIntersect(box, draggableBox);\n\n        return (isSelected !== isIntersecting);\n      }, [])\n      .forEach(([courseModel, _]) => props.plannerViewModel.toggleSelectionInGroup(courseModel));\n  }\n\n  const onSelectionEnd = () => {\n    draggableBoxesRef.current = [];\n    setWasInRegion([]);\n  }\n\n  const { DragSelection } = useSelectionContainer({\n    onSelectionStart,\n    onSelectionEnd,\n\n    onSelectionChange: React.useCallback(\n      isToggleSelectionKeyUsed\n        ? onSelectionChangeWithToggleKey\n        : onSelectionChangeWithoutToggleKey\n      , [isToggleSelectionKeyUsed, wasInRegion]\n    ),\n  });\n\n  return (<DragSelection />)\n}\n\nexport default RegionSelect;","import React from \"react\";\nimport { DragDropContext, DragStart, DropResult } from \"react-beautiful-dnd\";\nimport { CourseModel } from \"../../../../models/CourseModel\";\nimport { ICourseGroup, PlannerViewModel } from \"../../PlannerViewModel\";\n\ninterface DraggingProps extends React.PropsWithChildren<any> {\n  plannerViewModel: PlannerViewModel\n  setIsDragging: React.Dispatch<React.SetStateAction<boolean>>\n\n}\n\nconst Dragging = (props: DraggingProps) => {\n  const courseState = props.plannerViewModel.courseState;\n\n  const onDragStart = (initial: DragStart) => {\n    props.setIsDragging(true);\n\n    const selected: CourseModel | undefined = props.plannerViewModel.selectedCourses.find(\n      (course: CourseModel): boolean => course.id === initial.draggableId,\n    );\n\n    if (!selected) props.plannerViewModel.unselectAllCourses();\n\n    props.plannerViewModel.draggingCourseId = initial.draggableId;\n\n    const course = courseState.getCourseById(initial.draggableId);\n\n    if (!course) return;\n\n    // Don't calculate validations if we are multi selecting\n    if (props.plannerViewModel.selectedCourses.length > 1) return;\n\n    props.plannerViewModel.currentDraggableProps = {\n      ...props.plannerViewModel.currentDraggableProps,\n      possibleTerms: props.plannerViewModel.calculateDisplayableTerms().filter(term => {\n        return courseState.getMissingRequirementsWhenAssigningCourseToTerm(course, term).length === 0\n      }),\n      prerequisiteCourseIds: new Set<string>(courseState.getFlattenedPrerequisiteList(course.prerequisites))\n    }\n  }\n\n  const onDragEnd = (result: DropResult) => {\n    const { destination, source } = result;\n    if (!destination || result.reason === \"CANCEL\") {\n      props.plannerViewModel.draggingCourseId = undefined;\n      return;\n    }\n    if (!props.plannerViewModel.draggingCourseId) return;\n\n    props.plannerViewModel.selectedCourses.forEach((course: CourseModel) =>\n      props.plannerViewModel.setCourseByDroppableId(course, source.droppableId, destination.droppableId)\n    );\n\n    const allGroups = props.plannerViewModel.getAllGroups();\n    allGroups.forEach((group: ICourseGroup) => {\n      group.courses = group.courses.filter((courseInGroup: CourseModel) =>\n        !props.plannerViewModel.selectedCourses.find((selectedCourse: CourseModel) =>\n          selectedCourse.id === courseInGroup.id\n        )\n      )\n    })\n    props.plannerViewModel.spliceByGroupId(destination.droppableId, destination.index, 0, ...props.plannerViewModel.selectedCourses)\n\n    const draggingCourseIsSelected: boolean = !!props.plannerViewModel.selectedCourses.find((courseModel) => {\n      return courseModel.id === props.plannerViewModel.draggingCourseId;\n    });\n    if (!draggingCourseIsSelected) {\n      const courseModel = courseState.getCourseById(props.plannerViewModel.draggingCourseId);\n      if (courseModel) {\n        props.plannerViewModel.setCourseByDroppableId(courseModel, source.droppableId, destination.droppableId);\n        props.plannerViewModel.spliceByGroupId(source.droppableId, source.index, 1);\n        props.plannerViewModel.spliceByGroupId(destination.droppableId, destination.index + props.plannerViewModel.selectedCourses.length, 0, courseModel);\n      }\n    }\n\n    props.setIsDragging(false);\n\n    props.plannerViewModel.draggingCourseId = undefined;\n\n    props.plannerViewModel.clearCurrentDraggableProps()\n  }\n\n  const onBeforeCapture = () => {\n    props.plannerViewModel.currentDraggableProps = {\n      ...props.plannerViewModel.currentDraggableProps,\n      isDragging: true,\n    }\n  }\n\n  return (\n    <DragDropContext\n      onBeforeCapture={onBeforeCapture}\n      onDragStart={onDragStart}\n      onDragEnd={onDragEnd}\n    >\n      {props.children}\n    </DragDropContext>\n  )\n}\nexport default Dragging;","import { Observer, observer } from 'mobx-react';\nimport React, { useEffect } from 'react';\nimport styled from 'styled-components'\nimport { PlannerViewModel } from './PlannerViewModel';\nimport CourseGroupView from './CourseGroupView/CourseGroupView';\nimport YearView from './YearView/YearView';\nimport { CourseModel } from '../../models/CourseModel';\nimport ContextMenu from \"./components/ContextMenu/ContextMenuView\"\nimport RegionSelect from './components/RegionSelect/RegionSelectView';\nimport Dragging from './components/Dragging/DraggingView';\nimport { wasToggleInSelectionGroupKeyUsed } from \"./utils\"\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n`\n\nconst YearPlanner = styled.div`\n  display: inherit;\n  overflow: auto;\n`\n\nconst Planner = observer(({ plannerViewModel }: { [key: string]: PlannerViewModel }) => {\n  return <Observer>\n    {() => {\n      const plannerState = plannerViewModel.plannerState;\n\n      useEffect(() => {\n        window.addEventListener(\"keydown\", onWindowKeyDown);\n        window.addEventListener(\"dragenter\", onDragEnter);\n        window.addEventListener(\"dragexit\", onDragExit);\n        window.addEventListener(\"mouseup\", onMouseUp);\n\n        return () => {\n          window.removeEventListener(\"keydown\", onWindowKeyDown);\n          window.removeEventListener(\"dragenter\", onDragEnter);\n          window.removeEventListener(\"dragexit\", onDragExit);\n          window.removeEventListener(\"mouseup\", onMouseUp);\n        }\n      });\n\n      // Drag region selection\n      const draggableItemsRef = React.useRef(new Map<CourseModel, HTMLDivElement>());\n      const [isRegionSelecting, setIsRegionSelecting] = React.useState(false);\n\n      const registerDraggable = (courseModel: CourseModel, ref: React.MutableRefObject<HTMLDivElement | null | undefined>): (() => void) => {\n        if (!ref.current) return () => { };\n        draggableItemsRef.current.set(courseModel, ref.current);\n\n        return () => {\n          draggableItemsRef.current.delete(courseModel);\n        };\n      }\n\n      // Dragging\n      const [isDragging, setIsDragging] = React.useState(false);\n\n      // Multi select\n      const onWindowKeyDown = (event: KeyboardEvent) => {\n        if (event.defaultPrevented) return;\n\n        if (event.key === \"Escape\") plannerViewModel.unselectAllCourses();\n      }\n\n      const onMouseUp = (event: MouseEvent) => {\n        if (isContextOpen) return;\n\n        if (isDragging) return;\n\n        event.preventDefault();\n\n        if (isRegionSelecting) {\n          setIsRegionSelecting(false);\n          return;\n        }\n\n        if (event.button !== 0) return;\n        if (wasToggleInSelectionGroupKeyUsed(event)) return;\n\n        plannerViewModel.unselectAllCourses();\n      }\n\n      const onDragEnter = (event) => {\n        event.preventDefault();\n      }\n\n      const onDragExit = (event) => {\n        event.preventDefault();\n      }\n\n      const onCourseClick = (course: CourseModel, event: MouseEvent) => {\n        if (event.defaultPrevented) return;\n\n        if (event.button !== 0) return;\n\n        if (isRegionSelecting) return;\n\n        event.preventDefault();\n        if (isContextOpen) return;\n\n        if (wasToggleInSelectionGroupKeyUsed(event)) {\n          plannerViewModel.toggleSelectionInGroup(course);\n          return;\n        }\n\n        plannerViewModel.toggleSelection(course);\n      }\n\n      // Context menu\n      const [isContextOpen, setIsContextOpen] = React.useState(false);\n\n      const onCourseContextMenu = (course: CourseModel, event: MouseEvent) => {\n        if (event.defaultPrevented) return;\n\n        if (plannerViewModel.selectedCourses.includes(course)) return;\n\n        plannerViewModel.toggleSelection(course);\n      }\n\n      return (\n        <React.Fragment>\n          <RegionSelect\n            plannerViewModel={plannerViewModel}\n            draggableItemsMap={draggableItemsRef.current}\n            setIsRegionSelecting={setIsRegionSelecting}\n          />\n          <ContextMenu\n            plannerViewModel={plannerViewModel}\n            isContextOpen={isContextOpen}\n            setIsContextOpen={setIsContextOpen}\n          />\n          <Dragging\n            plannerViewModel={plannerViewModel}\n            setIsDragging={setIsDragging}\n          >\n            {\n              <CourseGroupView\n                horizontal={true}\n                key={plannerState.completedGroup.id}\n                id={plannerState.completedGroup.id}\n                title={plannerState.completedGroup.title}\n                term={null}\n                courses={plannerState.completedGroup.courses}\n                currentDraggableProps={plannerViewModel.currentDraggableProps}\n                selectedCourses={plannerViewModel.selectedCourses}\n                draggingCourseId={plannerViewModel.draggingCourseId}\n                onCourseClick={onCourseClick}\n                onCourseContextMenu={onCourseContextMenu}\n                isRegionSelecting={isRegionSelecting}\n                registerDraggableRef={registerDraggable}\n              />\n            }\n            <Container>\n              {\n                <CourseGroupView\n                  horizontal={false}\n                  key={plannerState.plannedGroup.id}\n                  id={plannerState.plannedGroup.id}\n                  title={plannerState.plannedGroup.title}\n                  term={null}\n                  courses={plannerState.plannedGroup.courses}\n                  currentDraggableProps={plannerViewModel.currentDraggableProps}\n                  selectedCourses={plannerViewModel.selectedCourses}\n                  draggingCourseId={plannerViewModel.draggingCourseId}\n                  onCourseClick={onCourseClick}\n                  onCourseContextMenu={onCourseContextMenu}\n                  isRegionSelecting={isRegionSelecting}\n                  registerDraggableRef={registerDraggable}\n                />\n              }\n              <YearPlanner>\n                {\n                  plannerState.yearGroups.map(yearGroup => {\n                    return <YearView\n                      id={yearGroup.id}\n                      title={yearGroup.title}\n                      year={yearGroup.year}\n                      courseGroups={yearGroup.courseGroups}\n                      currentDraggableProps={plannerViewModel.currentDraggableProps}\n                      selectedCourses={plannerViewModel.selectedCourses}\n                      draggingCourseId={plannerViewModel.draggingCourseId}\n                      onCourseClick={onCourseClick}\n                      onCourseContextMenu={onCourseContextMenu}\n                      isRegionSelecting={isRegionSelecting}\n                      registerDraggableRef={registerDraggable}\n                    />\n                  })\n                }\n              </YearPlanner>\n            </Container>\n            {\n              plannerViewModel.currentDraggableProps.isDragging\n                ?\n                <CourseGroupView\n                  horizontal={true}\n                  key={\"trash\"}\n                  id={\"trash\"}\n                  title={\"Remove\"}\n                  term={null}\n                  courses={[]}\n                  currentDraggableProps={plannerViewModel.currentDraggableProps}\n                  selectedCourses={plannerViewModel.selectedCourses}\n                  draggingCourseId={plannerViewModel.draggingCourseId}\n                  onCourseClick={onCourseClick}\n                  onCourseContextMenu={onCourseContextMenu}\n                  isRegionSelecting={isRegionSelecting}\n                  registerDraggableRef={registerDraggable}\n                />\n                : <></>\n            }\n          </Dragging>\n        </React.Fragment>\n      )\n    }}\n  </Observer >\n})\n\nexport default Planner;\n","import { action, computed, makeObservable, observable } from \"mobx\";\nimport { CourseModel, CourseStatus } from \"../../models/CourseModel\";\nimport { TermModel } from \"../../models/TermModel\";\nimport { CourseState } from \"../../states/CourseState\";\n\nexport interface ICourseGroup {\n  id: string,\n  title: string,\n  term: TermModel | null,\n  courses: CourseModel[],\n}\n\nexport interface IYearGroup {\n  id: string,\n  year: number\n  title: string,\n  courseGroups: ICourseGroup[],\n}\n\nexport interface IPlannerState {\n  id: string,\n  title: string,\n  allocatedGroups: ICourseGroup[],\n  yearGroups: IYearGroup[],\n  completedGroup: ICourseGroup,\n  plannedGroup: ICourseGroup,\n}\n\nexport interface ICurrentDraggableProps {\n  isDragging: boolean,\n  possibleTerms: TermModel[]\n  prerequisiteCourseIds: Set<string>\n}\n\nexport class PlannerViewModel {\n  constructor(courseState: CourseState) {\n    makeObservable<PlannerViewModel,\n      \"_currentDraggableProps\" | \"_selectedCourses\" | \"_draggingCourseId\"\n    >(this, {\n      _currentDraggableProps: observable,\n      currentDraggableProps: computed,\n      clearCurrentDraggableProps: action,\n\n      _selectedCourses: observable,\n      selectedCourses: computed,\n\n      _draggingCourseId: observable,\n      draggingCourseId: computed,\n    })\n\n    this._courseState = courseState\n    this._plannerState = {\n      id: \"plannerState\",\n      title: \"Visualizer\",\n      allocatedGroups: [],\n      yearGroups: [],\n      completedGroup: {\n        id: \"completed\",\n        title: \"Completed\",\n        term: null,\n        courses: [],\n      },\n      plannedGroup: {\n        id: \"planned\",\n        title: \"Planned\",\n        term: null,\n        courses: [],\n      },\n    }\n  }\n\n  private _courseState: CourseState\n  get courseState(): CourseState {\n    return this._courseState\n  }\n\n  private _plannerState: IPlannerState\n  get plannerState(): IPlannerState {\n    this.synchronizePlannerState()\n    return this._plannerState\n  }\n\n  //#region selectedCourses\n\n  private _selectedCourses: CourseModel[] = [];\n\n  get selectedCourses(): CourseModel[] {\n    return this._selectedCourses;\n  }\n\n  set selectedCourses(state: CourseModel[]) {\n    this._selectedCourses = state;\n  }\n\n  unselectAllCourses() {\n    this.selectedCourses = [];\n  }\n\n  toggleSelection(course: CourseModel) {\n    const selectedCourses = this.selectedCourses;\n    const wasSelected: boolean = selectedCourses.includes(course);\n\n    const newCourses = (() => {\n      // Task not previously selected or part of the selected group, now the only selected item\n      if (!wasSelected || selectedCourses.length > 1) {\n        return [course];\n      }\n\n      // Task previously selected but not in a group, clear the selection\n      return [];\n    })();\n\n    this.selectedCourses = newCourses;\n  }\n\n  toggleSelectionInGroup(course: CourseModel) {\n    const selectedCourses = this.selectedCourses;\n    const index: number = selectedCourses.indexOf(course);\n\n    // if not selected - add it to the selected items\n    if (index === -1) {\n      this.selectedCourses = [...selectedCourses, course];\n      return;\n    }\n\n    // it was previously selected and now needs to be removed from the group\n    const newCourses: CourseModel[] = [...selectedCourses];\n    newCourses.splice(index, 1);\n    this.selectedCourses = newCourses;\n  };\n\n  //#endregion\n\n  setCourseByDroppableId(course: CourseModel, sourceDroppableId: string, destDroppableId: string) {\n    if (sourceDroppableId === destDroppableId) return;\n\n    if (destDroppableId === \"trash\") {\n      course.setUnplanned()\n    } else if (destDroppableId === \"completed\") {\n      course.setCompleted()\n    } else if (destDroppableId === \"planned\") {\n      course.setPlanned()\n    } else {\n      course.setAllocated(TermModel.fromMappingName(destDroppableId))\n    }\n  }\n\n  //#region draggingCourseId\n\n  private _draggingCourseId: undefined | string = undefined;\n  get draggingCourseId(): undefined | string {\n    return this._draggingCourseId;\n  }\n  set draggingCourseId(id: undefined | string) {\n    this._draggingCourseId = id;\n  }\n\n  //#endregion\n\n  private synchronizeCourseList(referenceCourses: CourseModel[], targetCourses: CourseModel[]): void {\n    let expectedCourses = new Set(referenceCourses)\n    let actualCourses = new Set(targetCourses)\n\n    let coursesToRemove = new Set([...actualCourses].filter(course => !expectedCourses.has(course)))\n    let coursesToAdd = new Set([...expectedCourses].filter(course => !actualCourses.has(course)))\n\n    coursesToRemove.forEach(course => {\n      let index = targetCourses.indexOf(course)\n      targetCourses.splice(index, 1)\n    })\n\n    coursesToAdd.forEach(course => {\n      targetCourses.push(course)\n    })\n  }\n\n  calculateDisplayableTerms(): TermModel[] {\n    let maxAllocatedYear = this._courseState.getMaxAllocatedYear\n    const currentYear = new Date().getFullYear()\n    let displayableTerms: TermModel[] = []\n    for (let year: number = currentYear; year <= maxAllocatedYear + 1; ++year) {\n      displayableTerms.push(new TermModel(year, \"Summer Term\"))\n      displayableTerms.push(new TermModel(year, \"Term 1\"))\n      displayableTerms.push(new TermModel(year, \"Term 2\"))\n      displayableTerms.push(new TermModel(year, \"Term 3\"))\n    }\n    return displayableTerms\n  }\n\n  synchronizePlannerState(): void {\n    const displayableTerms = this.calculateDisplayableTerms()\n    const uniqueYears = [...new Set(displayableTerms.map(term => term.year))].sort()\n    const allocatedGroups: ICourseGroup[] = displayableTerms.map((term: TermModel) => {\n      return {\n        id: term.getMappingName,\n        title: term.getFullName,\n        term: term,\n        courses: this._plannerState.allocatedGroups.find(group => group.id === term.getMappingName)?.courses ?? [],\n      }\n    })\n    let newPlannerState: IPlannerState = {\n      ...this._plannerState,\n      allocatedGroups: allocatedGroups,\n      yearGroups: uniqueYears.map((year: number) => {\n        return {\n          id: `yearGroup_${year.toString()}`,\n          title: year.toString(),\n          year: year,\n          courseGroups: allocatedGroups.filter(group => group.term?.year === year) ?? [],\n        }\n      }),\n    }\n\n    newPlannerState.allocatedGroups.forEach((courseGroup: ICourseGroup) => {\n      this.synchronizeCourseList(this._courseState.termCourseMap.get(courseGroup.id) ?? [], courseGroup.courses)\n    })\n\n    newPlannerState.yearGroups.forEach(yearGroup => {\n      yearGroup.courseGroups.forEach((courseGroup: ICourseGroup) => {\n        this.synchronizeCourseList(this._courseState.termCourseMap.get(courseGroup.id) ?? [], courseGroup.courses)\n      })\n    })\n\n    this.synchronizeCourseList(this._courseState.plannedCourses, newPlannerState.plannedGroup.courses)\n    this.synchronizeCourseList(this._courseState.completedCourses, newPlannerState.completedGroup.courses)\n    this._plannerState = newPlannerState\n  }\n\n  private getCourseGroupById(groupId: string): ICourseGroup | undefined {\n    if (this._plannerState.completedGroup.id === groupId) {\n      return this._plannerState.completedGroup\n    } else if (this._plannerState.plannedGroup.id === groupId) {\n      return this._plannerState.plannedGroup\n    } else {\n      return this._plannerState.allocatedGroups.find(group => group.id === groupId)\n    }\n  }\n\n  getAllGroups(): ICourseGroup[] {\n    return [this._plannerState.completedGroup, this._plannerState.plannedGroup, ...this._plannerState.allocatedGroups];\n  }\n\n  spliceByGroupId(droppableId: string, start: number, deleteCount?: number): CourseModel[];\n\n  spliceByGroupId(droppableId: string, start: number, deleteCount: number, ...items: CourseModel[]): CourseModel[];\n\n  spliceByGroupId(droppableId: string, start: number, deleteCount?: number, ...items: CourseModel[]): CourseModel[] {\n    const group = this.getCourseGroupById(droppableId);\n    if (!group) return [];\n\n    if (deleteCount) {\n      return group.courses.splice(start, deleteCount, ...items)\n    } else {\n      return group.courses.splice(start, 0, ...items);\n    }\n  }\n\n  //#region currentDraggableProps\n\n  private _currentDraggableProps: ICurrentDraggableProps = {\n    isDragging: false,\n    possibleTerms: [],\n    prerequisiteCourseIds: new Set<string>(),\n  }\n\n  get currentDraggableProps(): ICurrentDraggableProps {\n    return { ...this._currentDraggableProps }\n  }\n\n  set currentDraggableProps(props: ICurrentDraggableProps) {\n    this._currentDraggableProps = props;\n  }\n\n  clearCurrentDraggableProps(): void {\n    this.currentDraggableProps = {\n      isDragging: false,\n      possibleTerms: [],\n      prerequisiteCourseIds: new Set<string>(),\n    }\n  }\n\n  //#endregion\n\n}\n","import { ConditionalTree, isAndConditionalTree, isOrConditionalTree } from \"../interfaces/ModelInterfaces\";\n\n\nexport const conditionalTreeTraverser = (\n  treeNode: ConditionalTree,\n  fnIsLeafValid: (treeNode: ConditionalTree) => boolean,\n): string[] => {\n  let invalidations: string[] = [];\n\n  if (isOrConditionalTree(treeNode)) {\n    for (let childNode of treeNode.or) {\n      let result = conditionalTreeTraverser(childNode, fnIsLeafValid)\n      if (result.length === 0) {\n        invalidations = []\n        break\n      }\n      invalidations.push(...result)\n    }\n  } else if (isAndConditionalTree(treeNode)) {\n    treeNode.and.forEach(childNode => {\n      invalidations.push(...conditionalTreeTraverser(childNode, fnIsLeafValid))\n    })\n  } else if (!fnIsLeafValid(treeNode)) {\n    invalidations.push(treeNode)\n  }\n  // console.log(treeNode)\n  // console.log(invalidations)\n  return invalidations\n}\n","import { action, makeAutoObservable, reaction, transaction, when } from \"mobx\";\nimport { conditionalTreeTraverser } from '../helpers/ConditionalTreeTraverser';\nimport { ConditionalTree, StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { CourseModel, CourseStatus } from \"../models/CourseModel\";\nimport { SerializedCourseState, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\nimport { TermModel } from \"../models/TermModel\";\nimport { getCourseValidations } from \"../models/Validations/Validations\";\nimport { UserState } from \"./UserState\";\nimport axios from \"axios\"\n\nexport class CourseState implements ISerializableEntity {\n  constructor(\n    private _userState: UserState\n  ) {\n    makeAutoObservable(this)\n    reaction(\n      () => this._userState.studyLevel,\n      () => {\n        this._isUpdated = false;\n        this._updateStudyLevel()\n          // .then(() => {\n          //   // this.getCourseById(\"COMP1511\")?.setCompleted()\n    \n          //   this.getCourseById(\"COMP1521\")?.setPlanned()\n    \n          //   this.getCourseById(\"COMP3231\")?.setPlanned()\n          //   let COMP9444 = this.getCourseById(\"COMP9444\")\n          //   if (COMP9444) {\n          //     this.assignCourseToTerm(COMP9444, new TermModel(2021, \"Term 3\"))\n          //   }\n          //   let MATH1081 = this.getCourseById(\"MATH1081\")\n          //   if (MATH1081) {\n          //     this.assignCourseToTerm(MATH1081, new TermModel(2021, \"Term 2\"))\n          //   }\n          //   let COMP2041 = this.getCourseById(\"COMP2041\")\n          //   if (COMP2041) {\n          //     this.assignCourseToTerm(COMP2041, new TermModel(2021, \"Term 2\"))\n          //   }\n          //   let COMP9417 = this.getCourseById(\"COMP9417\")\n          //   if (COMP9417) {\n          //     this.assignCourseToTerm(COMP9417, new TermModel(2022, \"Term 3\"))\n          //   }\n          //   let MATH1231 = this.getCourseById(\"MATH1231\")\n          //   if (MATH1231) {\n          //     this.assignCourseToTerm(MATH1231, new TermModel(2021, \"Term 3\"))\n          //   }\n          // })\n      },\n      { fireImmediately: true }\n    );\n    _userState.registerStudyLevelUpdateActionCallback(() => Promise.resolve(this._updateStudyLevel()));\n  }\n\n  private validations = getCourseValidations(this)\n\n  private coursesMapById = new Map<string, CourseModel>();\n\n  private coursesMapByActiveStatus = new Map<CourseStatus, Map<string, CourseModel>>();\n\n  private _isUpdated: boolean = false;\n\n  get isUpdated(): boolean {\n    return this._isUpdated;\n  }\n\n  get allCourses() {\n    return [...this.coursesMapById.values()]\n  }\n\n  private _resetCourseMap() {\n    this.coursesMapById = new Map<string, CourseModel>();\n    this.coursesMapByActiveStatus = new Map<CourseStatus, Map<string, CourseModel>>();\n    this.coursesMapByActiveStatus.set(CourseStatus.UNPLANNED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.PLANNED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.ALLOCATED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.COMPLETED, new Map<string, CourseModel>());\n  }\n\n  private async _loadAllCourses(studyLevel: StudyLevel) {\n    return axios.get(`https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_courses.json`)\n      .then(response => {\n        transaction(() => {\n          this._resetCourseMap()\n          response.data.forEach(courseObj => {\n            let course = new CourseModel(\n              courseObj.code,\n              courseObj.contentTypeLabel,\n              courseObj.corequisites,\n              courseObj.creditPoints,\n              courseObj.description,\n              courseObj.effectiveDate,\n              courseObj.enrolmentRules,\n              courseObj.exclusion,\n              courseObj.facultyName,\n              courseObj.implementationYear,\n              courseObj.keywords,\n              courseObj.prerequisites,\n              courseObj.schoolName,\n              courseObj.studyLevel,\n              courseObj.termOffering,\n              courseObj.title,\n              courseObj.urlMap,\n            )\n\n            this.addCourse(course)\n          })\n        })\n    });\n  }\n\n  private async _updateStudyLevel() {\n    await this._loadAllCourses(this._userState.studyLevel);\n    this._isUpdated = true;\n  }\n\n  get termCourseMap(): Map<string, CourseModel[]> {\n    // console.log('running mapping')\n    let mapping = new Map<string, CourseModel[]>();\n    this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.forEach(course => {\n      if (!course.allocatedTerm) {\n        return;\n      }\n      let courseList = mapping.get(course.allocatedTerm.getMappingName)\n      if (!courseList) {\n        mapping.set(course.allocatedTerm.getMappingName, [course])\n      } else {\n        courseList.push(course)\n      }\n    })\n    return mapping\n  }\n\n  get completedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.COMPLETED)?.values() ?? []]\n  }\n\n  get plannedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.PLANNED)?.values() ?? []]\n  }\n\n  get allocatedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.values() ?? []]\n  }\n\n  get activeCourses(): CourseModel[] {\n    let allCourses: CourseModel[] = [];\n    allCourses = allCourses.concat(this.completedCourses, this.plannedCourses, this.allocatedCourses);\n    return allCourses;\n  }\n\n  get getMaxAllocatedYear(): number {\n    const uniqueTerms = [...this.termCourseMap.keys()]\n    let maxYear = new Date().getFullYear()\n    if (uniqueTerms.length > 0) {\n      maxYear = TermModel.fromMappingName(uniqueTerms.sort().slice(-1)[0]).year\n    }\n    return maxYear\n  }\n\n  getCourseById(id: string): CourseModel | undefined {\n    return this.coursesMapById.get(id)\n  }\n\n  addCourse(course: CourseModel) {\n    this.coursesMapById.set(course.id, course);\n    reaction(() => course.courseStatus, () => {\n      for (let courseStatusEnum in CourseStatus) {\n        if (!isNaN(Number(courseStatusEnum))) continue\n        const courseStatus: CourseStatus = CourseStatus[courseStatusEnum as keyof typeof CourseStatus]\n        if (courseStatus !== course.courseStatus) {\n          this.coursesMapByActiveStatus.get(courseStatus)?.delete(course.id)\n        } else {\n          this.coursesMapByActiveStatus.get(courseStatus)?.set(course.id, course)\n        }\n      }\n    }, {\n      fireImmediately: true,\n    })\n\n    reaction(() => course.courseStatus, () => {\n      this.runValidations();\n    }, {\n      fireImmediately: true,\n    })\n\n    reaction(() => course.allocatedTerm, () => {\n      this.runValidations();\n    }, {\n      fireImmediately: true,\n    })\n  }\n\n  runValidations() {\n    transaction(() => {\n      this.coursesMapByActiveStatus.get(CourseStatus.PLANNED)?.forEach(_course => {\n        _course.clearErrors()\n        this.validations.forEach(fnValidate => {\n          fnValidate(_course)\n        })\n      })\n      this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.forEach(_course => {\n        _course.clearErrors()\n        this.validations.forEach(fnValidate => {\n          fnValidate(_course)\n        })\n      })\n      this.coursesMapByActiveStatus.get(CourseStatus.COMPLETED)?.forEach(_course => {\n        _course.clearErrors()\n      })\n    })\n  }\n\n  private resetHard() {\n    [...this.coursesMapById.values()].forEach((course) => {\n      course.setUnplanned();\n    });\n  }\n\n  getFlattenedPrerequisiteList(prerequisiteTree: ConditionalTree) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      return false\n    })\n  }\n\n  getMissingPrerequisitesBeforeTerm(prerequisiteTree: ConditionalTree, term: TermModel) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      if (typeof (treeNode) === 'string') {\n        const courseCode: string = treeNode;\n        const course = this.getCourseById(courseCode)\n\n        return course\n          ? ((course.courseStatus === CourseStatus.ALLOCATED && course.allocatedTerm?.isBefore(term))\n            || course.courseStatus === CourseStatus.COMPLETED)\n          : false\n      }\n      return true\n    })\n  }\n\n  getMissingPrerequisitesPlanned(prerequisiteTree: ConditionalTree) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      if (typeof (treeNode) === 'string') {\n        const courseCode: string = treeNode;\n        const course = this.getCourseById(courseCode)\n        return course\n          ? course.courseStatus !== CourseStatus.UNPLANNED\n          : false\n      }\n      return true\n    })\n  }\n\n  courseIsOffered(term: TermModel, termOffering: string[]): boolean {\n    for (let i = 0; i < termOffering.length; i++) {\n      if (term.getTermName === termOffering[i]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getMissingRequirementsWhenAssigningCourseToTerm(course: CourseModel, term: TermModel): string[] {\n    let resp: string[] = this.getMissingPrerequisitesBeforeTerm(course.prerequisites, term)\n\n    // term = current term input, termOffering = List of avaliable terms\n    if (!this.courseIsOffered(term, course.termOffering)) {\n      resp.push(`Course is not offered in ${term.getFullName}`)\n    }\n\n    return resp\n  }\n\n  assignCourseToTerm(course: CourseModel, term: TermModel): boolean {\n    const invalidations = this.getMissingRequirementsWhenAssigningCourseToTerm(course, term)\n    if (invalidations.length === 0) {\n      course.setAllocated(term)\n      return true\n    }\n\n    return false\n  }\n\n  serialize(): SerializedCourseState {\n    return {\n      courses: this.activeCourses.map((courseModel) => {\n        return courseModel.serialize();\n      })\n    }\n  }\n\n  async deserialize(json: TermtanglesSerialized): Promise<void> {\n    if (!json.courseState) {\n      return;\n    }\n\n    const serializedCourseState = json.courseState;\n    if (!serializedCourseState.courses) {\n      return;\n    }\n\n    await when(() => { return this._isUpdated; })\n\n    this.resetHard();\n\n    serializedCourseState.courses.forEach((serializedCourse) => {\n      if (!serializedCourse.id) return;\n\n      const courseModel = this.getCourseById(serializedCourse.id);\n      if (courseModel) {\n        courseModel.deserialize(serializedCourse);\n      } else {\n        console.error(`ERROR: ${serializedCourse.id} is not a valid course.`);\n      }\n    });\n  }\n}\n","import { ErrorCode } from \"../../interfaces/ModelInterfaces\"\nimport { CourseState } from \"../../states/CourseState\"\nimport { CourseModel, CourseStatus } from \"../CourseModel\"\n\nexport const getCourseValidations = (courseState: CourseState): ((course: CourseModel) => void)[] => {\n  const validations = [\n    (course: CourseModel) => {\n      // console.log(`Running validation COURSE_NOT_OFFERED_IN_SELECTED_TERM on course ${course.code}`)\n      if (course.allocatedTerm && !course.termOffering.includes(course.allocatedTerm.getTermName)) {\n        course.addError({\n          code: ErrorCode.COURSE_NOT_OFFERED_IN_SELECTED_TERM,\n          message: `This course is not offered in ${course.allocatedTerm.getTermName}`,\n          missing: \"\"\n        })\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation PREREQUISITE_REQUIREMENT_NOT_MET on course ${course.code}`)\n      if (course.allocatedTerm) {\n        let missing = courseState.getMissingPrerequisitesBeforeTerm(course.prerequisites, course.allocatedTerm)\n        if (missing.length > 0) {\n          course.addError({\n            code: ErrorCode.PREREQUISITE_REQUIREMENT_NOT_MET,\n            message: `The prerequisites for this course are not satisfied\\n${course.enrolmentRules.join(\";\")}`,\n            missing: `Missing: ${missing}`\n          })\n        }\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation PREREQUISITES_NOT_PLANNED on course ${course.code}`)\n      if (course.courseStatus !== CourseStatus.ALLOCATED) {\n        let missing = courseState.getMissingPrerequisitesPlanned(course.prerequisites)\n        if (missing.length > 0) {\n          course.addError({\n            code: ErrorCode.PREREQUISITES_NOT_PLANNED,\n            message: `A valid combination of prerequisites for this course have not been planned\\n${course.enrolmentRules.join(\";\")}`,\n            missing: `Missing: ${missing}`\n          })\n        }\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation EXCLUSION_COURSE_CONFLICT on course ${course.code}`)\n      let conflictingExclusionCourses: string[] = []\n      course.exclusion.forEach((exclusionCourseCode) => {\n        let exclusionCourse = courseState.getCourseById(exclusionCourseCode)\n        if (exclusionCourse && exclusionCourse.courseStatus !== CourseStatus.UNPLANNED) {\n          conflictingExclusionCourses.push(exclusionCourseCode)\n        }\n      })\n      if (conflictingExclusionCourses.length > 0) {\n        course.addError({\n          code: ErrorCode.EXCLUSION_COURSE_CONFLICT,\n          message: `The following exclusion courses conflict with this course ${conflictingExclusionCourses.join(\", \")}`,\n          missing: \"\"\n        })\n      }\n    }\n  ]\n  return validations\n}\n","import { ICurriculumContainer, ICurriculumElement } from \"../interfaces/ModelInterfaces\";\nimport {v4 as uuidv4} from 'uuid';\n\nexport class CurriculumContainer implements ICurriculumContainer {\n    public readonly id: string = uuidv4();\n    constructor(\n        public readonly title: string,\n        public readonly description: string,\n        public readonly creditPoints: number,\n        public readonly elements: ICurriculumElement[],\n        public readonly containers: ICurriculumContainer[],\n        public readonly order: number,\n    ) {\n    }\n\n    toString() {\n        return this.title + ', ' + this.description;\n    }\n}\n\nexport class CurriculumElement implements ICurriculumElement {\n    constructor(\n        public readonly name: string,\n        public readonly description: string,\n        public readonly type: string,\n        public readonly creditPoints: number,\n        public readonly itemCode: string,\n        public readonly url: string,\n        public readonly order: number,\n    ) { }\n\n    public isCourse(): boolean {\n        return this.type.toLowerCase() === \"course\"\n    }\n\n    public isSpecialisation(): boolean {\n        return [\"major\", \"minor\", \"specialisation\", \"honours\"].includes(this.type.toLowerCase())\n    }\n\n    toString() {\n        return this.name + ', ' + this.type;\n    }\n}\n\n// Arg: Array of json data where each json contains data for Children Obj\nexport const parseCurriculumContainers = (childrenData: Array<any>): Array<CurriculumContainer> => {\n    let rootContainerList: CurriculumContainer[] = [];\n    \n    childrenData.forEach((data) => {\n        let childContainerList: CurriculumContainer[] = [];\n        let elementList: CurriculumElement[] = [];\n        // If nested children containers exist, recursively transform jsonData \n        // into Children obj\n        if (data.children.length > 0) {\n            childContainerList = parseCurriculumContainers(data.children);\n        }\n\n        if (data.relationships.length > 0) {\n            elementList = parseCurriculumElements(data.relationships);\n        }\n\n        let container = new CurriculumContainer(\n            data.title,\n            data.description,\n            Number(data.creditPoints),\n            elementList,\n            childContainerList,\n            Number(data.order)\n        );\n\n        rootContainerList.push(container);\n    })\n\n    return rootContainerList;\n}\n\n// Arg: Array of json data where each json contains data for Relationship obj\nexport const parseCurriculumElements = (relationData: Array<any>): Array<CurriculumElement> => {\n    let relationshipList: CurriculumElement[] = [];\n\n    relationData.forEach((data) => {\n        let relationshipObj = new CurriculumElement(\n            data.name,\n            data.description,\n            data.type,\n            Number(data.creditPoints),\n            data.itemCode,\n            data.url,\n            Number(data.order)\n        )\n\n        relationshipList.push(relationshipObj);\n    })\n\n    return relationshipList;\n}\n","import { makeAutoObservable } from 'mobx';\nimport { ICurriculumContainer, IProgram, IProgressionEntity, ProgressionStatus } from '../interfaces/ModelInterfaces';\nimport { SerializedProgram, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\n\nexport class ProgramModel implements IProgram, IProgressionEntity, ISerializableEntity {\n  public readonly id: string\n  public progressionStatus: ProgressionStatus = ProgressionStatus.UNPLANNED\n\n  constructor(\n    public readonly code: string,\n    public readonly title: string,\n    public readonly academicItemType: string,\n    public readonly additionalInfo: string,\n    public readonly creditPoints: number,\n    public readonly structureSummary: string,\n    public readonly curriculumStructure: Array<ICurriculumContainer>,\n    public readonly description: string,\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly intakePeriod: Array<string>,\n    public readonly programConstraints: Array<any>,\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code\n    makeAutoObservable(this)\n  }\n\n  setPlanned() {\n    this.progressionStatus = ProgressionStatus.PLANNED\n  }\n\n  setUnplanned() {\n    this.progressionStatus = ProgressionStatus.UNPLANNED\n  }\n\n  serialize(): SerializedProgram {\n    return {\n      id: this.code,\n    };\n  }\n\n  async deserialize(program: SerializedProgram): Promise<void> {\n    if (program.id !== this.id) {\n      console.error(`ERROR: This program is not ${program.id} (is: ${this.id})`);\n      return;\n    }\n    \n    this.setPlanned();\n  }\n\n  toString() {\n    return `[PROGRAM_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadProgramByCode(programCode: string) {\n//     return db.collection(\"programs\")\n//         .doc(programCode)!\n//         .withConverter(programConverter)\n//         .get().then((doc) => {\n//             if (doc.exists) {\n//                 var program = doc.data()!;\n\n//                 return program;\n//             } else {\n//                 console.log(\"No such document!\");\n//             }\n//         }).catch((error) => {\n//             console.log(\"Error getting document:\", error);\n//             throw new Error();\n//         });\n// }\n\n// let programConverter = {\n//     toFirestore: function (program) {\n//         return {\n//             name: program.code,\n//         };\n//     },\n//     fromFirestore: function (snapshot, options) {\n//         const data = snapshot.data(options);\n\n//         return new ProgramModel(\n//             data.academicItemType,\n//             data.additionalInformation,\n//             data.code,\n//             Number(data.creditPoints),\n//             parseCurriculumContainers(data.curriculumStructure),\n//             data.description,\n//             data.facultyName,\n//             Number(data.implementationYear),\n//             data.intakePeriod,\n//             data.programConstraints,\n//             data.schoolName,\n//             data.studyLevel,\n//             data.title,\n//             data.urlMap\n//         );\n//     }\n// };","import { makeAutoObservable } from 'mobx';\nimport { ICurriculumContainer, IProgressionEntity, ISpecialisation, ProgressionStatus } from '../interfaces/ModelInterfaces';\nimport { SerializedSpecialisation, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\n\nexport class SpecialisationModel implements ISpecialisation, IProgressionEntity, ISerializableEntity {\n  public readonly id: string\n  public progressionStatus: ProgressionStatus = ProgressionStatus.UNPLANNED\n\n  constructor(\n    public readonly code: string,\n    public readonly title: string,\n    public readonly academicItemType: string,\n    public readonly creditPoints: number,\n    public readonly structureSummary: string,\n    public readonly curriculumStructure: Array<ICurriculumContainer>,\n    public readonly description: string,\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly keywords: string[],\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code\n    makeAutoObservable(this)\n  }\n\n  setPlanned() {\n    this.progressionStatus = ProgressionStatus.PLANNED\n  }\n\n  setUnplanned() {\n    this.progressionStatus = ProgressionStatus.UNPLANNED\n  }\n\n  serialize(): SerializedSpecialisation {\n    return {\n      id: this.code,\n    };\n  }\n\n  async deserialize(specialisation: SerializedSpecialisation) {\n    if (specialisation.id !== this.id) {\n      console.error(`ERROR: This specialisation is not ${specialisation.id} (is: ${this.id})`);\n      return;\n    }\n\n    this.setPlanned();   \n  }\n\n  toString() {\n    return `[SPECIALISATION_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadSpecialisationByCode(specialisationCode: string) {\n//     return db.collection(\"specialisations\")\n//         .doc(specialisationCode)!\n//         .withConverter(specialisationConverter)\n//         .get().then((doc) => {\n//             if (doc.exists) {\n//                 var specialisation = doc.data()!;\n\n//                 return specialisation;\n//             } else {\n//                 console.log(\"No such document!\");\n//             }\n//         }).catch((error) => {\n//             console.log(\"Error getting document:\", error);\n//             throw new Error();\n//         });\n// }\n\n// let specialisationConverter = {\n//     toFirestore: function (specialisation) {\n//         return {\n//             name: specialisation.code,\n//         };\n//     },\n//     fromFirestore: function (snapshot, options) {\n//         const data = snapshot.data(options);\n\n//         return new SpecialisationModel(\n//             data.academicItemType,\n//             data.code,\n//             Number(data.creditPoints),\n//             parseCurriculumContainers(data.curriculumStructure),\n//             data.description,\n//             data.facultyName,\n//             Number(data.implementationYear),\n//             data.keywords,\n//             data.schoolName,\n//             data.studyLevel,\n//             data.title,\n//             data.urlMap,\n//         );\n//     }\n// };","import { action, makeAutoObservable, reaction, transaction, when } from \"mobx\";\nimport { IProgressionEntity, ProgressionStatus, StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { SerializedProgressionState, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\nimport { parseCurriculumContainers } from \"../models/CurriculumModel\";\nimport { ProgramModel } from \"../models/ProgramModel\";\nimport { SpecialisationModel } from \"../models/SpecialisationModel\";\nimport { UserState } from \"./UserState\";\nimport axios from \"axios\"\n\nexport class ProgressionState implements ISerializableEntity {\n  constructor(\n    userState: UserState\n  ) {\n    makeAutoObservable(this)\n    this._userState = userState\n    reaction(\n      () => this._userState.studyLevel,\n      () => {\n        this._isUpdated = false;\n        this._updateStudyLevel()\n      },\n      { fireImmediately: true }\n    )\n    userState.registerStudyLevelUpdateActionCallback(() => Promise.resolve(this._updateStudyLevel()));\n  }\n\n  private _userState: UserState\n  private _programMapById = new Map<string, ProgramModel>();\n  private _specialisationMapById = new Map<string, SpecialisationModel>();\n  private _isUpdated: boolean = false;\n\n  get isUpdated(): boolean {\n    return this._isUpdated;\n  }\n\n  private _updateStudyLevel = async () => {\n    await this.loadAllPrograms(this._userState.studyLevel);\n    await this.loadAllSpecialisations(this._userState.studyLevel);\n    this._isUpdated = true;\n  };\n\n  get allPrograms() {\n    return [...this._programMapById.values()]\n  }\n\n  get allSpecialisations() {\n    return [...this._specialisationMapById.values()]\n  }\n\n  getProgramById(id: string) {\n    return this._programMapById.get(id)\n  }\n\n  getSpecialisationById(id: string) {\n    return this._specialisationMapById.get(id)\n  }\n\n  get plannedPrograms(): ProgramModel[] {\n    return this.allPrograms.filter(program => program.progressionStatus === ProgressionStatus.PLANNED)\n  }\n\n  get plannedSpecialisations(): SpecialisationModel[] {\n    return this.allSpecialisations.filter(specialisation => specialisation.progressionStatus === ProgressionStatus.PLANNED)\n  }\n\n  get plannedProgressionEntities(): IProgressionEntity[] {\n    let result: IProgressionEntity[] = this.plannedPrograms\n    result = result.concat(this.plannedSpecialisations)\n    return result\n  }\n\n  private resetHard(): void {\n    this._programMapById.forEach((program) => {\n      program.setUnplanned();\n    });\n    this._specialisationMapById.forEach((specialisation) => {\n      specialisation.setUnplanned();\n    });\n  }\n\n  addProgram(program: ProgramModel) {\n    this._programMapById.set(program.id, program)\n  }\n  addSpecialisation(specialisation: SpecialisationModel) {\n    this._specialisationMapById.set(specialisation.id, specialisation)\n  }\n\n  serialize(): SerializedProgressionState {\n    return {\n      programs: this.plannedPrograms.map((programModel) => {\n        return programModel.serialize();\n      }),\n      specialisations: this.plannedSpecialisations.map((specialisationModel) => {\n        return specialisationModel.serialize();\n      }),\n    }\n  }\n\n  async deserialize(json: TermtanglesSerialized) {\n    if (!json.progressionState) {\n      return;\n    }\n\n    await when(() => { return this._isUpdated; });\n\n    this.resetHard();\n    const serializedProgressionState = json.progressionState;\n    if (serializedProgressionState.programs) {\n      serializedProgressionState.programs.forEach((serializedProgram) => {\n        if (!serializedProgram.id) return;\n\n        const programModel = this.getProgramById(serializedProgram.id);\n        if (programModel) {\n          programModel.deserialize(serializedProgram);\n        } else {\n          console.error(`ERROR: ${serializedProgram.id} is not a valid program.`);\n        }\n      });\n    }\n    if (serializedProgressionState.specialisations) {\n      serializedProgressionState.specialisations.forEach((serializedSpecialisation) => {\n        if (!serializedSpecialisation.id) return;\n\n        const specialisationModel = this.getSpecialisationById(serializedSpecialisation.id);\n        if (specialisationModel) {\n          specialisationModel.deserialize(serializedSpecialisation);\n        } else {\n          console.error(`ERROR: ${serializedSpecialisation.id} is not a valid specialisation.`);\n        }\n      });\n    }\n  }\n\n  private loadAllPrograms = action((studyLevel: StudyLevel) => {\n    return axios.get(`https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_programs.json`)\n    .then(response => {\n      transaction(() => {\n        this._programMapById.clear()\n        response.data.forEach(programObj => {\n          let program = new ProgramModel(\n            programObj.code,\n            programObj.title,\n            programObj.academicItemType,\n            programObj.additionalInfo,\n            programObj.creditPoints,\n            programObj.structureSummary,\n            parseCurriculumContainers(programObj.curriculumStructure),\n            programObj.description,\n            programObj.facultyName,\n            programObj.implementationYear,\n            programObj.intakePeriod,\n            programObj.programConstraints,\n            programObj.schoolName,\n            programObj.studyLevel,\n            programObj.urlMap\n          )\n\n          this.addProgram(program);\n        })\n      })\n    })\n  })\n\n  private loadAllSpecialisations = action((studyLevel: StudyLevel) => {\n    return axios.get(`https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_specialisations.json`)\n      .then(response => {\n        transaction(() => {\n          this._specialisationMapById.clear()\n          response.data.forEach(specialisationObj => {\n            let specialisation = new SpecialisationModel(\n              specialisationObj.code,\n              specialisationObj.title,\n              specialisationObj.academicItemType,\n              specialisationObj.creditPoints,\n              specialisationObj.structureSummary,\n              parseCurriculumContainers(specialisationObj.curriculumStructure),\n              specialisationObj.description,\n              specialisationObj.facultyName,\n              specialisationObj.implementationYear,\n              specialisationObj.keywords,\n              specialisationObj.schoolName,\n              specialisationObj.studyLevel,\n              specialisationObj.urlMap,\n            )\n\n            this.addSpecialisation(specialisation);\n          })\n        })\n    })\n  });\n}\n\n","import { CourseModel } from '../models/CourseModel';\r\nimport { ProgramModel } from '../models/ProgramModel';\r\nimport { SpecialisationModel } from '../models/SpecialisationModel';\r\nimport { CourseState } from './CourseState';\r\nimport { ProgressionState } from './ProgressionState';\r\n\r\n\r\nexport class SearchDataState {\r\n  constructor(\r\n    private _courseState: CourseState,\r\n    private _progressionState: ProgressionState,\r\n  ) {}\r\n\r\n  get courseSearchData(): CourseModel[] {\r\n    return this._courseState.allCourses.sort((a, b) => (a.code > b.code) ? 1 : -1)\r\n  }\r\n  get programSearchData(): ProgramModel[] {\r\n    return this._progressionState.allPrograms.sort((a, b) => (a.title > b.title) ? 1 : -1)\r\n  }\r\n  get specialisationSearchData(): SpecialisationModel[] {\r\n    return this._progressionState.allSpecialisations.sort((a, b) => (a.title > b.title) ? 1 : -1)\r\n  }\r\n}\r\n","import { makeAutoObservable, when } from \"mobx\";\nimport { StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { SerializedUserState, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\n\nconst stringToStudyLevelMap = ((str: string) => {\n  switch(str) {\n    case \"undergraduate\": return StudyLevel.UNDERGRADUATE;\n    case \"postgraduate\": return StudyLevel.POSTGRADUATE;\n    case \"research\": return StudyLevel.RESEARCH;\n    default: return undefined;\n  }\n});\n\nexport class UserState implements ISerializableEntity {\n  constructor() {\n    makeAutoObservable(this)\n  }\n\n  private _studyLevel: StudyLevel = StudyLevel.UNDERGRADUATE\n  private _isUpdated: boolean = true;\n  private _studyLevelUpdateActionCallbacks: (() => Promise<void>)[] = [];\n\n  get studyLevel() {\n    return this._studyLevel\n  }\n\n  async setStudyLevel (studyLevel: StudyLevel) {\n    if (this._studyLevel !== studyLevel) {\n      this._studyLevel = studyLevel;\n      const studyLevelPromises: Promise<void>[] = this._studyLevelUpdateActionCallbacks.map(callback => callback());\n      return Promise.all(studyLevelPromises);\n    }\n  }\n\n  set isUpdated(isUpdated: boolean) {\n    this._isUpdated = isUpdated;\n  }\n  \n  get isUpdated(): boolean {\n    return this._isUpdated;\n  }\n\n  registerStudyLevelUpdateActionCallback(updateAction: () => Promise<void>) {\n    this._studyLevelUpdateActionCallbacks.push(updateAction);\n  }\n\n  serialize(): SerializedUserState {\n    return {studyLevel: this._studyLevel};\n  }\n\n  async deserialize(json: TermtanglesSerialized): Promise<void> {\n    if (!json.userState) {\n      throw \"ERROR: User state not included.\";\n    }\n\n    const serializedUserState = json.userState;\n    if (!serializedUserState.studyLevel) {\n      throw `ERROR: User state must include a studyLevel parameter.`;\n    }\n\n    const level = stringToStudyLevelMap(serializedUserState.studyLevel);\n    if (!level) {\n      throw `ERROR: ${serializedUserState.studyLevel} is not a valid study level.`\n    }\n\n    await this.setStudyLevel(level);\n  }\n}\n","import { createContext } from 'react'\nimport { CourseState } from '../states/CourseState'\nimport { ProgressionState } from '../states/ProgressionState';\nimport { SearchDataState } from '../states/SearchDataState';\nimport { UserState } from '../states/UserState';\n\nconst userState = new UserState();\nconst courseState = new CourseState(userState);\nconst progressionState = new ProgressionState(userState);\nconst searchDataState = new SearchDataState(courseState, progressionState);\n\nexport const ApplicationContext = createContext({\n    userState,\n    courseState,\n    progressionState,\n    searchDataState,\n})\n","\nimport { Grid, Item, Pagination } from 'semantic-ui-react'\nimport styled from 'styled-components'\n\nexport const ResultItem = styled(Item)`\n  &&& {\n    border: 0px solid lightgrey;\n    padding: 6px;\n    display: flex;\n    align-items: flex-start;\n    justify-content: space-between;\n    margin:0px\n  }\n  &&&&{\n    padding:1em 0;\n  }\n`\n\nexport const ResultItemHeader = styled(Item.Header)`\n`\n\nexport const ResultItemContent = styled(Item.Content)`\n  &&&&& {\n    flex: 1;\n    padding:0;\n  }\n`\n\nexport const ResultItemExtra = styled(Item.Extra)`\n  &&&& {\n    margin: 0;\n    text-align: right;\n    flex: 1;\n  }\n`\n\nexport const ResultCollection = styled(Item.Group)`\n  && {\n    padding: 15px 0px 10px 0px;\n    margin: 0px;\n  }\n`\n\nexport const ResultsPagination = styled(Pagination)`\n  max-height: 40px;\n`\n\nexport const ResultsColumn = styled(Grid.Column)`\n`\n\n","import { Observer, observer } from \"mobx-react\"\nimport { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { CourseModel, CourseStatus } from \"../../../models/CourseModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra, ResultItemHeader } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  course: T\n}\n\nexport const CourseResultView = observer((props: IResultViewProps<CourseModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseOver={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <ResultItemHeader>{props.course.code}</ResultItemHeader>\n              <Item.Description>{props.course.title}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n              ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.course.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.course.courseStatus === CourseStatus.PLANNED\n                        ? <Icon color=\"red\" className=\"bookmark\" />\n                        : props.course.courseStatus === CourseStatus.ALLOCATED\n                          ? <Icon color=\"orange\" className=\"calendar alternate outline\" />\n                          : props.course.courseStatus === CourseStatus.COMPLETED\n                            ? <Icon color=\"green\" className=\"check\" />\n                            : \"\"\n                    }\n\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.course.courseStatus !== CourseStatus.PLANNED && props.course.courseStatus !== CourseStatus.ALLOCATED}\n                        icon={props.course.courseStatus === CourseStatus.ALLOCATED ? 'calendar alternate outline' : 'bookmark'}\n                        content={props.course.courseStatus === CourseStatus.ALLOCATED ? 'Scheduled' : 'Interested'}\n                        color={props.course.courseStatus === CourseStatus.ALLOCATED ? 'orange' : 'blue'}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.course.courseStatus === CourseStatus.PLANNED || props.course.courseStatus === CourseStatus.ALLOCATED) {\n                            props.course.setUnplanned()\n                          } else {\n                            props.course.setPlanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {props.course.courseStatus !== CourseStatus.COMPLETED}\n                        icon='check'\n                        content='Done'\n                        color=\"green\"\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.course.courseStatus === CourseStatus.COMPLETED) {\n                            props.course.setUnplanned()\n                          } else {\n                            props.course.setCompleted()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.course.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { ProgressionStatus } from \"../../../interfaces/ModelInterfaces\"\nimport { SpecialisationModel } from \"../../../models/SpecialisationModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  specialisation: T\n}\n\nexport const SpecialisationResultView = observer((props: IResultViewProps<SpecialisationModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener, noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseEnter={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <Item.Header>{props.specialisation.title}</Item.Header>\n              <Item.Description>{props.specialisation.academicItemType} - {props.specialisation.code}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n              ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.specialisation.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.specialisation.progressionStatus === ProgressionStatus.PLANNED\n                        ? <Icon color=\"green\" className=\"calendar alternate outline\" />\n                        : <></>\n                    }\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED}\n                        icon={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"plus circle\" : \"minus circle\"}\n                        content={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"Add\" : \"Remove\"}\n                        color={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"green\" : \"red\"}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED) {\n                            props.specialisation.setPlanned()\n                          } else {\n                            props.specialisation.setUnplanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.specialisation.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\";\nimport { ApplicationContext } from \"../../../contexts/ApplicationContext\";\nimport { CurriculumElement } from \"../../../models/CurriculumModel\";\nimport React, { useContext } from \"react\";\nimport { CourseResultView } from \"../../SearchPanel/Results/CourseResultView\";\nimport { SpecialisationResultView } from \"../../SearchPanel/Results/SpecialisationResultView\";\nimport { ResultCollection } from \"../../SearchPanel/SearchPanelStyles\";\n\nexport interface ICurriculumElementViewProps {\n  entityId: string,\n  curriculumElements: CurriculumElement[]\n}\n\nexport const CurriculumElementsView = observer((props: ICurriculumElementViewProps) => {\n  const applicationContext = useContext(ApplicationContext);\n  return <Observer>\n    {\n      () => {\n        return props.curriculumElements.length > 0\n          ? <ResultCollection divided>\n            {\n              props.curriculumElements\n                .sort((a, b) => Number(a.order) - Number(b.order))\n                .map(element => {\n                  if (element.isCourse()) {\n                    let course = applicationContext.courseState.getCourseById(element.itemCode)\n                    return course ? <CourseResultView course={course} /> : <></>\n                  } else if (element.isSpecialisation()) {\n                    let specialisation = applicationContext.progressionState.getSpecialisationById(element.itemCode)\n                    return specialisation ? <SpecialisationResultView specialisation={specialisation} /> : <></>\n                  }\n                  return <p>{element.description}</p>\n                })\n            }\n          </ResultCollection>\n          : <></>\n      }\n    }\n  </Observer>\n});\n","import parse from 'html-react-parser';\nimport { Observer, observer } from \"mobx-react\";\nimport React from \"react\";\nimport sanitizeHtml from 'sanitize-html';\nimport { Accordion, Icon, Label } from \"semantic-ui-react\";\nimport styled from 'styled-components';\nimport { CurriculumContainer } from \"../../../models/CurriculumModel\";\nimport { ProgressionPlannerViewModel } from \"../ProgressionPlannerViewModel\";\nimport { CurriculumElementsView } from \"./CurriculumElementsView\";\n\nexport interface ICurriculumContainerViewProps {\n  entityId: string\n  curriculumContainer: CurriculumContainer[]\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n}\n\nexport const CurriculumAccordionCreditPoints = styled(Label)`\n  &&& {\n    margin-left:auto\n    \n  }\n`\n\nexport const CurriculumAccordionTitle = styled(Accordion.Title)`\n  &&& {\n    display:flex;\n  }\n`\nexport const CurriculumDescriptionDiv = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nexport const CurriculumExpandCollapseLink = styled.a`\n  min-width: 80px;\n  text-align: right;\n`\n\nexport const CurriculumContent = styled.div`\n  margin-left:10px;\n`\n\nexport const CurriculumContainerView = observer((props: ICurriculumContainerViewProps) => {\n  const getCreditPointsView = (container: CurriculumContainer) => {\n    const uocOfChildren = props.progressionPlannerViewModel.calculateUocOfChildren(container)\n    if (container.creditPoints > 0) {\n      return <CurriculumAccordionCreditPoints\n        size=\"small\"\n        color={uocOfChildren === container.creditPoints\n          ? \"green\"\n          : uocOfChildren < container.creditPoints\n            ? \"orange\"\n            : \"yellow\"\n        }\n      >\n        {uocOfChildren} / {container.creditPoints} UOC\n      </CurriculumAccordionCreditPoints>\n    } else if (uocOfChildren > 0) {\n      return <CurriculumAccordionCreditPoints\n        size=\"small\"\n        color=\"green\"\n      >\n        {uocOfChildren} UOC\n      </CurriculumAccordionCreditPoints>\n    }\n  }\n\n  return <Observer>\n    {\n      () => {\n        return props.curriculumContainer.length > 0\n          ? <Accordion.Accordion\n            key={props.entityId}\n            exclusive={false}\n            panels={[...props.curriculumContainer]\n              .sort((a, b) => Number(a.order) - Number(b.order))\n              .map(container => {\n                return {\n                  key: container.id,\n                  title: <CurriculumAccordionTitle>\n                    <Icon className={\n                      props.progressionPlannerViewModel.isContainerActive(container.id)\n                      ? \"caret down\"\n                      : \"caret right\"\n                    }/>\n                    {container.title}\n                    {getCreditPointsView(container)}\n                  </CurriculumAccordionTitle>,\n                  content: {\n                    content: <div>\n                      <CurriculumContent>\n                      <CurriculumDescriptionDiv>\n                        <span>{parse(sanitizeHtml(container.description))}</span>\n                        {\n                          container.containers.length > 0\n                            ? <CurriculumExpandCollapseLink\n                              href=\"#\"\n                              onClick={() => props.progressionPlannerViewModel.toggleAllContainers(container)}\n                            >\n                              {\n                                props.progressionPlannerViewModel.isAnySubContainerActive(container)\n                                  ? \"Collapse All\"\n                                  : \"Expand All\"\n                              }\n                            </CurriculumExpandCollapseLink>\n                            : <></>\n                        }\n                      </CurriculumDescriptionDiv>\n                      <CurriculumElementsView entityId={props.entityId} curriculumElements={container.elements} />\n                      </CurriculumContent>\n                      <CurriculumContainerView\n                        entityId={props.entityId}\n                        curriculumContainer={container.containers}\n                        progressionPlannerViewModel={props.progressionPlannerViewModel}\n                      />\n                    </div>\n                  },\n                  active: props.progressionPlannerViewModel.isContainerActive(container.id),\n                  onTitleClick: () => { props.progressionPlannerViewModel.toggleContainer(container.id) }\n                }\n              })}\n          />\n          : <></>\n      }\n    }\n  </Observer>\n});\n","import { Observer, observer } from 'mobx-react';\nimport React from 'react';\nimport { Accordion } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport { IProgressionEntity } from '../../interfaces/ModelInterfaces';\nimport { CurriculumContainerView } from './CurriculumView/CurriculumContainerView';\nimport { ProgressionPlannerViewModel } from './ProgressionPlannerViewModel';\nimport parse from 'html-react-parser';\nimport sanitizeHtml from 'sanitize-html';\n\nexport interface IProgressionEntityViewProps {\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n  entity: IProgressionEntity\n}\n\nconst ProgressionEntityTitle = styled.a`\ncolor: black;\nbackground-color: transparent;\ntext-decoration: none;\n\n&:hover {\n  color: #db2828;\n  background-color: transparent;\n  text-decoration: line-through;\n}\n`\n\nconst ProgressionEntityView = observer((props: IProgressionEntityViewProps) => {\n  return <Observer>\n    {() => {\n      return <>\n        <h2>\n          <ProgressionEntityTitle\n            href=\"#\"\n            onClick={() => props.entity.setUnplanned()}\n          >{props.entity.title}</ProgressionEntityTitle>\n        </h2>\n        <span>{parse(sanitizeHtml(props.entity.structureSummary))}</span>\n        <Accordion fluid styled>\n          <CurriculumContainerView\n            entityId={props.entity.id}\n            curriculumContainer={props.entity.curriculumStructure}\n            progressionPlannerViewModel={props.progressionPlannerViewModel}\n          />\n        </Accordion>\n      </>\n    }}\n  </Observer>\n})\n\nexport default ProgressionEntityView;\n","import { Observer, observer } from 'mobx-react';\nimport React from 'react';\nimport { Container } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport ProgressionEntityView from './ProgressionEntityView';\nimport { ProgressionPlannerViewModel } from './ProgressionPlannerViewModel';\n\nexport const ProgressionContainer = styled(Container)`\n  margin:1em 0;\n`\n\nexport interface IProgressionPlannerProps {\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n}\n\nconst ProgresionPlanner = observer(({ progressionPlannerViewModel }: IProgressionPlannerProps) => {\n  return <Observer>\n    {() => {\n      return (\n        <React.Fragment>\n          <ProgressionContainer>\n            {\n              progressionPlannerViewModel\n                .progressionState\n                .plannedProgressionEntities\n                .map(entity => {\n                  return <ProgressionEntityView\n                    entity={entity}\n                    progressionPlannerViewModel={progressionPlannerViewModel}\n                  />\n                })\n            }\n          </ProgressionContainer>\n        </React.Fragment>\n      )\n    }}\n  </Observer>\n})\n\nexport default ProgresionPlanner;\n","import { makeObservable, observable } from \"mobx\";\nimport { ProgressionStatus } from \"../../interfaces/ModelInterfaces\";\nimport { CourseStatus } from \"../../models/CourseModel\";\nimport { CurriculumContainer } from \"../../models/CurriculumModel\";\nimport { ProgramModel } from \"../../models/ProgramModel\";\nimport { SpecialisationModel } from \"../../models/SpecialisationModel\";\nimport { CourseState } from \"../../states/CourseState\";\nimport { ProgressionState } from \"../../states/ProgressionState\";\n\nexport interface IProgressionPlannerState {\n  id: string,\n  title: string,\n  programs: ProgramModel[],\n  specialisations: SpecialisationModel[],\n}\n\nexport class ProgressionPlannerViewModel {\n  private _progressionState: ProgressionState\n  private _courseState: CourseState\n  private _progressionPlannerState: IProgressionPlannerState\n  private _displayableContainerPanels: Set<string> = new Set<string>()\n\n  constructor(\n    progressionState: ProgressionState,\n    courseState: CourseState,\n  ) {\n    makeObservable<ProgressionPlannerViewModel,\n      \"_displayableContainerPanels\"\n    >(this, {\n      _displayableContainerPanels: observable,\n    })\n\n    this._progressionState = progressionState\n    this._progressionPlannerState = {\n      id: \"progressionPlanner\",\n      title: \"Progression Planner\",\n      programs: [],\n      specialisations: [],\n    }\n    this._courseState = courseState\n  }\n\n  get progressionState() {\n    return this._progressionState;\n  }\n\n  get progressionPlannerState() {\n    return this._progressionPlannerState;\n  }\n\n  calculateUocOfChildren(curriculumContainer: CurriculumContainer): number {\n    return [...this.getUniqueUocOfCurriculumContainer(curriculumContainer).values()].reduce((a, b) => a + b, 0)\n  }\n\n  getUniqueUocOfCurriculumContainer(curriculumContainer: CurriculumContainer): Map<string, number> {\n    let allChildren = new Map<string, number>()\n    curriculumContainer.elements.forEach(element => {\n      if (element.isCourse()) {\n        let course = this._courseState.getCourseById(element.itemCode)\n        if (course && course.courseStatus !== CourseStatus.UNPLANNED) {\n          allChildren.set(element.itemCode, element.creditPoints)\n        }\n      } else if (element.isSpecialisation()) {\n        let specialisation = this.progressionState.getSpecialisationById(element.itemCode)\n        if (specialisation && specialisation.progressionStatus !== ProgressionStatus.UNPLANNED) {\n          allChildren.set(element.itemCode, element.creditPoints)\n        }\n      }\n    })\n    curriculumContainer.containers.forEach(container => {\n      let childResult = this.getUniqueUocOfCurriculumContainer(container)\n      childResult.forEach((value, key) => allChildren.set(key, value))\n    })\n    return allChildren\n  }\n\n  toggleContainer(containerId: string) {\n    if (this._displayableContainerPanels.has(containerId)) {\n      this._displayableContainerPanels.delete(containerId)\n    } else {\n      this._displayableContainerPanels.add(containerId)\n    }\n  }\n\n  isAnySubContainerActive(rootContainer: CurriculumContainer): boolean {\n    return rootContainer.containers.filter(container => {\n      return this._displayableContainerPanels.has(container.id)\n        || this.isAnySubContainerActive(container)\n    }).length > 0\n  }\n\n  toggleAllContainers(rootContainer: CurriculumContainer) {\n    if (this.isAnySubContainerActive(rootContainer)) {\n      rootContainer.containers.forEach(container => {\n        this.setAllContainersInactive(container)\n      })\n    } else {\n      rootContainer.containers.forEach(container => {\n        this.setAllContainersActive(container)\n      })\n    }\n  }\n\n  private setAllContainersActive(rootContainer: CurriculumContainer) {\n    rootContainer.containers.forEach(container => {\n      this.setAllContainersActive(container)\n    })\n    this._displayableContainerPanels.add(rootContainer.id)\n  }\n\n  private setAllContainersInactive(rootContainer: CurriculumContainer) {\n    rootContainer.containers.forEach(container => {\n      this.setAllContainersInactive(container)\n    })\n    this._displayableContainerPanels.delete(rootContainer.id)\n  }\n\n  isContainerActive(containerId: string): boolean {\n    return this._displayableContainerPanels.has(containerId)\n  }\n}\n","import { makeAutoObservable } from \"mobx\";\nexport type FilterValue = string\n\nexport interface IFilterElementState {\n  filterElementName: string\n  numMatchingRecords: number\n}\n\nexport class FilterModel<T> {\n  private _possibleValues: Set<FilterValue> = new Set();\n  private _selectedValues: Set<FilterValue> = new Set();\n  constructor(\n    public readonly name: string,\n    private readonly fnGetTargetValue: (searchResult: T) => FilterValue[],\n  ) {\n    makeAutoObservable(this)\n  }\n\n  private filterResultMapping = new Map<string, number>();\n  public initializeFilter = (allSearchData: T[]) =>{\n    this._possibleValues = new Set(allSearchData\n      .map(result => this.fnGetTargetValue(result))\n      .flat()\n      .filter(value => value !== \"\")\n    )\n  }\n\n  public applyFilter = (searchResults: T[]): T[] => {\n    let results = searchResults\n    if (this._selectedValues.size > 0) {\n      results = searchResults\n        .filter(result => [...this._selectedValues.values()]\n          .filter(filterValue => this.fnGetTargetValue(result).includes(filterValue))\n          .length > 0\n        )\n    }\n    return results\n  }\n\n  public getFilterState(searchResults: T[]): IFilterElementState[] {\n    const isNumerical = [...this._possibleValues.values()].filter(value => isNaN(Number(value))).length === 0\n    return [...this._possibleValues.values()]\n      .sort((a, b) => {\n        if (isNumerical) {\n          return Number(a) - Number(b)\n        } else {\n          return a > b ? 1 : -1\n        }\n      })\n      .map(possibleFilterValue => {\n        return {\n          filterElementName: possibleFilterValue.toString(),\n          numMatchingRecords: searchResults.filter(result => this.fnGetTargetValue(result).includes(possibleFilterValue)).length,\n        }\n      })\n  }\n\n  public isSelected(value: FilterValue) {\n    return this._selectedValues.has(value)\n  }\n\n  public toggleValue(value: FilterValue) {\n    if (!this._possibleValues.has(value)) {\n      console.log(`invalid value toggled: ${value}`)\n      return;\n    }\n    if (this._selectedValues.has(value)) {\n      this._selectedValues.delete(value)\n    } else {\n      this._selectedValues.add(value)\n    }\n  }\n\n  public resetValue(value: FilterValue) {\n    if (!this._possibleValues.has(value)) {\n      console.log(`invalid value toggled: ${value}`)\n      return;\n    }\n    if (this._selectedValues.has(value)) {\n      this._selectedValues.delete(value)\n    }\n  }\n\n}","import { CourseModel } from \"../CourseModel\"\nimport { ProgramModel } from \"../ProgramModel\"\nimport { SpecialisationModel } from \"../SpecialisationModel\"\nimport { FilterModel } from \"./FilterModel\"\n\nexport const getCourseFilters = (allSearchData: CourseModel[]) => {\n  const filters: FilterModel<CourseModel>[] = [\n    new FilterModel<CourseModel>(\"Offering Periods\", (course) => course.termOffering),\n    new FilterModel<CourseModel>(\"Faculty\", (course) => [course.facultyName]),\n    new FilterModel<CourseModel>(\"School\", (course) => [course.schoolName]),\n    new FilterModel<CourseModel>(\"Credit Points\", (course) => [course.creditPoints.toString()]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n\nexport const getProgramFilters = (allSearchData: ProgramModel[]) => {\n  const filters: FilterModel<ProgramModel>[] = [\n    new FilterModel<ProgramModel>(\"Intake Periods\", (program) => program.intakePeriod),\n    new FilterModel<ProgramModel>(\"Faculty\", (program) => [program.facultyName]),\n    new FilterModel<ProgramModel>(\"School\", (program) => [program.schoolName]),\n    new FilterModel<ProgramModel>(\"Credit Points\", (program) => [program.creditPoints.toString()]),\n    new FilterModel<ProgramModel>(\"Academic Item Type\", (program) => [program.academicItemType]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n\nexport const getSpecialisationFilters = (allSearchData: SpecialisationModel[]) => {\n  const filters: FilterModel<SpecialisationModel>[] = [\n    new FilterModel<SpecialisationModel>(\"Faculty\", (specialisation) => [specialisation.facultyName]),\n    new FilterModel<SpecialisationModel>(\"School\", (specialisation) => [specialisation.schoolName]),\n    new FilterModel<SpecialisationModel>(\"Credit Points\", (specialisation) => [specialisation.creditPoints.toString()]),\n    new FilterModel<SpecialisationModel>(\"Academic Item Type\", (specialisation) => [specialisation.academicItemType]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n","/* May remove */\n\nexport const ResetButtonStyle = {\n  backgroundColor: \"#dcdcdc\",\n  border: \"none\",\n  color: \"black\",\n  padding: \"15px 32px\",\n  textDecoration: \"none\",\n  display: \"inline-block\",\n  fontSize: \"16px\",\n  margin: \"4px 2px\",\n  cursor: \"pointer\",\n  width: \"100%\",\n  height: \"100%\"\n}","import { Observer, observer } from \"mobx-react\"\nimport { useState } from \"react\"\nimport { Accordion, Form, Menu } from \"semantic-ui-react\"\nimport { FilterModel } from \"../../../models/Filters/FilterModel\"\n\nexport interface IFilterSectionProps<T> {\n  searchResults: T[]\n  filter: FilterModel<T>\n}\n\nexport const FilterSection = observer(<T,>(props: IFilterSectionProps<T>) => {\n  const [expandedFilters, setExpandedFilters] = useState(new Set<string>())\n\n  return <Observer>\n    {\n      () => {\n        let filterState = props.filter.getFilterState(props.searchResults)\n        return (\n            <Menu.Item key={props.filter.name}>\n              <Accordion.Title\n                active={expandedFilters.has(props.filter.name)}\n                content={props.filter.name}\n                onClick={() => {\n                  let newExpandedFilters = new Set(expandedFilters)\n                  if (expandedFilters.has(props.filter.name)) {\n                    newExpandedFilters.delete(props.filter.name)\n                  } else {\n                    newExpandedFilters.add(props.filter.name)\n                  }\n                  setExpandedFilters(newExpandedFilters)\n                }}\n              />\n              <Accordion.Content\n                active={expandedFilters.has(props.filter.name)}\n                content={\n                  <Form>\n                    <Form.Group grouped>\n                      {\n                        filterState.map(filterElementState => {\n                          return <Form.Checkbox\n                            key={filterElementState.filterElementName}\n                            label={`${filterElementState.filterElementName}`}\n                            name={props.filter.name}\n                            type=\"checkbox\"\n                            value={filterElementState.filterElementName}\n                            checked={props.filter.isSelected(filterElementState.filterElementName)}\n                            onClick={() => {\n                              props.filter.toggleValue(filterElementState.filterElementName)\n                            }}\n                          />\n                        })\n                      }\n                    </Form.Group>\n                  </Form>\n                }\n              />\n            </Menu.Item>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from 'mobx-react'\nimport { Accordion, Menu } from 'semantic-ui-react'\nimport { ResetButtonStyle } from '../../../config/ResetButtonStyle'\nimport { FilterModel } from '../../../models/Filters/FilterModel'\nimport { FilterSection } from './FilterSection'\nimport './ResetButton.css'\nexport interface IFilterMenuProps<T> {\n  searchResults: T[]\n  filters: FilterModel<T>[]\n}\n\nexport const FilterMenuView = observer(<T,>(props: IFilterMenuProps<T>) => {\n  const handlereset = () => {\n    props.filters.forEach((filter) => {\n      filter.getFilterState(props.searchResults).forEach((element) => {\n        filter.resetValue(element.filterElementName)\n      })\n    })\n  }\n\n  return (\n    <Observer>\n      {\n        () => {\n          return <div >\n            <div className=\"resetbutton\">\n              <button style={ResetButtonStyle} onClick={() => handlereset()}>Reset Filter</button>\n            </div>\n            <Accordion fluid as={Menu} vertical>\n              {\n                props.filters.map(filter => {\n                  return <FilterSection\n                    searchResults={props.searchResults}\n                    filter={filter}\n                  />\n                })\n              }\n            </Accordion>\n\n          </div>\n        }\n\n      }\n    </Observer>\n  )\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React from \"react\"\nimport { Item } from \"semantic-ui-react\"\nimport styled from 'styled-components'\nimport { CourseModel } from \"../../../models/CourseModel\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\nimport { CourseResultView } from \"./CourseResultView\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nconst CourseCollection = styled(Item.Group)`\n  &&& {\n    padding: 15px 0px 10px 0px;\n  }\n`\n        \nexport const CourseResultCollectionView = observer((props: IResultCollectionViewProps<CourseModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(course => {\n                return (\n                  <CourseResultView course={course} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { CourseResultCollectionView } from \"../Results/CourseResultCollectionView\"\nimport { ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const CourseSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <Grid.Column key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.courseSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.courseFilters}\n                  />\n                </Grid.Column>\n                <ResultsColumn key=\"results\" width={12}>\n                  <CourseResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.courseSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.courseSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.courseSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { ProgressionStatus } from \"../../../interfaces/ModelInterfaces\"\nimport { ProgramModel } from \"../../../models/ProgramModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  program: T\n}\n\nexport const ProgramResultView = observer((props: IResultViewProps<ProgramModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseEnter={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <Item.Header>{props.program.title}</Item.Header>\n              <Item.Description>{props.program.academicItemType} - {props.program.code}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n                ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.program.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.program.progressionStatus === ProgressionStatus.PLANNED\n                        ? <Icon color=\"green\" className=\"calendar alternate outline\" />\n                        : <></>\n                    }\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.program.progressionStatus === ProgressionStatus.UNPLANNED}\n                        icon={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"plus circle\" : \"minus circle\"}\n                        content={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"Add\" : \"Remove\"}\n                        color={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"green\" : \"red\"}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.program.progressionStatus === ProgressionStatus.UNPLANNED) {\n                            props.program.setPlanned()\n                          } else {\n                            props.program.setUnplanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.program.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport { ProgramModel } from \"../../../models/ProgramModel\"\nimport { ProgramResultView } from \"./ProgramResultView\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nexport const ProgramResultCollectionView = observer((props: IResultCollectionViewProps<ProgramModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(program => {\n                return (\n                  <ProgramResultView program={program} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { ProgramResultCollectionView } from \"../Results/ProgramResultCollectionView\"\nimport { ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const ProgramSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <Grid.Column key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.programSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.programFilters}\n                  />\n                </Grid.Column>\n                <ResultsColumn key=\"results\" width={12}>\n                  <ProgramResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.programSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.programSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.programSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport { SpecialisationModel } from \"../../../models/SpecialisationModel\"\nimport { SpecialisationResultView } from \"./SpecialisationResultView\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nexport const SpecialisationResultCollectionView = observer((props: IResultCollectionViewProps<SpecialisationModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(specialisation => {\n                return (\n                  <SpecialisationResultView specialisation={specialisation} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { SpecialisationResultCollectionView } from \"../Results/SpecialisationResultCollectionView\"\nimport { ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const SpecialisationSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <Grid.Column key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.specialisationSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.specialisationFilters}\n                  />\n                </Grid.Column>\n                <ResultsColumn key=\"results\" width={12}>\n                  <SpecialisationResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.specialisationSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.specialisationSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.specialisationSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from 'mobx-react'\nimport React from 'react'\nimport { Container, Dropdown, Icon, Input, Menu } from 'semantic-ui-react'\nimport styled from 'styled-components'\nimport { SearchPanelItem, SearchPanelViewModel } from './SearchPanelViewModel'\nimport { CourseSearchTab } from './SearchTab/CourseSearchTab'\nimport { ProgramSearchTab } from './SearchTab/ProgramSearchTab'\nimport { SpecialisationSearchTab } from './SearchTab/SpecialisationSearchTab'\n\n\nconst ResultsSubtextContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n  padding: 6px;\n`\n\nconst FoundResults = styled.h4`\n  &&& {\n    margin: 1rem 0 0.5rem 0.5rem\n  }\n`\n\nconst SearchPanel = observer(({ searchPanelViewModel }: { [key: string]: SearchPanelViewModel }) => {\n  const getNumResults = () => {\n    let numResults = -1\n    switch (searchPanelViewModel.activeItem) {\n      case (SearchPanelItem.COURSES):\n        numResults = searchPanelViewModel.searchResults.courseSearchResults.length\n        break\n      case (SearchPanelItem.PROGRAMS):\n        numResults = searchPanelViewModel.searchResults.programSearchResults.length\n        break\n      case (SearchPanelItem.SPECIALISATIONS):\n        numResults = searchPanelViewModel.searchResults.specialisationSearchResults.length\n        break\n    }\n    return numResults\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <React.Fragment>\n            <Container>\n              <Input\n                placeholder=\"Click here to to get started!\"\n                fluid\n                loading={searchPanelViewModel.isLoading}\n                icon={\n                  <Icon\n                    link={searchPanelViewModel.isInputActive}\n                    className={searchPanelViewModel.isInputActive ? \"x\" : \"search\"}\n                    onClick={() => {\n                      searchPanelViewModel.setQueryText(\"\")\n                      searchPanelViewModel.setInputActive(false)\n                    }}\n                  />\n                }\n                onClick={() => {\n                  searchPanelViewModel.setInputActive(true)\n                }}\n                onChange={(e, data) => searchPanelViewModel.setQueryText(data.value)}\n                value={searchPanelViewModel.queryText}\n              />\n              {\n                searchPanelViewModel.shouldShowPanel\n                  ? <>\n                    <Menu pointing secondary>\n                      <Menu.Item\n                        name={\"courses\"}\n                        active={searchPanelViewModel.activeItem === SearchPanelItem.COURSES}\n                        onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.COURSES)}\n                      >\n                        {`Courses (${searchPanelViewModel.searchResults.courseSearchResults.length})`}\n                      </Menu.Item>\n                      <Menu.Item\n                        name={\"programs\"}\n                        active={searchPanelViewModel.activeItem === SearchPanelItem.PROGRAMS}\n                        onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.PROGRAMS)}\n                      >\n                        {`Programs (${searchPanelViewModel.searchResults.programSearchResults.length})`}\n                      </Menu.Item>\n                      <Menu.Item\n                        name={\"specialisations\"}\n                        active={searchPanelViewModel.activeItem === SearchPanelItem.SPECIALISATIONS}\n                        onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.SPECIALISATIONS)}\n                      >\n                        {`Specialisations (${searchPanelViewModel.searchResults.specialisationSearchResults.length})`}\n                      </Menu.Item>\n                    </Menu>\n                    <ResultsSubtextContainer>\n                      <FoundResults>\n                        Found {getNumResults()} result{getNumResults() === 1 ? \"\" : \"s\"}\n                      </FoundResults>\n\n                      <span>\n                        <span style={{ marginRight: \"10px\"}}>Results per page</span>\n                        <Dropdown\n                          text={searchPanelViewModel.resultsPerPage.toString()}\n                          selection\n                          options={[\n                            { text: 10, value: 10 },\n                            { text: 20, value: 20 },\n                            { text: 30, value: 30 },\n                            { text: 50, value: 50 },\n                          ]}\n                          onChange={(e, data) => { searchPanelViewModel.setResultsPerPage(Number(data.value)) }}\n                        />\n                      </span>\n                    </ResultsSubtextContainer>\n                    {\n                      searchPanelViewModel.activeItem === SearchPanelItem.COURSES\n                        ? <CourseSearchTab searchPanelViewModel={searchPanelViewModel} />\n                        : <></>\n                    }\n                    {\n                      searchPanelViewModel.activeItem === SearchPanelItem.PROGRAMS\n                        ? <ProgramSearchTab searchPanelViewModel={searchPanelViewModel} />\n                        : <></>\n                    }\n                    {\n                      searchPanelViewModel.activeItem === SearchPanelItem.SPECIALISATIONS\n                        ? <SpecialisationSearchTab searchPanelViewModel={searchPanelViewModel} />\n                        : <></>\n                    }\n                  </>\n                  : <></>\n              }\n            </Container>\n          </React.Fragment>\n        )\n      }\n    }\n  </Observer>\n\n})\n\nexport default SearchPanel\n","import styled from \"styled-components\"\nimport { AutoPlannerViewModel } from \"./AutoPlannerModel\"\n\nconst AutoPlanButton = styled.button`\n  background-color: forestgreen;\n  border: none;\n  border-radius: 4px;\n  color: white;\n  padding: 15px 32px;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin: 4px 2px;\n  cursor: pointer;\n  width: 100%;\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */ \n`\nconst AutoPlanner = ({ autoPlannerViewModel }: { [key: string]: AutoPlannerViewModel }) => {\n  return (\n    <AutoPlanButton onClick={() => autoPlannerViewModel.autoPlan()}>\n      Auto Plan Degree\n    </AutoPlanButton>\n  )\n};\n\nexport default AutoPlanner;","import { CourseState } from \"../../states/CourseState\";\r\nimport { CourseModel } from \"../../models/CourseModel\";\r\nimport { TermModel } from \"../../models/TermModel\";\r\n\r\nexport class AutoPlannerViewModel {\r\n    private courseState: CourseState;\r\n  \r\n    constructor(courseState: CourseState) {\r\n        this.courseState = courseState;\r\n    }\r\n\r\n    get autoPlanCourseState(): CourseState {\r\n        return this.courseState;\r\n    }\r\n\r\n    autoPlan() {\r\n        let canAllocateCourses: boolean = true;\r\n        let listYearsToTryAllocate: number[] = this.getYearsToTryAllocate(this.courseState.getMaxAllocatedYear);\r\n        let listTermsToTryAllocate: string[] = [\"Term 1\", \"Term 2\", \"Term 3\"]\r\n\r\n        while (canAllocateCourses === true) {\r\n            let coursesToBeAllocated: CourseModel[] = this.courseState.plannedCourses;\r\n            let nCoursesToAllocate: number = coursesToBeAllocated.length;\r\n            let hasChanged = false;\r\n\r\n            // Try for each year, term; if allocation spot is free & pre-req is met, add course to term\r\n            for (var counter = 0; counter < coursesToBeAllocated.length; counter++) {\r\n                let termAllocatedFlag = false;\r\n                for (let i = 0; i < listYearsToTryAllocate.length; i++) {\r\n                    if (termAllocatedFlag === false) {\r\n                        for (let j = 0; j < listTermsToTryAllocate.length; j++) {\r\n                            let canAssignToTerm : string[] | boolean = this.courseState.getMissingRequirementsWhenAssigningCourseToTerm(coursesToBeAllocated[counter], new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]));\r\n                            let termHasSpaceToAllocate : boolean = this.termHasLessThanThreeCourses(listYearsToTryAllocate[i], listTermsToTryAllocate[j], this.courseState.termCourseMap);\r\n                            let termIsDisabled: boolean = new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]).isBefore(new TermModel(2021, \"Term 2\"))\r\n                            if (canAssignToTerm.length === 0) {\r\n                                canAssignToTerm = true;\r\n                            } else {\r\n                                canAssignToTerm = false;\r\n                            }\r\n\r\n                            if (!termIsDisabled && termHasSpaceToAllocate && canAssignToTerm) {\r\n                                this.courseState.assignCourseToTerm(coursesToBeAllocated[counter], new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]));\r\n                                termAllocatedFlag = true;\r\n                                hasChanged = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Terminating condition\r\n            // If there are no changes, this means that there are no more courses that can be allocated\r\n            // and hence terminate allocation attempt\r\n            if (hasChanged === false) {\r\n                canAllocateCourses = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    termHasLessThanThreeCourses(year: number, term: string, allocatedCourses: Map<string, CourseModel[]>) : boolean {\r\n        let dictKey = year + \"_\" + term;\r\n\r\n        if (allocatedCourses.has(dictKey)) {\r\n            // A term already has 3 courses, can't allocate\r\n            if (allocatedCourses.get(dictKey)!.length >= 3) {\r\n                return false;\r\n            }\r\n\r\n            // Term exists in allocatedTerm array, but has less than 3 courses, can allocate\r\n            return true;\r\n        } else {\r\n            // Term has not been allocated, can allocate\r\n            return true;\r\n        }\r\n    }\r\n\r\n    getYearsToTryAllocate(maxYear: number) {\r\n        var list: number[] = [];\r\n\r\n        // Return list of years with excess, incase all previous terms are full\r\n        for (var i = 2021; i <= maxYear + 4; i++) {\r\n            list.push(i);\r\n        }\r\n\r\n        return list;\r\n    }\r\n}","import \"fomantic-ui-css/semantic.min.css\";\nimport { Observer } from 'mobx-react-lite';\nimport React, { useContext } from 'react';\nimport SplitPane from 'react-split-pane';\nimport 'semantic-ui-react';\nimport { Container } from 'semantic-ui-react';\nimport './App.css';\nimport LocalImportExport from \"./containers/LocalImportExport/LocalImportExport\"\nimport { LocalImportExportViewModel } from './containers/LocalImportExport/LocalImportExportViewModel';\nimport { MenuBar } from './containers/MenuBar/MenuBar';\nimport Planner from './containers/Planner/Planner';\nimport { PlannerViewModel } from './containers/Planner/PlannerViewModel';\nimport ProgressionPlanner from './containers/ProgressionPlanner/ProgressionPlanner';\nimport { ProgressionPlannerViewModel } from './containers/ProgressionPlanner/ProgressionPlannerViewModel';\nimport SearchPanel from './containers/SearchPanel/SearchPanel';\nimport { SearchPanelViewModel } from './containers/SearchPanel/SearchPanelViewModel';\nimport { ApplicationContext } from './contexts/ApplicationContext';\nimport AutoPlanner from './containers/AutoPlan/AutoPlannerView';\nimport { AutoPlannerViewModel } from \"./containers/AutoPlan/AutoPlannerModel\";\n\nconst App = () => {\n  const applicationContext = useContext(ApplicationContext)\n\n  const searchPanelViewModel = new SearchPanelViewModel(applicationContext.searchDataState);\n  const plannerViewModel = new PlannerViewModel(applicationContext.courseState);\n  const progressionPlannerViewModel = new ProgressionPlannerViewModel(applicationContext.progressionState, applicationContext.courseState);\n  const localImportExportModel = new LocalImportExportViewModel(applicationContext.userState, applicationContext.progressionState, applicationContext.courseState);\n  const autoPlannerViewModel = new AutoPlannerViewModel(applicationContext.courseState);\n\n  return (\n    <ApplicationContext.Provider value={applicationContext}>\n      <div className=\"ui maincontainer\">\n        <MenuBar userState={applicationContext.userState} />\n        <SplitPane\n          className=\"split-pane-flex\"\n          split=\"vertical\"\n          defaultSize={\"min(50vw, 1000px)\"}\n          primary=\"second\"\n        >\n          <Container style={{ padding: 10 }} fluid>\n            <SearchPanel searchPanelViewModel={searchPanelViewModel} />\n            <Observer>\n              {\n                () => {\n                  return (\n                    !searchPanelViewModel.shouldShowPanel\n                      ? <ProgressionPlanner progressionPlannerViewModel={progressionPlannerViewModel} />\n                      : <></>\n                  )\n                }\n              }\n            </Observer>\n          </Container>\n          <Container style={{ padding: 10, paddingLeft: 50 }} fluid>\n            <LocalImportExport localImportExportViewModel={localImportExportModel} />\n            <AutoPlanner autoPlannerViewModel={autoPlannerViewModel} />\n            <Planner plannerViewModel={plannerViewModel} />\n          </Container>\n        </SplitPane>\n      </div>\n    </ApplicationContext.Provider>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}