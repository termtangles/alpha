{"version":3,"sources":["interfaces/ModelInterfaces.ts","containers/LocalImportExport/LocalImportExport.tsx","containers/LocalImportExport/LocalImportExportViewModel.ts","containers/MenuBar/MenuBar.tsx","containers/Planner/CourseView/CourseView.tsx","models/CourseModel.ts","containers/Planner/CourseGroupView/CourseGroupView.tsx","containers/Planner/YearView/YearView.tsx","models/TermModel.ts","containers/SearchPanel/SearchPanelViewModel.tsx","containers/Planner/Planner.tsx","containers/Planner/PlannerViewModel.tsx","helpers/ConditionalTreeTraverser.ts","states/CourseState.ts","models/Validations/Validations.ts","models/CurriculumModel.ts","models/ProgramModel.ts","models/SpecialisationModel.ts","states/ProgressionState.ts","states/SearchDataState.ts","states/UserState.ts","contexts/ApplicationContext.ts","containers/SearchPanel/SearchPanelStyles.ts","containers/SearchPanel/Results/CourseResultView.tsx","containers/SearchPanel/Results/SpecialisationResultView.tsx","containers/ProgressionPlanner/CurriculumView/CurriculumElementsView.tsx","containers/ProgressionPlanner/CurriculumView/CurriculumContainerView.tsx","containers/ProgressionPlanner/ProgressionEntityView.tsx","containers/ProgressionPlanner/ProgressionPlanner.tsx","containers/ProgressionPlanner/ProgressionPlannerViewModel.ts","models/Filters/FilterModel.ts","models/Filters/Filters.ts","config/ResetButtonStyle.ts","containers/SearchPanel/Filter/FilterSection.tsx","containers/SearchPanel/Filter/FilterMenuView.tsx","containers/SearchPanel/Results/CourseResultCollectionView.tsx","containers/SearchPanel/SearchTab/CourseSearchTab.tsx","containers/SearchPanel/Results/ProgramResultView.tsx","containers/SearchPanel/Results/ProgramResultCollectionView.tsx","containers/SearchPanel/SearchTab/ProgramSearchTab.tsx","containers/SearchPanel/Results/SpecialisationResultCollectionView.tsx","containers/SearchPanel/SearchTab/SpecialisationSearchTab.tsx","containers/SearchPanel/SearchPanel.tsx","containers/AutoPlan/AutoPlannerView.tsx","containers/AutoPlan/AutoPlannerModel.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ProgressionStatus","ErrorCode","StudyLevel","ImportExportButton","styled","button","props","primary","css","ImportExportButtonContainer","div","LocalImportExport","localImportExportViewModel","inputRef","React","useRef","Fragment","onClick","export","current","click","ref","onChange","event","import","type","style","display","accept","SerializableVersionNumber","_versionNumber","this","imported","a","_version","console","log","LocalImportExportViewModel","userState","progressionState","courseState","_serializables","Map","set","data","FileSaver","saveAs","Blob","JSON","stringify","DateTime","now","toFormat","studyLevel","forEach","serializable","key","serialize","serializeToFile","json","parse","Promise","resolve","get","deserialize","then","catch","error","message","file","target","files","reader","FileReader","onload","ev","result","deserializeFromString","toString","value","readAsText","MenuBarView","Menu","MenuBar","observer","useState","undefined","studyLevelChangeAction","setStudyLevelChangeAction","pointing","Item","header","name","active","UNDERGRADUATE","setStudyLevel","POSTGRADUATE","RESEARCH","Modal","size","open","onClose","Header","Content","Actions","Button","negative","positive","Container","isSelected","isPrerequisiteOfCurrentDraggable","hasErrors","isDragging","isGhosting","horizontal","isRegionSelecting","SelectionCount","UnselectableText","p","tooltipStyle","fontSize","CourseView","CourseStatus","termOffering","allocatedPeriod","output","slice","sort","join","formatTermOffering","course","allocatedTerm","errorList","errors","missing","missingFormatted","regex","length","replace","i","push","formatErrors","performAction","navigator","platform","includes","metaKey","ctrlKey","wasToggleInSelectionGroupKeyUsed","multiSelect","toggleSelection","toggleSelectionInGroup","defaultPrevented","regionSelect","preventDefault","contextMenu","isAnyContextOpen","draggableRef","registerDraggable","contextRef","isCourseContextOpen","setIsCourseContextOpen","draggableId","code","index","droppableIndex","provided","snapshot","draggableProps","dragHandleProps","el","innerRef","prerequisitesOfCurrentDraggable","has","id","onKeyDown","onContextMenu","e","setIsAnyContextOpen","currentOpenContextStateSetter","getBoundingClientRect","left","clientX","top","clientY","right","bottom","height","width","selectedCourses","find","courseModel","data-draggable","Popup","basic","context","items","getContextMenuItems","onItemClick","secondary","vertical","title","Tooltip","aria-label","aria-multiline","arrow","Title","h3","CourseList","isDraggingOver","isValidDroppable","isMultiSelectDragging","isPossibleTermOfCurrentDraggable","courseID","TermHeader","UocLabel","Label","getSelectedMap","memoizeOne","reduce","previous","CourseGroupView","isPossibleTerm","term","currentDraggableProps","possibleTerms","filter","_term","equals","totalUoc","courses","map","creditPoints","b","color","content","droppableId","direction","droppableProps","draggingCourseId","prerequisiteCourseIds","placeholder","YearView","year","courseGroups","courseGroup","TermModel","makeAutoObservable","checkTermConstraints","Error","mappingName","parseInt","split","update","obj","tryGetTermNumber","serializedTerm","SearchPanelItem","CourseModel","contentTypeLabel","corequisites","description","effectiveDate","enrolmentRules","exclusion","facultyName","implementationYear","keywords","prerequisites","schoolName","urlMap","courseStatus","UNPLANNED","_errors","Set","ALLOCATED","clear","COMPLETED","PLANNED","add","delete","status","period","setPlanned","setCompleted","termModel","termFromSerializedData","setAllocated","YearPlanner","Planner","plannerViewModel","useEffect","window","addEventListener","onWindowKeyDown","onWindowContextMenu","onDragEnter","onDragExit","onMouseUp","removeEventListener","plannerState","setIsRegionSelecting","draggableItemRef","linesRef","handleSelectionChange","useCallback","box","draggableBox","boxesIntersect","DragSelection","useSelectionContainer","onSelectionStart","entries","rect","onSelectionChange","onSelectionEnd","setIsDragging","unselectAllCourses","indexOf","newCourses","splice","areMultipleItems","menuItems","icon","moveCourseToRemoved","moveCourseToPlanned","moveCourseToCompleted","isWindowContextOpen","setIsWindowContextOpen","multiSelectProps","contextMenuProps","regionSelectProps","onBeforeCapture","onDragStart","initial","getCourseById","calculateDisplayableTerms","getMissingRequirementsWhenAssigningCourseToTerm","getFlattenedPrerequisiteList","onDragEnd","destination","source","reason","setCourseByDroppableId","getAllGroups","group","courseInGroup","selectedCourse","spliceByGroupId","synchronizePlannerState","clearCurrentDraggableProps","completedGroup","plannedGroup","yearGroups","yearGroup","PlannerViewModel","_courseState","_plannerState","_selectedCourses","_draggingCourseId","_currentDraggableProps","makeObservable","observable","computed","action","allocatedGroups","state","sourceDroppableId","destDroppableId","draggableItemMap","setUnplanned","fromMappingName","moveSelectedToRemoved","moveSelectedToPlanned","moveSelectedToCompleted","referenceCourses","targetCourses","expectedCourses","actualCourses","coursesToRemove","coursesToAdd","maxAllocatedYear","getMaxAllocatedYear","displayableTerms","Date","getFullYear","uniqueYears","getMappingName","getFullName","newPlannerState","synchronizeCourseList","termCourseMap","plannedCourses","completedCourses","groupId","start","deleteCount","getCourseGroupById","conditionalTreeTraverser","treeNode","fnIsLeafValid","invalidations","or","childNode","and","isAndConditionalTree","CourseState","_userState","validations","getTermName","addError","COURSE_NOT_OFFERED_IN_SELECTED_TERM","getMissingPrerequisitesBeforeTerm","PREREQUISITE_REQUIREMENT_NOT_MET","getMissingPrerequisitesPlanned","PREREQUISITES_NOT_PLANNED","conflictingExclusionCourses","exclusionCourseCode","exclusionCourse","EXCLUSION_COURSE_CONFLICT","coursesMapById","coursesMapByActiveStatus","_isUpdated","reaction","_updateStudyLevel","fireImmediately","registerStudyLevelUpdateActionCallback","values","axios","response","transaction","_resetCourseMap","courseObj","addCourse","_loadAllCourses","mapping","courseList","allCourses","concat","allocatedCourses","uniqueTerms","keys","maxYear","courseStatusEnum","isNaN","Number","runValidations","_course","clearErrors","fnValidate","prerequisiteTree","courseCode","isBefore","resp","courseIsOffered","activeCourses","serializedCourseState","when","resetHard","serializedCourse","CurriculumContainer","elements","containers","order","uuidv4","CurriculumElement","itemCode","url","toLowerCase","parseCurriculumContainers","childrenData","rootContainerList","childContainerList","elementList","children","relationships","parseCurriculumElements","container","relationData","relationshipList","relationshipObj","ProgramModel","academicItemType","additionalInfo","structureSummary","curriculumStructure","intakePeriod","programConstraints","progressionStatus","program","SpecialisationModel","specialisation","ProgressionState","_programMapById","_specialisationMapById","loadAllPrograms","loadAllSpecialisations","programObj","addProgram","specialisationObj","addSpecialisation","allPrograms","allSpecialisations","plannedPrograms","plannedSpecialisations","programs","programModel","specialisations","specialisationModel","serializedProgressionState","serializedProgram","getProgramById","serializedSpecialisation","getSpecialisationById","SearchDataState","_progressionState","stringToStudyLevelMap","str","_studyLevel","_studyLevelUpdateActionCallbacks","studyLevelPromises","callback","all","isUpdated","updateAction","serializedUserState","level","searchDataState","ApplicationContext","createContext","ResultItem","ResultItemHeader","ResultItemContent","ResultItemExtra","Extra","ResultCollection","Group","ResultsPagination","Pagination","ResultsColumn","Grid","Column","CourseResultView","showOptions","setShowOptions","onMouseOver","onMouseLeave","Description","newWindow","opener","openInNewTab","Icon","className","SpecialisationResultView","onMouseEnter","CurriculumElementsView","applicationContext","useContext","curriculumElements","divided","element","isCourse","isSpecialisation","CurriculumAccordionCreditPoints","CurriculumAccordionTitle","Accordion","CurriculumDescriptionDiv","CurriculumExpandCollapseLink","CurriculumContent","CurriculumContainerView","getCreditPointsView","uocOfChildren","progressionPlannerViewModel","calculateUocOfChildren","curriculumContainer","exclusive","panels","isContainerActive","sanitizeHtml","href","toggleAllContainers","isAnySubContainerActive","entityId","onTitleClick","toggleContainer","ProgressionEntityTitle","ProgressionEntityView","entity","fluid","ProgressionContainer","ProgresionPlanner","plannedProgressionEntities","ProgressionPlannerViewModel","_progressionPlannerState","_displayableContainerPanels","getUniqueUocOfCurriculumContainer","allChildren","containerId","rootContainer","setAllContainersInactive","setAllContainersActive","FilterModel","fnGetTargetValue","_possibleValues","_selectedValues","filterResultMapping","initializeFilter","allSearchData","flat","applyFilter","searchResults","results","filterValue","isNumerical","possibleFilterValue","filterElementName","numMatchingRecords","SearchPanelViewModel","queryText","isLoading","resultsPerPage","isInputActive","searchFilters","courseFilters","programFilters","specialisationFilters","courseSearchResults","programSearchResults","specialisationSearchResults","activeItem","COURSES","setActiveItem","item","courseSearchData","setIsLoading","filters","getCourseFilters","programSearchData","getProgramFilters","specialisationSearchData","getSpecialisationFilters","autorun","searchCourses","searchPrograms","searchSpecialisations","runInAction","ResetButtonStyle","backgroundColor","border","padding","textDecoration","margin","cursor","FilterSection","expandedFilters","setExpandedFilters","filterState","getFilterState","newExpandedFilters","Form","grouped","filterElementState","Checkbox","label","checked","toggleValue","FilterMenuView","resetValue","as","CourseResultCollectionView","CourseSearchTab","activePageNumber","setActivePageNumber","columns","Row","searchPanelViewModel","Math","min","totalPages","ceil","onPageChange","activePage","ProgramResultView","ProgramResultCollectionView","ProgramSearchTab","SpecialisationResultCollectionView","SpecialisationSearchTab","ResultsSubtextContainer","FoundResults","h4","SearchPanel","getNumResults","numResults","PROGRAMS","SPECIALISATIONS","Input","loading","link","setQueryText","setInputActive","shouldShowPanel","marginRight","Dropdown","text","selection","options","setResultsPerPage","AutoPlanButton","AutoPlanner","autoPlannerViewModel","autoPlan","AutoPlannerViewModel","canAllocateCourses","listYearsToTryAllocate","getYearsToTryAllocate","listTermsToTryAllocate","coursesToBeAllocated","hasChanged","counter","termAllocatedFlag","j","canAssignToTerm","termHasSpaceToAllocate","termHasLessThanThreeCourses","termIsDisabled","assignCourseToTerm","dictKey","list","App","localImportExportModel","Provider","defaultSize","ProgressionPlanner","paddingLeft","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db21da91.chunk.js","sourcesContent":["export interface ICurriculumContainer {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    creditPoints: number;\r\n    elements: ICurriculumElement[];\r\n    containers: ICurriculumContainer[];\r\n    order: number;\r\n}\r\n\r\nexport interface ICurriculumElement {\r\n    name: string;\r\n    description: string;\r\n    type: string;\r\n    creditPoints: number;\r\n    itemCode: string;\r\n    url: string;\r\n    order: number;\r\n    isCourse: () => boolean;\r\n    isSpecialisation: () => boolean;\r\n}\r\n\r\nexport interface IOrConditionalTree {\r\n    or: ConditionalTree[]\r\n}\r\nexport interface IAndConditionalTree {\r\n    and: ConditionalTree[]\r\n}\r\n\r\nexport const isOrConditionalTree = (obj: any): obj is IOrConditionalTree => {\r\n    return obj && obj.or\r\n}\r\n\r\nexport const isAndConditionalTree = (obj: any): obj is IAndConditionalTree => {\r\n    return obj && obj.and\r\n}\r\n\r\nexport type ConditionalTree = IOrConditionalTree | IAndConditionalTree | string\r\n\r\nexport interface ICourse {\r\n    id: string;\r\n    code: string;\r\n    contentTypeLabel: string;\r\n    corequisites: string[];\r\n    creditPoints: number;\r\n    description: string;\r\n    effectiveDate: Date; // Form (new Date('YYYY-MM-DD'));\r\n    enrolmentRules: string[];\r\n    exclusion: string[];\r\n    facultyName: string;\r\n    implementationYear: number;\r\n    keywords: string[];\r\n    prerequisites: ConditionalTree;\r\n    schoolName: string;\r\n    studyLevel: string;\r\n    termOffering: string[];\r\n    title: string;\r\n    urlMap: string;\r\n}\r\n\r\nexport interface IProgram {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    additionalInfo: string;\r\n    implementationYear: number;\r\n    intakePeriod: Array<string>;\r\n    programConstraints: Array<any>;\r\n    studyLevel: string;\r\n}\r\n\r\nexport interface ISpecialisation {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    implementationYear: number;\r\n    keywords: string[];\r\n    studyLevel: string;\r\n    urlMap: string;\r\n}\r\n\r\nexport interface IProgressionEntity {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    structureSummary: string,\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    progressionStatus: ProgressionStatus,\r\n    setPlanned: () => void,\r\n    setUnplanned: () => void,\r\n}\r\n\r\nexport enum ProgressionStatus {\r\n    UNPLANNED,\r\n    PLANNED,\r\n}\r\n\r\nexport interface IValidatableEntity {\r\n    addError: (error: IError) => void\r\n    removeError: (error: IError) => void\r\n    hasErrors: () => boolean\r\n    clearErrors: () => void\r\n    errors: IError[]\r\n}\r\n\r\nexport enum ErrorCode {\r\n    UNKNOWN,\r\n    COURSE_NOT_OFFERED_IN_SELECTED_TERM,\r\n    PREREQUISITES_NOT_PLANNED,  \r\n    PREREQUISITE_REQUIREMENT_NOT_MET,\r\n    COREQUISITE_REQUIREMENT_NOT_MET,\r\n    EXCLUSION_COURSE_CONFLICT,\r\n}\r\n\r\nexport interface IError {\r\n    code: ErrorCode,\r\n    message: string,\r\n    missing: string,\r\n}\r\n\r\nexport enum StudyLevel {\r\n    UNDERGRADUATE=\"undergraduate\",\r\n    POSTGRADUATE=\"postgraduate\",\r\n    RESEARCH=\"research\",\r\n}\r\n","import React from 'react';\nimport { LocalImportExportViewModel } from \"./LocalImportExportViewModel\"\nimport styled, { css } from \"styled-components\"\n\nconst ImportExportButton = styled.button`\n  background: transparent;\n  border-radius: 4px;\n  border: 2px solid darkgrey;\n  color: black;\n  margin: 4px 2px;\n  padding: 15px 32px;\n  font-size: 20px;\n  display: inline-block;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n\n  transition-duration: 0.2s;\n  :hover {\n    background: #f2f2f2;\n  }\n\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */ \n\n  ${props => props.primary && css`\n    background: darkgrey;\n\n    :hover {\n      background: lightgrey;\n    }\n  `}\n`;\n\nconst ImportExportButtonContainer = styled.div`\n  width: 48%;\n  display: inline;\n  background: transparent;\n  float: left;\n  margin: 0% 1%;\n`;\n\nconst LocalImportExport = ({ localImportExportViewModel }: { [key: string]: LocalImportExportViewModel }) => {\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  return (\n    <React.Fragment>\n      <ImportExportButtonContainer>\n        <ImportExportButton primary onClick={() => { localImportExportViewModel.export() }}>\n          Export\n        </ImportExportButton>\n      </ImportExportButtonContainer>\n      <ImportExportButtonContainer>\n        <ImportExportButton onClick={() => { inputRef.current?.click() }}>\n          Import\n        </ImportExportButton>\n        <input\n          ref={inputRef}\n          onChange={(event) => localImportExportViewModel.import(event)}\n          type=\"file\"\n          style={{ display: \"none\" }}\n          accept=\"application/JSON\"\n        />\n      </ImportExportButtonContainer>\n    </React.Fragment >\n  )\n};\n\nexport default LocalImportExport;","import { CourseState } from \"../../states/CourseState\"\nimport { ProgressionState } from \"../../states/ProgressionState\"\nimport React from \"react\"\nimport { UserState } from \"../../states/UserState\"\nimport { ISerializableEntity, TermtanglesSerialized } from \"../../interfaces/SerializableInterfaces\"\nimport { DateTime } from \"luxon\"\nimport FileSaver from \"file-saver\"\n\nexport class SerializableVersionNumber implements ISerializableEntity {\n  private _versionNumber: number = 1;\n\n  serialize(): Object {\n    return this._versionNumber;\n  }\n\n  async deserialize(imported: TermtanglesSerialized): Promise<void> {\n    if (!imported._version) {\n      throw \"ERROR: Version not included.\";\n    }\n\n    console.log(\"Termtangle data version: \" + imported._version);\n  }\n}\n\nexport class LocalImportExportViewModel {\n  private _serializables = new Map<string, ISerializableEntity>();\n\n  constructor (userState: UserState, progressionState: ProgressionState, courseState: CourseState) {\n    this._serializables.set(\"_version\", new SerializableVersionNumber());\n    this._serializables.set(\"userState\", userState);\n    this._serializables.set(\"progressionState\", progressionState);\n    this._serializables.set(\"courseState\", courseState);\n  }\n\n  serializeToFile(data: TermtanglesSerialized) {\n    FileSaver.saveAs(\n      new Blob([JSON.stringify(data)], { type: \"application/json;charset=utf-8\" }),\n      `termtangles_${DateTime.now().toFormat(\"yyyyMMdd_HHmmssSSS\")}.json`,\n    );\n  }\n\n  export() {\n    const data: TermtanglesSerialized = {\n      _version: 0,\n      userState: {studyLevel: \"\"}\n    };\n    this._serializables.forEach((serializable, key) => {\n      data[key] = serializable.serialize();\n    });\n    this.serializeToFile(data);\n  }\n\n  async deserializeFromString (data: string) {\n    try {\n      const json: TermtanglesSerialized = JSON.parse(data);\n\n      return Promise.resolve(\n        this._serializables.get(\"_version\")?.deserialize(json).then(() => \n          this._serializables.get(\"userState\")?.deserialize(json).then(() => \n            Promise.resolve([\n              this._serializables.get(\"progressionState\")?.deserialize(json),\n              this._serializables.get(\"courseState\")?.deserialize(json),\n            ])\n          )\n        )\n      ).catch((error) => { console.error(error) })\n    } catch (e) {\n      console.error(`ERROR: Invalid JSON (${e.message})`);\n    }\n  }\n\n  import (event: React.ChangeEvent<HTMLInputElement>) {\n    const file: Blob = event.target.files![0];\n    \n    let reader = new FileReader();\n    reader.onload = async (ev) => {\n      if (ev.target?.result) {\n        await this.deserializeFromString(ev.target.result.toString());\n        event.target.value = \"\";\n      }\n    }\n    reader.readAsText(file);\n  }\n}\n","import styled from 'styled-components'\nimport { Observer, observer } from 'mobx-react';\nimport React, { useState } from 'react';\nimport { Button, Menu, Modal } from 'semantic-ui-react';\nimport { StudyLevel } from '../../interfaces/ModelInterfaces';\nimport { UserState } from '../../states/UserState';\n\nexport interface IMenuBarProps {\n  userState: UserState\n}\n\nconst MenuBarView = styled(Menu)`\n  &&{\n    margin: auto 0 auto 0;\n  }\n`\n\nexport const MenuBar = observer((props: IMenuBarProps) => {\n  const [studyLevelChangeAction, setStudyLevelChangeAction] = useState<(() => void) | undefined>(undefined)\n  return <Observer>\n    {() => {\n      return (\n        <React.Fragment>\n          <MenuBarView pointing>\n            <Menu.Item header>Termtangles</Menu.Item>\n            <Menu.Item\n              name={\"Undergraduate\"}\n              active={props.userState.studyLevel === StudyLevel.UNDERGRADUATE}\n              onClick={\n                () => props.userState.studyLevel !== StudyLevel.UNDERGRADUATE\n                  ? setStudyLevelChangeAction(() => () => props.userState.setStudyLevel(StudyLevel.UNDERGRADUATE))\n                  : {}\n              }\n            />\n            <Menu.Item\n              name={\"Postgraduate\"}\n              active={props.userState.studyLevel === StudyLevel.POSTGRADUATE}\n              onClick={\n                () => props.userState.studyLevel !== StudyLevel.POSTGRADUATE\n                  ? setStudyLevelChangeAction(() => () => props.userState.setStudyLevel(StudyLevel.POSTGRADUATE))\n                  : {}\n              }\n            />\n            <Menu.Item\n              name={\"Research\"}\n              active={props.userState.studyLevel === StudyLevel.RESEARCH}\n              onClick={\n                () => props.userState.studyLevel !== StudyLevel.RESEARCH\n                  ? setStudyLevelChangeAction(() => () => props.userState.setStudyLevel(StudyLevel.RESEARCH))\n                  : {}\n              }\n            />\n          </MenuBarView>\n\n          <Modal\n            size='small'\n            open={studyLevelChangeAction !== undefined}\n            onClose={() => setStudyLevelChangeAction(undefined)}\n          >\n            <Modal.Header>Study Level Change</Modal.Header>\n            <Modal.Content>\n              <p>Changing study level will reset all current progress. Do you want to continue?</p>\n            </Modal.Content>\n            <Modal.Actions>\n              <Button negative onClick={() => setStudyLevelChangeAction(undefined)}>\n                No\n              </Button>\n              <Button positive onClick={() => {\n                if (studyLevelChangeAction) {\n                  studyLevelChangeAction()\n                }\n                setStudyLevelChangeAction(undefined)\n              }}>\n                Yes\n              </Button>\n            </Modal.Actions>\n          </Modal>\n\n        </React.Fragment>\n      )\n    }}\n  </Observer>\n})\n","import styled from 'styled-components'\nimport { CourseModel } from '../../../models/CourseModel';\nimport { Draggable, DraggableProvided, DraggableStateSnapshot } from 'react-beautiful-dnd'\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { IError } from '../../../interfaces/ModelInterfaces';\nimport { TermModel } from '../../../models/TermModel';\nimport { Menu, MenuItemProps, Popup } from 'semantic-ui-react';\nimport React from 'react';\nimport { IMultiSelectProps, IContextMenuProps, IRegionSelectProps } from '../Planner';\n\nconst getBackgroundColor = (props) => {\n  return (\n    props.isPrerequisiteOfCurrentDraggable\n      ? '#c5eafc'\n      : props.hasErrors()\n        ? '#f5bfc8'\n        : props.isDragging\n          ? 'lightgrey'\n          : 'white'\n  )\n}\n\nconst Container = styled.div`\n  border: ${(props) =>\n    props.isSelected\n      ? \"2px dashed royalblue\"\n      : \"2px solid lightgrey\"\n  };\n  border-radius: 8px;\n  padding: 8px;\n  margin: 0px 2px 8px 2px;\n  background-color: ${getBackgroundColor};\n  ${(props) =>\n    props.isDragging\n      ? `box-shadow: 2px 2px 1px lightgrey;`\n      : ''\n  }\n  \n  ${(props) =>\n    props.isGhosting\n      ? 'opacity: 0.9; color: darkgrey;'\n      : ''\n  }\n\n  /* needed for SelectionCount */\n  position: relative;\n\n  ${props => props.horizontal ? \"\" : \"flex-grow: 1;\"}\n  height: fit-content;\n  max-width: 350px;\n\n  &:active {\n    outline: none;\n    ${props => props.isRegionSelecting ? \"\" : \"border: 2px inset lightgrey;\"}\n  }\n\n\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */\n`\nconst SelectionCount = styled.div`\n  right: -20px;\n  top: -20px;\n  color: white;\n  background: royalblue;\n  border-radius: 50%;\n  height: 35px;\n  width: 35px;\n  line-height: 35px;\n  position: absolute;\n  text-align: center;\n  font-size: 15px;\n  \n`;\n\nconst UnselectableText = styled.p`\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */      \n`\n\nconst tooltipStyle = {\n  fontSize: 13,\n}\n\ninterface ICourseViewProps {\n  droppableIndex: number\n  course: CourseModel\n  prerequisitesOfCurrentDraggable: Set<string>\n  horizontal?: boolean\n  isSelected: boolean\n  isGhosting: boolean\n\n  multiSelect: IMultiSelectProps;\n  contextMenu: IContextMenuProps;\n  regionSelect: IRegionSelectProps;\n}\n\nconst CourseView = (props: ICourseViewProps) => {\n  let termOffering = formatTermOffering(props.course.termOffering, props.course.allocatedTerm);\n  let errorList: string[] = formatErrors(props.course.errors);\n\n  const wasToggleInSelectionGroupKeyUsed = (event: MouseEvent | KeyboardEvent) => {\n    return navigator.platform.includes('Mac')\n      ? event.metaKey\n      : event.ctrlKey;\n  };\n\n  const performAction = (event: MouseEvent | KeyboardEvent) => {\n    if (wasToggleInSelectionGroupKeyUsed(event)) {\n      props.multiSelect.toggleSelectionInGroup(props.course);\n      return;\n    }\n\n    props.multiSelect.toggleSelection(props.course);\n  };\n\n  const onKeyDown = (event: KeyboardEvent, provided: DraggableProvided, snapshot: DraggableStateSnapshot) => {\n    if (event.defaultPrevented) return;\n\n    if (snapshot.isDragging) return;\n\n    if (event.key !== \"enter\") return;\n\n    event.preventDefault();\n    performAction(event);\n  }\n\n  const onClick = (event: MouseEvent) => {\n    if (event.defaultPrevented) return;\n\n    if (event.button !== 0) return;\n\n    if (props.regionSelect.isRegionSelecting) return;\n\n    event.preventDefault();\n    if (props.contextMenu.isAnyContextOpen) return;\n\n    performAction(event);\n  };\n\n  // Drag region selection\n  const draggableRef = React.useRef<HTMLDivElement | null | undefined>();\n  props.regionSelect.registerDraggable(props.course, draggableRef);\n\n  const contextRef = React.useRef<any>();\n  const [isCourseContextOpen, setIsCourseContextOpen] = React.useState(false);\n\n  const onContextMenu = (event: MouseEvent) => {\n    event.preventDefault()\n\n    if (props.contextMenu.isAnyContextOpen) {\n      props.contextMenu.currentOpenContextStateSetter.current(false);\n    }\n\n    props.contextMenu.currentOpenContextStateSetter.current = setIsCourseContextOpen;\n\n    contextRef.current = {\n      getBoundingClientRect: () => ({\n        left: event.clientX,\n        top: event.clientY,\n        right: event.clientX + 1,\n        bottom: event.clientY + 1,\n        height: 0,\n        width: 0,\n      }),\n    }\n\n    // If course not in selectedCourses, toggle selection\n    if (!props.multiSelect.selectedCourses.find((courseModel: CourseModel) => courseModel.id === props.course.id)) {\n      props.multiSelect.toggleSelection(props.course);\n    }\n    setIsCourseContextOpen(true)\n    props.contextMenu.setIsAnyContextOpen(true)\n  }\n\n  return (\n    <Draggable draggableId={props.course.code} index={props.droppableIndex} >\n      {((provided, snapshot) => {\n        return (\n          <Container\n            horizontal={props.horizontal}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            ref={(el) => {\n              provided.innerRef(el);\n              draggableRef.current = el;\n            }}\n            isDragging={snapshot.isDragging}\n            isPrerequisiteOfCurrentDraggable={props.prerequisitesOfCurrentDraggable.has(props.course.id)}\n            hasErrors={() => props.course.hasErrors()}\n            isSelected={props.isSelected}\n            onClick={onClick}\n            onKeyDown={(event: KeyboardEvent) => onKeyDown(event, provided, snapshot)}\n            isGhosting={props.isGhosting}\n            onContextMenu={(e) => {\n              props.contextMenu.setIsAnyContextOpen(true);\n              onContextMenu(e);\n            }}\n            isRegionSelecting={props.regionSelect.isRegionSelecting}\n            // https://github.com/AirLabsTeam/react-drag-to-select#working-with-draggable-elements\n            // Tell region select this is a draggable.\n            data-draggable={true}\n          >\n            <Popup\n              basic\n              context={contextRef}\n              onClose={() => {\n                setIsCourseContextOpen(false);\n                props.contextMenu.setIsAnyContextOpen(false);\n              }}\n              open={isCourseContextOpen && props.contextMenu.isAnyContextOpen}\n            >\n              <Menu\n                items={props.contextMenu.getContextMenuItems(props.course)}\n                onItemClick={(e) => {\n                  e.preventDefault();\n                  setIsCourseContextOpen(false);\n                  props.contextMenu.setIsAnyContextOpen(false);\n                }}\n                secondary\n                vertical\n              />\n            </Popup>\n\n            {!props.regionSelect.isRegionSelecting ? (\n              <Tooltip title={\n                <span>\n                  <UnselectableText style={tooltipStyle}>{termOffering}</UnselectableText>\n                  <UnselectableText style={tooltipStyle}>{errorList[0]}</UnselectableText>\n                  <UnselectableText style={tooltipStyle}>{errorList[1]}</UnselectableText>\n                </span>}\n                aria-label=\"add\" aria-multiline=\"true\" arrow={true}\n              >\n                <UnselectableText> {props.course.code} - {props.course.title}</UnselectableText>\n              </Tooltip>\n            ) : <UnselectableText> {props.course.code} - {props.course.title}</UnselectableText>}\n\n            {snapshot.isDragging && props.multiSelect.selectedCourses.length > 1 ? (\n              <SelectionCount>{props.multiSelect.selectedCourses.length}</SelectionCount>\n            ) : undefined}\n          </Container>\n        )\n      })}\n    </Draggable>\n  )\n}\n\nfunction formatErrors(errors: IError[]): string[] {\n  let output: string[] = [];\n  let missing: string[] = [];\n  let missingFormatted: string[] = [];\n  const regex = /<br\\/>/ig;\n\n  if (errors.length === 0) {\n    return [\"\"];\n  }\n\n  if (errors.length === 1) {\n    return [errors[0].message.replace(regex, \"\"), `${errors[0].missing} `];\n  }\n\n  for (let i = 0; i < errors.length; i++) {\n    output.push(errors[i].message.replace(regex, \"\"));\n    missing.push(errors[i].missing);\n  }\n\n  // Format missing arr for empty elements and remove from array before joining\n  for (let i = 0; i < errors.length; i++) {\n    if (missing[i] !== \"\") {\n      missingFormatted.push(missing[i]);\n    }\n  }\n\n  return [output.join(\" & \"), missingFormatted.join(\" & \")];\n}\n\nfunction formatTermOffering(termOffering: string[], allocatedPeriod: TermModel | undefined) {\n  termOffering = termOffering.slice().sort();\n  let output: string = termOffering.join(\", \");\n\n  output = `Term Offerings: ${output} `;\n\n  return output;\n}\n\nexport default CourseView\n","import { makeAutoObservable } from \"mobx\";\nimport { TermModel } from \"./TermModel\";\nimport { SerializedCourse, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\nimport { ICourse, ConditionalTree, IValidatableEntity, IError } from '../interfaces/ModelInterfaces';\n\nexport enum CourseStatus {\n  UNPLANNED,\n  PLANNED,\n  ALLOCATED,\n  COMPLETED,\n}\n\nexport class CourseModel implements ICourse, IValidatableEntity, ISerializableEntity {\n  allocatedTerm: TermModel | undefined = undefined;\n  public readonly id: string\n  public courseStatus: CourseStatus = CourseStatus.UNPLANNED // Default unplanned\n\n  private _errors: Set<IError> = new Set<IError>()\n\n  constructor(\n    public readonly code: string,\n    public readonly contentTypeLabel: string,\n    public readonly corequisites: string[],\n    public readonly creditPoints: number,\n    public readonly description: string,\n    public readonly effectiveDate: Date, // Form (new Date('YYYY-MM-DD'));\n    public readonly enrolmentRules: string[],\n    public readonly exclusion: string[],\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly keywords: string[],\n    public readonly prerequisites: ConditionalTree,\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly termOffering: string[],\n    public readonly title: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code;\n    makeAutoObservable(this)\n  }\n\n  setAllocated(term: TermModel) {\n    this.courseStatus = CourseStatus.ALLOCATED\n    this.allocatedTerm = term\n  }\n\n  setUnplanned() {\n    this._errors.clear()\n    this.courseStatus = CourseStatus.UNPLANNED\n    this.allocatedTerm = undefined\n  }\n\n  setCompleted() {\n    this._errors.clear()\n    this.courseStatus = CourseStatus.COMPLETED\n    this.allocatedTerm = undefined\n  }\n\n  setPlanned() {\n    this.courseStatus = CourseStatus.PLANNED\n    this.allocatedTerm = undefined\n  }\n\n  //#region IValidatableEntity\n  addError(error: IError) {\n    this._errors.add(error)\n  }\n\n  removeError (error: IError) {\n    this._errors.delete(error)\n  }\n\n  hasErrors(): boolean {\n    return this._errors.size > 0\n  }\n\n  clearErrors() {\n    this._errors.clear()\n  }\n\n  get errors(): IError[] {\n    return [...this._errors]\n  }\n  //#endregion\n\n  serialize(): SerializedCourse {\n    if (this.courseStatus !== CourseStatus.ALLOCATED) {\n      return {\n        id: this.id,\n        status: CourseStatus[this.courseStatus],\n      }\n    } else {\n      return {\n        id: this.id,\n        status: CourseStatus[this.courseStatus],\n        period: this.allocatedTerm?.serialize(),\n      }\n    }\n  }\n\n  async deserialize(course: SerializedCourse) {\n    if (course.id !== this.id) {\n      console.error(`ERROR: This course is not ${course.id} (is: ${this.id})`);\n      return;\n    }\n\n    switch(course.status) {\n      case (CourseStatus[CourseStatus.PLANNED]): {\n        this.setPlanned();\n        break;\n      }\n      case (CourseStatus[CourseStatus.COMPLETED]): {\n        this.setCompleted();\n        break;\n      }\n      case (CourseStatus[CourseStatus.ALLOCATED]): {\n        if (course.period) {\n          try {\n            let termModel = TermModel.termFromSerializedData(course.period);\n            this.setAllocated(termModel);\n          } catch (e) {\n            console.error(`ERROR: invalid term period passed in ${course.period} (${e.message})`);\n          }\n          \n        } else {\n          console.error(`ERROR: Allocated course status with no period ${course.id}`);\n        }\n        break;\n      }\n      default: {\n        console.error(`ERROR: ${course.status} is not a valid status`);\n      }\n    }\n  }\n\n  toString() {\n    return `[COURSE_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadCourseByCode(courseCode: string) {\n//   return db.collection(\"courses\")\n//     .doc(courseCode)!\n//     .withConverter(courseConverter)\n//     .get().then((doc) => {\n//       if (doc.exists) {\n//         var course = doc.data()!;\n\n//         return course;\n//       } else {\n//         console.log(\"No such document!\");\n//       }\n//     }).catch((error) => {\n//       console.log(\"Error getting document:\", error);\n//       throw new Error();\n//     });\n// }\n\n// let courseConverter = {\n//   toFirestore: function (course) {\n//     return {\n//       name: course.code,\n//     };\n//   },\n//   fromFirestore: function (snapshot, options) {\n//     const data = snapshot.data(options);\n//     let effectiveDate = new Date(data.effectiveDate);\n\n//     return new CourseModel(\n//       data.code,\n//       data.contentTypeLabel,\n//       data.corequisites,\n//       Number(data.creditPoints),\n//       data.description,\n//       effectiveDate,\n//       data.enrolmentRules,\n//       data.exclusion,\n//       data.facultyName,\n//       Number(data.implementationYear),\n//       data.keywords,\n//       data.prerequisites,\n//       data.schoolName,\n//       data.studyLevel,\n//       data.termOffering,\n//       data.title,\n//       data.urlMap,\n//     );\n//   }\n// };","import { Droppable } from 'react-beautiful-dnd';\nimport { Label } from 'semantic-ui-react';\nimport styled from 'styled-components'\nimport { CourseModel } from '../../../models/CourseModel';\nimport { TermModel } from '../../../models/TermModel';\nimport CourseView from '../CourseView/CourseView';\nimport { ICourseGroup, ICurrentDraggableProps } from '../PlannerViewModel';\nimport { MenuItemProps } from 'semantic-ui-react'\nimport memoizeOne from \"memoize-one\"\nimport { IMultiSelectProps, IContextMenuProps, IRegionSelectProps } from '../Planner';\n\nconst Container = styled.div`\n  margin: 8px;\n  border: 1px solid lightgrey;\n  border-radius:2px;\n\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  ${props => !props.horizontal ? \"max-width: 350px\" : \"\"};\n  ${props => props.title === \"Planned\" ? \"min-width: 350px\" : \"\"};\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */ \n`\n\nconst Title = styled.h3`\n  padding: 6px;\n  margin: 0 0;\n  display: flex;\n  width: 200px;\n`;\n\nconst CourseList = styled.div`\n  padding: 6px;\n  min-height: 100px;\n  transition: background-color 0.2s ease;\n  background-color: ${props =>\n  (props.isDraggingOver\n    ? props.isValidDroppable || props.isMultiSelectDragging\n      ? '#8debb7'\n      : '#ff99b0'\n    : props.isPossibleTermOfCurrentDraggable\n      ? '#cafae0'\n      : (props.courseID === \"completed\")\n        ? '#edf2f4'\n        : (props.courseID === \"planned\")\n          ? '#edf2f4'\n          : '#edf2f4'\n  )\n  };\n  flex-grow: 1;\n  display: flex;\n  flex-direction: ${props => props.horizontal ? \"row\" : \"column\"};\n  flex-flow: row ${props => props.horizontal ? \"wrap\" : \"nowrap\"};\n  align-content: flex-start;\n  max-width: inherit;\n`;\n\n\n\nconst TermHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`\n\nconst UocLabel = styled(Label)`\n  && {\n    margin: auto 0 auto 0;\n    height: fit-content;\n    vertical-align: middle;\n    white-space: nowrap;\n  } \n`\n\ninterface ITermViewProps {\n  id: string\n  title: string\n  courses: CourseModel[]\n  term: TermModel | null\n  currentDraggableProps: ICurrentDraggableProps\n  horizontal?: boolean\n\n  multiSelect: IMultiSelectProps;\n  contextMenu: IContextMenuProps;\n  regionSelect: IRegionSelectProps;\n}\n\nconst getSelectedMap = memoizeOne((selectedCourses: CourseModel[]) =>\n  selectedCourses.reduce((previous, current) => {\n    previous[current.id] = true;\n    return previous;\n  }, {}),\n);\n\nconst CourseGroupView = (props: ITermViewProps) => {\n  const isPossibleTerm = (term: TermModel | null): boolean => {\n    return props.currentDraggableProps.possibleTerms.filter(_term => _term.equals(term)).length > 0\n  }\n  const totalUoc = props.courses.map(course => course.creditPoints).reduce((a, b) => a + b, 0)\n\n  return (\n    <Container horizontal={props.horizontal} title={props.title}>\n      <TermHeader>\n        <Title>{props.title}</Title>\n        {\n          props.term\n            ? <UocLabel\n              color={(totalUoc === 18 || props.courses.length === 3)\n                ? \"green\"\n                : totalUoc < 18\n                  ? \"orange\"\n                  : \"yellow\"\n              }\n              content={`${totalUoc} UOC`}\n              size={\"small\"}\n            />\n            : <></>\n        }\n      </TermHeader>\n      <Droppable\n        droppableId={props.id}\n        direction={props.horizontal ? 'horizontal' : 'vertical'}\n      >\n        {\n          (provided, snapshot) => (\n            <CourseList\n              horizontal\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              isDraggingOver={snapshot.isDraggingOver}\n              courseID={provided.droppableProps['data-rbd-droppable-id']}\n              isPossibleTermOfCurrentDraggable={isPossibleTerm(props.term)}\n              isValidDroppable={props.term === null || isPossibleTerm(props.term)}\n              isMultiSelectDragging={props.multiSelect.selectedCourses.length > 1}\n            >\n              {\n                props.courses ? props.courses.map((course, index) => {\n                  const isSelected: boolean = !!getSelectedMap(props.multiSelect.selectedCourses)[course.id]\n                  const isGhosting: boolean = isSelected && !!props.multiSelect.draggingCourseId && props.multiSelect.draggingCourseId !== course.id;\n                  return (\n                    <CourseView\n                      horizontal={props.horizontal}\n                      key={course.code}\n                      course={course}\n                      droppableIndex={index}\n                      prerequisitesOfCurrentDraggable={props.currentDraggableProps.prerequisiteCourseIds}\n                      isSelected={isSelected}\n                      isGhosting={isGhosting}\n                      multiSelect={props.multiSelect}\n                      contextMenu={props.contextMenu}\n                      regionSelect={props.regionSelect}\n                    />\n                  )\n                })\n                  : undefined\n              }\n              {provided.placeholder}\n            </CourseList>\n          )\n        }\n      </Droppable>\n    </Container>\n  )\n};\nexport default CourseGroupView\n","import { MenuItemProps } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport { CourseModel } from '../../../models/CourseModel';\nimport CourseGroupView from '../CourseGroupView/CourseGroupView';\nimport { IContextMenuProps, IMultiSelectProps, IRegionSelectProps } from '../Planner';\nimport { ICourseGroup, ICurrentDraggableProps } from '../PlannerViewModel';\n\nconst Container = styled.div`\n    margin: 8px;\n    border: 1px solid lightgrey;\n    border-radius:2px;\n    width: 250px;\n    -webkit-user-select: none;  /* Chrome all / Safari all */\n    -moz-user-select: none;     /* Firefox all */\n    -ms-user-select: none;      /* IE 10+ */\n    user-select: none;          /* Likely future */ \n`\n\nconst Title = styled.h3`\n    padding: 6px;\n    margin: 3px;\n    display: flex;\n    width: 200px;\n`;\n\ninterface IYearViewProps {\n  id: string,\n  title: string,\n  year: number,\n  courseGroups: ICourseGroup[],\n  currentDraggableProps: ICurrentDraggableProps,\n\n  multiSelect: IMultiSelectProps;\n  contextMenu: IContextMenuProps;\n  regionSelect: IRegionSelectProps;\n}\n\nconst YearView = (props: IYearViewProps) => {\n  return (\n    <Container>\n      <Title>{props.year}</Title>\n      {\n        props.courseGroups.map(courseGroup => {\n          // console.log(`Rendering term ${courseGroup.title} with courses ${courseGroup.courses}`)\n          return (\n            <CourseGroupView\n              key={courseGroup.id}\n              id={courseGroup.id}\n              title={courseGroup.title}\n              courses={courseGroup.courses}\n              term={courseGroup.term}\n              currentDraggableProps={props.currentDraggableProps}\n              multiSelect={props.multiSelect}\n              contextMenu={props.contextMenu}\n              regionSelect={props.regionSelect}\n            />\n          )\n        })\n      }\n    </Container>\n  )\n};\nexport default YearView\n","import { makeAutoObservable } from \"mobx\";\nimport { SerializedTerm, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\n\nexport class TermModel implements ISerializableEntity {\n    year: number;\n    name: string;\n\n    constructor(\n        year: number,\n        name: string,\n    ) {\n        makeAutoObservable(this);\n        this.checkTermConstraints(year, name);\n        \n        this.year = year;\n        this.name = name;\n    }\n\n    static termFromSerializedData(serializedTerm: SerializedTerm) {\n        return new TermModel(serializedTerm.year, serializedTerm.name);\n    }\n\n    private checkTermConstraints(year?: number, name?: string) {\n        if (!year) throw Error(`ERROR: ${year} is not a valid term year.`);\n        if (!name) throw Error(`ERROR: ${name} is not a valid term name.`);\n\n        // Do other term checks here\n    }\n\n    // getShortName() {\n    //     if (this.tryGetTermNumber()) {\n    //         return `${this.year % 100}T${this.tryGetTermNumber()}`\n    //     }\n    //     return `${this.year % 100} ${this.name}`\n    // }\n\n    get getMappingName() {\n        return `${this.year}_${this.name}`\n    }\n\n    update(year: number, name: string) {\n        this.year = year\n        this.name = name\n    }\n\n    updateFromMappingName(mappingName: string) {\n        let year = parseInt(mappingName.split('_')[0])\n        let name = mappingName.split('_')[1]\n        this.update(year, name)\n    }\n\n    get getFullName() {\n        return `${this.year} ${this.name}`\n    }\n\n    get getTermName() {\n        return `${this.name}`\n    }\n\n    static fromMappingName(mappingName: string) {\n        let year = parseInt(mappingName.split('_')[0])\n        let term_name = mappingName.split('_')[1]\n\n        return new TermModel(year, term_name)\n    }\n\n    private tryGetTermNumber(): number | undefined {\n        switch (this.name) {\n            case \"Summer Term\":\n                return 0\n            case \"Term 1\":\n                return 1\n            case \"Term 2\":\n                return 2\n            case \"Term 3\":\n                return 3\n            default:\n                return undefined\n        }\n    }\n\n    public equals(obj: TermModel | null): boolean {\n        if (!obj) {\n            return false\n        }\n        return this.year === obj.year && this.name === obj.name\n    }\n\n    public isBefore(term: TermModel) {\n        return this.year < term.year\n            || (term.year === this.year && ( (this.tryGetTermNumber() ?? 99) < (term.tryGetTermNumber() ?? 99)) );\n    }\n\n    serialize(): SerializedTerm {\n        return {\n            year: this.year,\n            name: this.name,\n        };\n    }\n\n    deserialize(serializedTerm: SerializedTerm): Promise<void> {\n        throw Error(`ERROR: use static method termFromSerializedData to construct the term from serialized data ${serializedTerm}.`);\n    }\n}\n","import { autorun, makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport { CourseModel } from \"../../models/CourseModel\";\nimport { FilterModel } from \"../../models/Filters/FilterModel\";\nimport { getCourseFilters, getProgramFilters, getSpecialisationFilters } from \"../../models/Filters/Filters\";\nimport { ProgramModel } from \"../../models/ProgramModel\";\nimport { SpecialisationModel } from \"../../models/SpecialisationModel\";\nimport { SearchDataState } from \"../../states/SearchDataState\";\n\nexport interface ISearchQuery<T> {\n  queryText: string,\n  filters: FilterModel<T>[],\n}\n\nexport interface ISearchResults {\n  courseSearchResults: CourseModel[],\n  programSearchResults: ProgramModel[],\n  specialisationSearchResults: SpecialisationModel[],\n}\n\nexport interface ISearchFilters {\n  courseFilters: FilterModel<CourseModel>[],\n  programFilters: FilterModel<ProgramModel>[],\n  specialisationFilters: FilterModel<SpecialisationModel>[],\n}\n\nexport enum SearchPanelItem {\n  COURSES,\n  PROGRAMS,\n  SPECIALISATIONS,\n}\n\nexport class SearchPanelViewModel {\n  constructor(\n    public readonly searchDataState: SearchDataState,\n  ) {\n    makeAutoObservable<SearchPanelViewModel>(this)\n\n    reaction(() => searchDataState.courseSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.courseFilters = getCourseFilters(searchDataState.courseSearchData)\n    }, {fireImmediately: true})\n\n    reaction(() => searchDataState.programSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.programFilters = getProgramFilters(searchDataState.programSearchData)\n    }, {fireImmediately: true})\n\n    reaction(() => searchDataState.specialisationSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.specialisationFilters = getSpecialisationFilters(searchDataState.specialisationSearchData)\n    }, {fireImmediately: true})\n\n    autorun(() => {\n      this.searchCourses()\n    });\n\n    autorun(() => {\n      this.searchPrograms()\n    });\n\n    autorun(() => {\n      this.searchSpecialisations()\n    });\n  }\n\n  public queryText: string = \"\"\n  public isLoading: boolean = true\n  public resultsPerPage: number = 10\n  public isInputActive: boolean = false\n  public searchFilters: ISearchFilters = {\n    courseFilters: [],\n    programFilters: [],\n    specialisationFilters: [],\n  }\n  public searchResults: ISearchResults = {\n    courseSearchResults: [],\n    programSearchResults: [],\n    specialisationSearchResults: [],\n  }\n  public activeItem: SearchPanelItem = SearchPanelItem.COURSES\n\n  public setActiveItem = (item: SearchPanelItem) => {\n    this.activeItem = item\n  }\n\n  get shouldShowPanel() {\n    return this.isInputActive || this.queryText.length > 0\n  }\n\n  setInputActive(isInputActive: boolean) {\n    this.isInputActive = isInputActive;\n  }\n\n  setQueryText(queryText: string) {\n    this.queryText = queryText\n  }\n\n  setIsLoading(isLoading: boolean) {\n    this.isLoading = isLoading\n  }\n\n  setResultsPerPage(resultsPerPage: number) {\n    this.resultsPerPage = resultsPerPage\n  }\n\n  searchCourses() {\n    let results = this.searchDataState.courseSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.courseSearchData\n        .filter(course => {\n          return course.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || course.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.courseFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.courseSearchResults = results)\n  }\n  \n\n  searchPrograms() {\n    let results = this.searchDataState.programSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.programSearchData\n        .filter(program => {\n          return program.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || program.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.programFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.programSearchResults = results)\n  }\n\n  searchSpecialisations() {\n    let results = this.searchDataState.specialisationSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.specialisationSearchData\n        .filter(specialisation => {\n          return specialisation.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || specialisation.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.specialisationFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.specialisationSearchResults = results)\n  }\n\n\n}\n","import { Observer, observer } from 'mobx-react';\nimport React, { useEffect, useCallback, useRef, useState } from 'react';\nimport styled from 'styled-components'\nimport { DragDropContext, DragStart, DropResult } from 'react-beautiful-dnd';\nimport { TermModel } from '../../models/TermModel';\nimport { ICourseGroup, PlannerViewModel } from './PlannerViewModel';\nimport CourseGroupView from './CourseGroupView/CourseGroupView';\nimport YearView from './YearView/YearView';\nimport { CourseModel, CourseStatus } from '../../models/CourseModel';\nimport { Menu, MenuItemProps, Popup } from 'semantic-ui-react';\nimport { Box, boxesIntersect, useSelectionContainer } from 'react-drag-to-select'\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n`\n\nconst YearPlanner = styled.div`\n  display: inherit;\n  overflow: auto;\n`\n\nexport interface IMultiSelectProps {\n  selectedCourses: CourseModel[];\n  draggingCourseId?: string;\n  toggleSelection: (course: CourseModel) => void;\n  toggleSelectionInGroup: (course: CourseModel) => void;\n}\n\nexport interface IContextMenuProps {\n  getContextMenuItems: (course: CourseModel) => MenuItemProps[];\n  isAnyContextOpen: boolean;\n  setIsAnyContextOpen: (b: boolean) => void;\n  currentOpenContextStateSetter: React.MutableRefObject<any>;\n}\n\nexport interface IRegionSelectProps {\n  registerDraggable: (courseModel: CourseModel, ref: React.MutableRefObject<HTMLDivElement | null | undefined>) => void;\n  isRegionSelecting: boolean;\n}\n\nconst Planner = observer(({ plannerViewModel }: { [key: string]: PlannerViewModel }) => {\n  return <Observer>\n    {() => {\n      useEffect(() => {\n        window.addEventListener(\"keydown\", onWindowKeyDown);\n        window.addEventListener(\"contextmenu\", onWindowContextMenu);\n        window.addEventListener(\"dragenter\", onDragEnter);\n        window.addEventListener(\"dragexit\", onDragExit);\n        window.addEventListener(\"mouseup\", onMouseUp);\n\n        return () => {\n          window.removeEventListener(\"keydown\", onWindowKeyDown);\n          window.removeEventListener(\"contextmenu\", onWindowContextMenu);\n          window.removeEventListener(\"dragenter\", onDragEnter);\n          window.removeEventListener(\"dragexit\", onDragExit);\n          window.removeEventListener(\"mouseup\", onMouseUp);\n        }\n      });\n\n      const courseState = plannerViewModel.courseState;\n      const plannerState = plannerViewModel.plannerState;\n\n      // Drag region selection\n      const [isRegionSelecting, setIsRegionSelecting] = useState(false);\n      const draggableItemRef = useRef<Map<CourseModel, HTMLDivElement>>(new Map<CourseModel, HTMLDivElement>());\n      const linesRef = useRef<[CourseModel, Box][]>([]);\n\n      const registerDraggable = (courseModel: CourseModel, ref: React.MutableRefObject<HTMLDivElement | null | undefined>) => {\n        if (!ref.current) return;\n        draggableItemRef.current?.set(courseModel, ref.current);\n      }\n\n      const handleSelectionChange = useCallback((box: Box) => {\n        linesRef.current\n          .filter(([courseModel, draggableBox]) => {\n            const isSelected: boolean = plannerViewModel.selectedCourses.includes(courseModel);\n            const isIntersecting: boolean = boxesIntersect(box, draggableBox);\n\n            return (isSelected !== isIntersecting);\n          }, [])\n          .forEach(([courseModel, _]) => toggleSelectionInGroup(courseModel));\n      }, []);\n\n      const { DragSelection } = useSelectionContainer({\n        onSelectionStart: () => {\n          setIsRegionSelecting(true);\n          linesRef.current = [...draggableItemRef.current.entries()].reduce((previous: [CourseModel, Box][], [courseModel, div]) => {\n            const rect = div.getBoundingClientRect();\n            return [\n              ...previous,\n              [courseModel, rect]\n            ];\n          }, []);\n        },\n        onSelectionChange: handleSelectionChange,\n        onSelectionEnd: () => {\n          linesRef.current = [];\n        }\n      });\n\n      // Dragging\n      const [isDragging, setIsDragging] = React.useState(false);\n      const onDragStart = (initial: DragStart) => {\n        setIsDragging(true);\n        const selected: CourseModel | undefined = plannerViewModel.selectedCourses.find(\n          (course: CourseModel): boolean => course.id === initial.draggableId,\n        );\n\n        if (!selected) plannerViewModel.unselectAllCourses();\n\n        plannerViewModel.draggingCourseId = initial.draggableId;\n\n        const course = courseState.getCourseById(initial.draggableId);\n\n        if (!course) return;\n\n        // Don't calculate validations if we are multi selecting\n        if (plannerViewModel.selectedCourses.length > 1) return;\n\n        plannerViewModel.currentDraggableProps = {\n          ...plannerViewModel.currentDraggableProps,\n          possibleTerms: plannerViewModel.calculateDisplayableTerms().filter(term => {\n            return courseState.getMissingRequirementsWhenAssigningCourseToTerm(course, term).length === 0\n          }),\n          prerequisiteCourseIds: new Set<string>(courseState.getFlattenedPrerequisiteList(course.prerequisites))\n        }\n      }\n\n      const onDragEnd = (result: DropResult) => {\n        const { destination, source } = result;\n        if (!destination || result.reason === \"CANCEL\") {\n          plannerViewModel.draggingCourseId = undefined;\n          return;\n        }\n        if (!plannerViewModel.draggingCourseId) return;\n\n        plannerViewModel.selectedCourses.forEach((course: CourseModel) =>\n          plannerViewModel.setCourseByDroppableId(course, source.droppableId, destination.droppableId, draggableItemRef.current)\n        );\n\n        const allGroups = plannerViewModel.getAllGroups();\n        allGroups.forEach((group: ICourseGroup) => {\n          group.courses = group.courses.filter((courseInGroup: CourseModel) =>\n            !plannerViewModel.selectedCourses.find((selectedCourse: CourseModel) =>\n              selectedCourse.id === courseInGroup.id\n            )\n          )\n        })\n        plannerViewModel.spliceByGroupId(destination.droppableId, destination.index, 0, ...plannerViewModel.selectedCourses)\n\n        const draggingCourseIsSelected: boolean = !!plannerViewModel.selectedCourses.find((courseModel) => {\n          return courseModel.id === plannerViewModel.draggingCourseId;\n        });\n        if (!draggingCourseIsSelected) {\n          const courseModel = courseState.getCourseById(plannerViewModel.draggingCourseId);\n          if (courseModel) {\n            plannerViewModel.setCourseByDroppableId(courseModel, source.droppableId, destination.droppableId, draggableItemRef.current);\n            plannerViewModel.spliceByGroupId(source.droppableId, source.index, 1);\n            plannerViewModel.spliceByGroupId(destination.droppableId, destination.index + plannerViewModel.selectedCourses.length, 0, courseModel);\n          }\n        }\n\n        plannerViewModel.draggingCourseId = undefined;\n\n        setIsDragging(false);\n\n        plannerViewModel.synchronizePlannerState()\n        plannerViewModel.clearCurrentDraggableProps()\n      }\n\n      const onBeforeCapture = () => {\n        plannerViewModel.currentDraggableProps = {\n          ...plannerViewModel.currentDraggableProps,\n          isDragging: true,\n        }\n      }\n\n      // Multi select\n      const onWindowKeyDown = (event: KeyboardEvent) => {\n        if (event.defaultPrevented) return;\n\n        if (event.key === \"Escape\") plannerViewModel.unselectAllCourses();\n      }\n\n      const onMouseUp = (event: MouseEvent) => {\n        if (isAnyContextOpen) return;\n\n        if (isDragging) return;\n\n        event.preventDefault();\n\n        if (isRegionSelecting) {\n          setIsRegionSelecting(false);\n          return;\n        }\n\n        if (event.button !== 0) return;\n        if (event.ctrlKey) return;\n\n        plannerViewModel.unselectAllCourses();\n      }\n\n      const onDragEnter = (event) => {\n        event.preventDefault();\n      }\n\n      const onDragExit = (event) => {\n        event.preventDefault();\n      }\n\n      const toggleSelection = (course: CourseModel) => {\n        const selectedCourses = plannerViewModel.selectedCourses;\n        const wasSelected: boolean = selectedCourses.includes(course);\n\n        const newCourses = (() => {\n          // Task not previously selected or part of the selected group, now the only selected item\n          if (!wasSelected || selectedCourses.length > 1) {\n            return [course];\n          }\n\n          // Task previously selected but not in a group, clear the selection\n          return [];\n        })();\n\n        plannerViewModel.selectedCourses = newCourses;\n      }\n\n      const toggleSelectionInGroup = (course: CourseModel) => {\n        const selectedCourses = plannerViewModel.selectedCourses;\n        const index: number = selectedCourses.indexOf(course);\n\n        // if not selected - add it to the selected items\n        if (index === -1) {\n          plannerViewModel.selectedCourses = [...selectedCourses, course];\n          return;\n        }\n\n        // it was previously selected and now needs to be removed from the group\n        const newCourses: CourseModel[] = [...selectedCourses];\n        newCourses.splice(index, 1);\n        plannerViewModel.selectedCourses = newCourses;\n      };\n\n      // Context Menu\n      const getContextMenuItems = (course?: CourseModel) => {\n        const areMultipleItems = plannerViewModel.selectedCourses.length > 1;\n        let menuItems: MenuItemProps[] = [\n          {\n            key: 'remove',\n            content: `Remove ${areMultipleItems ? \"all courses\" : \"course\"}`,\n            icon: 'delete calendar',\n            onClick: () => plannerViewModel.moveCourseToRemoved(draggableItemRef.current, course)\n          },\n          {\n            key: 'plan',\n            content: `Move ${areMultipleItems ? \"all courses\" : \"course\"} to planned`,\n            icon: 'bookmark',\n            onClick: () => plannerViewModel.moveCourseToPlanned(course)\n          },\n          {\n            key: 'complete',\n            content: `Move ${areMultipleItems ? \"all courses\" : \"course\"} to completed`,\n            icon: 'checked calendar',\n            onClick: () => plannerViewModel.moveCourseToCompleted(course)\n          },\n        ];\n        if (course) {\n          if (course.courseStatus === CourseStatus.UNPLANNED) {\n            menuItems.splice(0, 1);\n          } else if (course.courseStatus === CourseStatus.PLANNED) {\n            menuItems.splice(1, 1);\n          } else if (course.courseStatus === CourseStatus.COMPLETED) {\n            menuItems.splice(2, 1);\n          }\n        }\n        return menuItems;\n      }\n\n      const [isAnyContextOpen, setIsAnyContextOpen] = React.useState(false);\n      const [isWindowContextOpen, setIsWindowContextOpen] = React.useState(false);\n\n      const currentOpenContextStateSetter = React.useRef<React.Dispatch<React.SetStateAction<boolean>>>();\n\n      const contextRef = React.useRef<any>();\n\n      const onWindowContextMenu = (event) => {\n        if (event.defaultPrevented) return;\n\n        // Don't use context when no items selected. Possibly change this.\n        if (plannerViewModel.selectedCourses.length === 0) return;\n\n        event.preventDefault();\n\n        if (isAnyContextOpen && currentOpenContextStateSetter.current) {\n          currentOpenContextStateSetter.current(false);\n        }\n\n        currentOpenContextStateSetter.current = setIsWindowContextOpen;\n\n        contextRef.current = {\n          getBoundingClientRect: () => ({\n            left: event.clientX,\n            top: event.clientY,\n            right: event.clientX + 1,\n            bottom: event.clientY + 1,\n            height: 0,\n            width: 0,\n          }),\n        }\n        setIsAnyContextOpen(true)\n        setIsWindowContextOpen(true)\n      }\n\n      const multiSelectProps: IMultiSelectProps = {\n        selectedCourses: plannerViewModel.selectedCourses,\n        draggingCourseId: plannerViewModel.draggingCourseId,\n        toggleSelection: toggleSelection,\n        toggleSelectionInGroup: toggleSelectionInGroup,\n      };\n\n      const contextMenuProps: IContextMenuProps = {\n        getContextMenuItems: getContextMenuItems,\n        isAnyContextOpen: isAnyContextOpen,\n        setIsAnyContextOpen: setIsAnyContextOpen,\n        currentOpenContextStateSetter: currentOpenContextStateSetter,\n      }\n\n      const regionSelectProps: IRegionSelectProps = {\n        registerDraggable: registerDraggable,\n        isRegionSelecting: isRegionSelecting,\n      }\n\n      return (\n        <React.Fragment>\n          <DragSelection />\n          <Popup\n            basic\n            context={contextRef}\n            onClose={() => {\n              setIsAnyContextOpen(false)\n              setIsWindowContextOpen(false)\n            }}\n            open={isWindowContextOpen}\n          >\n            <Menu\n              items={getContextMenuItems()}\n              onItemClick={(e) => {\n                e.preventDefault();\n                setIsAnyContextOpen(false)\n                setIsWindowContextOpen(false)\n              }}\n              secondary\n              vertical\n            />\n          </Popup>\n          <DragDropContext\n            onBeforeCapture={onBeforeCapture}\n            onDragStart={onDragStart}\n            onDragEnd={onDragEnd}\n          >\n            {\n              <CourseGroupView\n                horizontal={true}\n                key={plannerState.completedGroup.id}\n                id={plannerState.completedGroup.id}\n                title={plannerState.completedGroup.title}\n                term={null}\n                courses={plannerState.completedGroup.courses}\n                currentDraggableProps={plannerViewModel.currentDraggableProps}\n                multiSelect={multiSelectProps}\n                contextMenu={contextMenuProps}\n                regionSelect={regionSelectProps}\n              />\n            }\n            <Container>\n              {\n                <CourseGroupView\n                  horizontal={false}\n                  key={plannerState.plannedGroup.id}\n                  id={plannerState.plannedGroup.id}\n                  title={plannerState.plannedGroup.title}\n                  term={null}\n                  courses={plannerState.plannedGroup.courses}\n                  currentDraggableProps={plannerViewModel.currentDraggableProps}\n                  multiSelect={multiSelectProps}\n                  contextMenu={contextMenuProps}\n                  regionSelect={regionSelectProps}\n                />\n              }\n              <YearPlanner>\n                {\n                  plannerState.yearGroups.map(yearGroup => {\n                    return <YearView\n                      id={yearGroup.id}\n                      title={yearGroup.title}\n                      year={yearGroup.year}\n                      courseGroups={yearGroup.courseGroups}\n                      currentDraggableProps={plannerViewModel.currentDraggableProps}\n                      multiSelect={multiSelectProps}\n                      contextMenu={contextMenuProps}\n                      regionSelect={regionSelectProps}\n                    />\n                  })\n                }\n              </YearPlanner>\n            </Container>\n            {\n              plannerViewModel.currentDraggableProps.isDragging\n                ?\n                <CourseGroupView\n                  horizontal={true}\n                  key={\"trash\"}\n                  id={\"trash\"}\n                  title={\"Remove\"}\n                  term={null}\n                  courses={[]}\n                  currentDraggableProps={plannerViewModel.currentDraggableProps}\n                  multiSelect={multiSelectProps}\n                  contextMenu={contextMenuProps}\n                  regionSelect={regionSelectProps}\n                />\n                : <></>\n            }\n          </DragDropContext>\n        </React.Fragment>\n      )\n    }}\n  </Observer >\n})\n\nexport default Planner;\n","import { action, computed, makeObservable, observable } from \"mobx\";\nimport { CourseModel, CourseStatus } from \"../../models/CourseModel\";\nimport { TermModel } from \"../../models/TermModel\";\nimport { CourseState } from \"../../states/CourseState\";\n\nexport interface ICourseGroup {\n  id: string,\n  title: string,\n  term: TermModel | null,\n  courses: CourseModel[],\n}\n\nexport interface IYearGroup {\n  id: string,\n  year: number\n  title: string,\n  courseGroups: ICourseGroup[],\n}\n\nexport interface IPlannerState {\n  id: string,\n  title: string,\n  allocatedGroups: ICourseGroup[],\n  yearGroups: IYearGroup[],\n  completedGroup: ICourseGroup,\n  plannedGroup: ICourseGroup,\n}\n\nexport interface ICurrentDraggableProps {\n  isDragging: boolean,\n  possibleTerms: TermModel[]\n  prerequisiteCourseIds: Set<string>\n}\n\nexport class PlannerViewModel {\n  constructor(courseState: CourseState) {\n    makeObservable<PlannerViewModel,\n      \"_currentDraggableProps\"\n    >(this, {\n      _currentDraggableProps: observable,\n      currentDraggableProps: computed,\n      clearCurrentDraggableProps: action,\n    })\n\n    this._courseState = courseState\n    this._plannerState = {\n      id: \"plannerState\",\n      title: \"Visualizer\",\n      allocatedGroups: [],\n      yearGroups: [],\n      completedGroup: {\n        id: \"completed\",\n        title: \"Completed\",\n        term: null,\n        courses: [],\n      },\n      plannedGroup: {\n        id: \"planned\",\n        title: \"Planned\",\n        term: null,\n        courses: [],\n      },\n    }\n\n    makeObservable<PlannerViewModel,\n      \"_selectedCourses\"\n    >(this, {\n      _selectedCourses: observable,\n      selectedCourses: computed,\n    });\n\n    makeObservable<PlannerViewModel,\n      \"_draggingCourseId\"\n    >(this, {\n      _draggingCourseId: observable,\n      draggingCourseId: computed,\n    });\n  }\n\n  private _courseState: CourseState\n  get courseState(): CourseState {\n    return this._courseState\n  }\n\n  private _plannerState: IPlannerState\n  get plannerState(): IPlannerState {\n    this.synchronizePlannerState()\n    return this._plannerState\n  }\n\n  //#region selectedCourses\n\n  private _selectedCourses: CourseModel[] = [];\n\n  get selectedCourses(): CourseModel[] {\n    return this._selectedCourses;\n  }\n\n  set selectedCourses(state: CourseModel[]) {\n    this._selectedCourses = state;\n  }\n\n  unselectAllCourses() {\n    this.selectedCourses = [];\n  }\n\n  //#endregion\n\n  setCourseByDroppableId(course: CourseModel, sourceDroppableId: string, destDroppableId: string, draggableItemMap: Map<CourseModel, HTMLDivElement>) {\n    if (sourceDroppableId === destDroppableId) return;\n\n    if (destDroppableId === \"trash\") {\n      course.setUnplanned()\n      draggableItemMap.delete(course);\n    } else if (destDroppableId === \"completed\") {\n      course.setCompleted()\n    } else if (destDroppableId === \"planned\") {\n      course.setPlanned()\n    } else {\n      course.setAllocated(TermModel.fromMappingName(destDroppableId))\n    }\n  }\n\n  moveSelectedToRemoved(draggableItemMap: Map<CourseModel, HTMLDivElement>) {\n    this._selectedCourses.filter((courseModel: CourseModel) => {\n      return courseModel.courseStatus !== CourseStatus.UNPLANNED;\n    }).forEach((courseModel: CourseModel) => {\n      courseModel.setUnplanned();\n      draggableItemMap.delete(courseModel);\n    });\n    this.unselectAllCourses();\n  }\n\n  moveCourseToRemoved(draggableItemMap: Map<CourseModel, HTMLDivElement>, course?: CourseModel) {\n    if (!course) {\n      this.moveSelectedToRemoved(draggableItemMap);\n      return;\n    }\n\n    if (course.courseStatus !== CourseStatus.UNPLANNED) {\n      course.setUnplanned();\n      draggableItemMap.delete(course);\n    }\n\n    if (this.selectedCourses.includes(course)) {\n      this.moveSelectedToRemoved(draggableItemMap);\n    }\n\n    this.synchronizePlannerState();\n  }\n\n  moveSelectedToPlanned() {\n    this.selectedCourses.filter((courseModel: CourseModel) =>\n      courseModel.courseStatus !== CourseStatus.PLANNED\n    ).forEach(courseModel => courseModel.setPlanned());\n  }\n\n  moveCourseToPlanned(course?: CourseModel) {\n    if (!course) {\n      this.moveSelectedToPlanned();\n      return;\n    }\n\n    if (course.courseStatus !== CourseStatus.PLANNED) {\n      course.setPlanned();\n    }\n\n    if (this.selectedCourses.includes(course)) {\n      this.moveSelectedToPlanned();\n    }\n\n    this.synchronizePlannerState();\n  }\n\n  moveSelectedToCompleted() {\n    this.selectedCourses.filter((courseModel: CourseModel) =>\n      courseModel.courseStatus !== CourseStatus.COMPLETED\n    ).forEach(courseModel => courseModel.setCompleted());\n  }\n\n  moveCourseToCompleted(course?: CourseModel) {\n    if (!course) {\n      this.moveSelectedToCompleted();\n      return;\n    }\n\n    if (course.courseStatus !== CourseStatus.COMPLETED) {\n      course.setCompleted();\n    }\n\n    if (this.selectedCourses.includes(course)) {\n      this.moveSelectedToCompleted();\n    }\n\n    this.synchronizePlannerState();\n  }\n\n  //#region draggingCourseId\n\n  private _draggingCourseId: undefined | string = undefined;\n  get draggingCourseId(): undefined | string {\n    return this._draggingCourseId;\n  }\n  set draggingCourseId(id: undefined | string) {\n    this._draggingCourseId = id;\n  }\n\n  //#endregion\n\n  private synchronizeCourseList(referenceCourses: CourseModel[], targetCourses: CourseModel[]): void {\n    let expectedCourses = new Set(referenceCourses)\n    let actualCourses = new Set(targetCourses)\n\n    let coursesToRemove = new Set([...actualCourses].filter(course => !expectedCourses.has(course)))\n    let coursesToAdd = new Set([...expectedCourses].filter(course => !actualCourses.has(course)))\n\n    coursesToRemove.forEach(course => {\n      let index = targetCourses.indexOf(course)\n      targetCourses.splice(index, 1)\n    })\n\n    coursesToAdd.forEach(course => {\n      targetCourses.push(course)\n    })\n  }\n\n  calculateDisplayableTerms(): TermModel[] {\n    let maxAllocatedYear = this._courseState.getMaxAllocatedYear\n    const currentYear = new Date().getFullYear()\n    let displayableTerms: TermModel[] = []\n    for (let year: number = currentYear; year <= maxAllocatedYear + 1; ++year) {\n      displayableTerms.push(new TermModel(year, \"Summer Term\"))\n      displayableTerms.push(new TermModel(year, \"Term 1\"))\n      displayableTerms.push(new TermModel(year, \"Term 2\"))\n      displayableTerms.push(new TermModel(year, \"Term 3\"))\n    }\n    return displayableTerms\n  }\n\n  synchronizePlannerState(): void {\n    const displayableTerms = this.calculateDisplayableTerms()\n    const uniqueYears = [...new Set(displayableTerms.map(term => term.year))].sort()\n    const allocatedGroups: ICourseGroup[] = displayableTerms.map((term: TermModel) => {\n      return {\n        id: term.getMappingName,\n        title: term.getFullName,\n        term: term,\n        courses: this._plannerState.allocatedGroups.find(group => group.id === term.getMappingName)?.courses ?? [],\n      }\n    })\n    let newPlannerState: IPlannerState = {\n      ...this._plannerState,\n      allocatedGroups: allocatedGroups,\n      yearGroups: uniqueYears.map((year: number) => {\n        return {\n          id: `yearGroup_${year.toString()}`,\n          title: year.toString(),\n          year: year,\n          courseGroups: allocatedGroups.filter(group => group.term?.year === year) ?? [],\n        }\n      }),\n    }\n\n    newPlannerState.allocatedGroups.forEach((courseGroup: ICourseGroup) => {\n      this.synchronizeCourseList(this._courseState.termCourseMap.get(courseGroup.id) ?? [], courseGroup.courses)\n    })\n\n    newPlannerState.yearGroups.forEach(yearGroup => {\n      yearGroup.courseGroups.forEach((courseGroup: ICourseGroup) => {\n        this.synchronizeCourseList(this._courseState.termCourseMap.get(courseGroup.id) ?? [], courseGroup.courses)\n      })\n    })\n\n    this.synchronizeCourseList(this._courseState.plannedCourses, newPlannerState.plannedGroup.courses)\n    this.synchronizeCourseList(this._courseState.completedCourses, newPlannerState.completedGroup.courses)\n    this._plannerState = newPlannerState\n  }\n\n  private getCourseGroupById(groupId: string): ICourseGroup | undefined {\n    if (this._plannerState.completedGroup.id === groupId) {\n      return this._plannerState.completedGroup\n    } else if (this._plannerState.plannedGroup.id === groupId) {\n      return this._plannerState.plannedGroup\n    } else {\n      return this._plannerState.allocatedGroups.find(group => group.id === groupId)\n    }\n  }\n\n  getAllGroups(): ICourseGroup[] {\n    return [this._plannerState.completedGroup, this._plannerState.plannedGroup, ...this._plannerState.allocatedGroups];\n  }\n\n  spliceByGroupId(droppableId: string, start: number, deleteCount?: number): CourseModel[];\n\n  spliceByGroupId(droppableId: string, start: number, deleteCount: number, ...items: CourseModel[]): CourseModel[];\n\n  spliceByGroupId(droppableId: string, start: number, deleteCount?: number, ...items: CourseModel[]): CourseModel[] {\n    const group = this.getCourseGroupById(droppableId);\n    if (!group) return [];\n\n    if (deleteCount) {\n      return group.courses.splice(start, deleteCount, ...items)\n    } else {\n      return group.courses.splice(start, 0, ...items);\n    }\n  }\n\n  //#region currentDraggableProps\n\n  private _currentDraggableProps: ICurrentDraggableProps = {\n    isDragging: false,\n    possibleTerms: [],\n    prerequisiteCourseIds: new Set<string>(),\n  }\n\n  get currentDraggableProps(): ICurrentDraggableProps {\n    return { ...this._currentDraggableProps }\n  }\n\n  set currentDraggableProps(props: ICurrentDraggableProps) {\n    this._currentDraggableProps = props;\n  }\n\n  clearCurrentDraggableProps(): void {\n    this.currentDraggableProps = {\n      isDragging: false,\n      possibleTerms: [],\n      prerequisiteCourseIds: new Set<string>(),\n    }\n  }\n\n  //#endregion\n\n}\n","import { ConditionalTree, isAndConditionalTree, isOrConditionalTree } from \"../interfaces/ModelInterfaces\";\n\n\nexport const conditionalTreeTraverser = (\n  treeNode: ConditionalTree,\n  fnIsLeafValid: (treeNode: ConditionalTree) => boolean,\n): string[] => {\n  let invalidations: string[] = [];\n\n  if (isOrConditionalTree(treeNode)) {\n    for (let childNode of treeNode.or) {\n      let result = conditionalTreeTraverser(childNode, fnIsLeafValid)\n      if (result.length === 0) {\n        invalidations = []\n        break\n      }\n      invalidations.push(...result)\n    }\n  } else if (isAndConditionalTree(treeNode)) {\n    treeNode.and.forEach(childNode => {\n      invalidations.push(...conditionalTreeTraverser(childNode, fnIsLeafValid))\n    })\n  } else if (!fnIsLeafValid(treeNode)) {\n    invalidations.push(treeNode)\n  }\n  // console.log(treeNode)\n  // console.log(invalidations)\n  return invalidations\n}\n","import { action, makeAutoObservable, reaction, transaction, when } from \"mobx\";\nimport { conditionalTreeTraverser } from '../helpers/ConditionalTreeTraverser';\nimport { ConditionalTree, StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { CourseModel, CourseStatus } from \"../models/CourseModel\";\nimport { SerializedCourseState, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\nimport { TermModel } from \"../models/TermModel\";\nimport { getCourseValidations } from \"../models/Validations/Validations\";\nimport { UserState } from \"./UserState\";\nimport axios from \"axios\"\n\nexport class CourseState implements ISerializableEntity {\n  constructor(\n    private _userState: UserState\n  ) {\n    makeAutoObservable(this)\n    reaction(\n      () => this._userState.studyLevel,\n      () => {\n        this._isUpdated = false;\n        this._updateStudyLevel()\n          // .then(() => {\n          //   // this.getCourseById(\"COMP1511\")?.setCompleted()\n    \n          //   this.getCourseById(\"COMP1521\")?.setPlanned()\n    \n          //   this.getCourseById(\"COMP3231\")?.setPlanned()\n          //   let COMP9444 = this.getCourseById(\"COMP9444\")\n          //   if (COMP9444) {\n          //     this.assignCourseToTerm(COMP9444, new TermModel(2021, \"Term 3\"))\n          //   }\n          //   let MATH1081 = this.getCourseById(\"MATH1081\")\n          //   if (MATH1081) {\n          //     this.assignCourseToTerm(MATH1081, new TermModel(2021, \"Term 2\"))\n          //   }\n          //   let COMP2041 = this.getCourseById(\"COMP2041\")\n          //   if (COMP2041) {\n          //     this.assignCourseToTerm(COMP2041, new TermModel(2021, \"Term 2\"))\n          //   }\n          //   let COMP9417 = this.getCourseById(\"COMP9417\")\n          //   if (COMP9417) {\n          //     this.assignCourseToTerm(COMP9417, new TermModel(2022, \"Term 3\"))\n          //   }\n          //   let MATH1231 = this.getCourseById(\"MATH1231\")\n          //   if (MATH1231) {\n          //     this.assignCourseToTerm(MATH1231, new TermModel(2021, \"Term 3\"))\n          //   }\n          // })\n      },\n      { fireImmediately: true }\n    );\n    _userState.registerStudyLevelUpdateActionCallback(() => Promise.resolve(this._updateStudyLevel()));\n  }\n\n  private validations = getCourseValidations(this)\n\n  private coursesMapById = new Map<string, CourseModel>();\n\n  private coursesMapByActiveStatus = new Map<CourseStatus, Map<string, CourseModel>>();\n\n  private _isUpdated: boolean = false;\n\n  get isUpdated(): boolean {\n    return this._isUpdated;\n  }\n\n  get allCourses() {\n    return [...this.coursesMapById.values()]\n  }\n\n  private _resetCourseMap() {\n    this.coursesMapById = new Map<string, CourseModel>();\n    this.coursesMapByActiveStatus = new Map<CourseStatus, Map<string, CourseModel>>();\n    this.coursesMapByActiveStatus.set(CourseStatus.UNPLANNED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.PLANNED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.ALLOCATED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.COMPLETED, new Map<string, CourseModel>());\n  }\n\n  private async _loadAllCourses(studyLevel: StudyLevel) {\n    return axios.get(`https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_courses.json`)\n      .then(response => {\n        transaction(() => {\n          this._resetCourseMap()\n          response.data.forEach(courseObj => {\n            let course = new CourseModel(\n              courseObj.code,\n              courseObj.contentTypeLabel,\n              courseObj.corequisites,\n              courseObj.creditPoints,\n              courseObj.description,\n              courseObj.effectiveDate,\n              courseObj.enrolmentRules,\n              courseObj.exclusion,\n              courseObj.facultyName,\n              courseObj.implementationYear,\n              courseObj.keywords,\n              courseObj.prerequisites,\n              courseObj.schoolName,\n              courseObj.studyLevel,\n              courseObj.termOffering,\n              courseObj.title,\n              courseObj.urlMap,\n            )\n\n            this.addCourse(course)\n          })\n        })\n    });\n  }\n\n  private async _updateStudyLevel() {\n    await this._loadAllCourses(this._userState.studyLevel);\n    this._isUpdated = true;\n  }\n\n  get termCourseMap(): Map<string, CourseModel[]> {\n    // console.log('running mapping')\n    let mapping = new Map<string, CourseModel[]>();\n    this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.forEach(course => {\n      if (!course.allocatedTerm) {\n        return;\n      }\n      let courseList = mapping.get(course.allocatedTerm.getMappingName)\n      if (!courseList) {\n        mapping.set(course.allocatedTerm.getMappingName, [course])\n      } else {\n        courseList.push(course)\n      }\n    })\n    return mapping\n  }\n\n  get completedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.COMPLETED)?.values() ?? []]\n  }\n\n  get plannedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.PLANNED)?.values() ?? []]\n  }\n\n  get allocatedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.values() ?? []]\n  }\n\n  get activeCourses(): CourseModel[] {\n    let allCourses: CourseModel[] = [];\n    allCourses = allCourses.concat(this.completedCourses, this.plannedCourses, this.allocatedCourses);\n    return allCourses;\n  }\n\n  get getMaxAllocatedYear(): number {\n    const uniqueTerms = [...this.termCourseMap.keys()]\n    let maxYear = new Date().getFullYear()\n    if (uniqueTerms.length > 0) {\n      maxYear = TermModel.fromMappingName(uniqueTerms.sort().slice(-1)[0]).year\n    }\n    return maxYear\n  }\n\n  getCourseById(id: string): CourseModel | undefined {\n    return this.coursesMapById.get(id)\n  }\n\n  addCourse(course: CourseModel) {\n    this.coursesMapById.set(course.id, course);\n    reaction(() => course.courseStatus, () => {\n      for (let courseStatusEnum in CourseStatus) {\n        if (!isNaN(Number(courseStatusEnum))) continue\n        const courseStatus: CourseStatus = CourseStatus[courseStatusEnum as keyof typeof CourseStatus]\n        if (courseStatus !== course.courseStatus) {\n          this.coursesMapByActiveStatus.get(courseStatus)?.delete(course.id)\n        } else {\n          this.coursesMapByActiveStatus.get(courseStatus)?.set(course.id, course)\n        }\n      }\n    }, {\n      fireImmediately: true,\n    })\n\n    reaction(() => course.courseStatus, () => {\n      this.runValidations();\n    }, {\n      fireImmediately: true,\n    })\n\n    reaction(() => course.allocatedTerm, () => {\n      this.runValidations();\n    }, {\n      fireImmediately: true,\n    })\n  }\n\n  runValidations() {\n    transaction(() => {\n      this.coursesMapByActiveStatus.get(CourseStatus.PLANNED)?.forEach(_course => {\n        _course.clearErrors()\n        this.validations.forEach(fnValidate => {\n          fnValidate(_course)\n        })\n      })\n      this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.forEach(_course => {\n        _course.clearErrors()\n        this.validations.forEach(fnValidate => {\n          fnValidate(_course)\n        })\n      })\n      this.coursesMapByActiveStatus.get(CourseStatus.COMPLETED)?.forEach(_course => {\n        _course.clearErrors()\n      })\n    })\n  }\n\n  private resetHard() {\n    [...this.coursesMapById.values()].forEach((course) => {\n      course.setUnplanned();\n    });\n  }\n\n  getFlattenedPrerequisiteList(prerequisiteTree: ConditionalTree) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      return false\n    })\n  }\n\n  getMissingPrerequisitesBeforeTerm(prerequisiteTree: ConditionalTree, term: TermModel) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      if (typeof (treeNode) === 'string') {\n        const courseCode: string = treeNode;\n        const course = this.getCourseById(courseCode)\n\n        return course\n          ? ((course.courseStatus === CourseStatus.ALLOCATED && course.allocatedTerm?.isBefore(term))\n            || course.courseStatus === CourseStatus.COMPLETED)\n          : false\n      }\n      return true\n    })\n  }\n\n  getMissingPrerequisitesPlanned(prerequisiteTree: ConditionalTree) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      if (typeof (treeNode) === 'string') {\n        const courseCode: string = treeNode;\n        const course = this.getCourseById(courseCode)\n        return course\n          ? course.courseStatus !== CourseStatus.UNPLANNED\n          : false\n      }\n      return true\n    })\n  }\n\n  courseIsOffered(term: TermModel, termOffering: string[]): boolean {\n    for (let i = 0; i < termOffering.length; i++) {\n      if (term.getTermName === termOffering[i]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getMissingRequirementsWhenAssigningCourseToTerm(course: CourseModel, term: TermModel): string[] {\n    let resp: string[] = this.getMissingPrerequisitesBeforeTerm(course.prerequisites, term)\n\n    // term = current term input, termOffering = List of avaliable terms\n    if (!this.courseIsOffered(term, course.termOffering)) {\n      resp.push(`Course is not offered in ${term.getFullName}`)\n    }\n\n    return resp\n  }\n\n  assignCourseToTerm(course: CourseModel, term: TermModel): boolean {\n    const invalidations = this.getMissingRequirementsWhenAssigningCourseToTerm(course, term)\n    if (invalidations.length === 0) {\n      course.setAllocated(term)\n      return true\n    }\n\n    return false\n  }\n\n  serialize(): SerializedCourseState {\n    return {\n      courses: this.activeCourses.map((courseModel) => {\n        return courseModel.serialize();\n      })\n    }\n  }\n\n  async deserialize(json: TermtanglesSerialized): Promise<void> {\n    if (!json.courseState) {\n      return;\n    }\n\n    const serializedCourseState = json.courseState;\n    if (!serializedCourseState.courses) {\n      return;\n    }\n\n    await when(() => { return this._isUpdated; })\n\n    this.resetHard();\n\n    serializedCourseState.courses.forEach((serializedCourse) => {\n      if (!serializedCourse.id) return;\n\n      const courseModel = this.getCourseById(serializedCourse.id);\n      if (courseModel) {\n        courseModel.deserialize(serializedCourse);\n      } else {\n        console.error(`ERROR: ${serializedCourse.id} is not a valid course.`);\n      }\n    });\n  }\n}\n","import { ErrorCode } from \"../../interfaces/ModelInterfaces\"\nimport { CourseState } from \"../../states/CourseState\"\nimport { CourseModel, CourseStatus } from \"../CourseModel\"\n\nexport const getCourseValidations = (courseState: CourseState): ((course: CourseModel) => void)[] => {\n  const validations = [\n    (course: CourseModel) => {\n      // console.log(`Running validation COURSE_NOT_OFFERED_IN_SELECTED_TERM on course ${course.code}`)\n      if (course.allocatedTerm && !course.termOffering.includes(course.allocatedTerm.getTermName)) {\n        course.addError({\n          code: ErrorCode.COURSE_NOT_OFFERED_IN_SELECTED_TERM,\n          message: `This course is not offered in ${course.allocatedTerm.getTermName}`,\n          missing: \"\"\n        })\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation PREREQUISITE_REQUIREMENT_NOT_MET on course ${course.code}`)\n      if (course.allocatedTerm) {\n        let missing = courseState.getMissingPrerequisitesBeforeTerm(course.prerequisites, course.allocatedTerm)\n        if (missing.length > 0) {\n          course.addError({\n            code: ErrorCode.PREREQUISITE_REQUIREMENT_NOT_MET,\n            message: `The prerequisites for this course are not satisfied\\n${course.enrolmentRules.join(\";\")}`,\n            missing: `Missing: ${missing}`\n          })\n        }\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation PREREQUISITES_NOT_PLANNED on course ${course.code}`)\n      if (course.courseStatus !== CourseStatus.ALLOCATED) {\n        let missing = courseState.getMissingPrerequisitesPlanned(course.prerequisites)\n        if (missing.length > 0) {\n          course.addError({\n            code: ErrorCode.PREREQUISITES_NOT_PLANNED,\n            message: `A valid combination of prerequisites for this course have not been planned\\n${course.enrolmentRules.join(\";\")}`,\n            missing: `Missing: ${missing}`\n          })\n        }\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation EXCLUSION_COURSE_CONFLICT on course ${course.code}`)\n      let conflictingExclusionCourses: string[] = []\n      course.exclusion.forEach((exclusionCourseCode) => {\n        let exclusionCourse = courseState.getCourseById(exclusionCourseCode)\n        if (exclusionCourse && exclusionCourse.courseStatus !== CourseStatus.UNPLANNED) {\n          conflictingExclusionCourses.push(exclusionCourseCode)\n        }\n      })\n      if (conflictingExclusionCourses.length > 0) {\n        course.addError({\n          code: ErrorCode.EXCLUSION_COURSE_CONFLICT,\n          message: `The following exclusion courses conflict with this course ${conflictingExclusionCourses.join(\", \")}`,\n          missing: \"\"\n        })\n      }\n    }\n  ]\n  return validations\n}\n","import { ICurriculumContainer, ICurriculumElement } from \"../interfaces/ModelInterfaces\";\nimport {v4 as uuidv4} from 'uuid';\n\nexport class CurriculumContainer implements ICurriculumContainer {\n    public readonly id: string = uuidv4();\n    constructor(\n        public readonly title: string,\n        public readonly description: string,\n        public readonly creditPoints: number,\n        public readonly elements: ICurriculumElement[],\n        public readonly containers: ICurriculumContainer[],\n        public readonly order: number,\n    ) {\n    }\n\n    toString() {\n        return this.title + ', ' + this.description;\n    }\n}\n\nexport class CurriculumElement implements ICurriculumElement {\n    constructor(\n        public readonly name: string,\n        public readonly description: string,\n        public readonly type: string,\n        public readonly creditPoints: number,\n        public readonly itemCode: string,\n        public readonly url: string,\n        public readonly order: number,\n    ) { }\n\n    public isCourse(): boolean {\n        return this.type.toLowerCase() === \"course\"\n    }\n\n    public isSpecialisation(): boolean {\n        return [\"major\", \"minor\", \"specialisation\", \"honours\"].includes(this.type.toLowerCase())\n    }\n\n    toString() {\n        return this.name + ', ' + this.type;\n    }\n}\n\n// Arg: Array of json data where each json contains data for Children Obj\nexport const parseCurriculumContainers = (childrenData: Array<any>): Array<CurriculumContainer> => {\n    let rootContainerList: CurriculumContainer[] = [];\n    \n    childrenData.forEach((data) => {\n        let childContainerList: CurriculumContainer[] = [];\n        let elementList: CurriculumElement[] = [];\n        // If nested children containers exist, recursively transform jsonData \n        // into Children obj\n        if (data.children.length > 0) {\n            childContainerList = parseCurriculumContainers(data.children);\n        }\n\n        if (data.relationships.length > 0) {\n            elementList = parseCurriculumElements(data.relationships);\n        }\n\n        let container = new CurriculumContainer(\n            data.title,\n            data.description,\n            Number(data.creditPoints),\n            elementList,\n            childContainerList,\n            Number(data.order)\n        );\n\n        rootContainerList.push(container);\n    })\n\n    return rootContainerList;\n}\n\n// Arg: Array of json data where each json contains data for Relationship obj\nexport const parseCurriculumElements = (relationData: Array<any>): Array<CurriculumElement> => {\n    let relationshipList: CurriculumElement[] = [];\n\n    relationData.forEach((data) => {\n        let relationshipObj = new CurriculumElement(\n            data.name,\n            data.description,\n            data.type,\n            Number(data.creditPoints),\n            data.itemCode,\n            data.url,\n            Number(data.order)\n        )\n\n        relationshipList.push(relationshipObj);\n    })\n\n    return relationshipList;\n}\n","import { makeAutoObservable } from 'mobx';\nimport { ICurriculumContainer, IProgram, IProgressionEntity, ProgressionStatus } from '../interfaces/ModelInterfaces';\nimport { SerializedProgram, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\n\nexport class ProgramModel implements IProgram, IProgressionEntity, ISerializableEntity {\n  public readonly id: string\n  public progressionStatus: ProgressionStatus = ProgressionStatus.UNPLANNED\n\n  constructor(\n    public readonly code: string,\n    public readonly title: string,\n    public readonly academicItemType: string,\n    public readonly additionalInfo: string,\n    public readonly creditPoints: number,\n    public readonly structureSummary: string,\n    public readonly curriculumStructure: Array<ICurriculumContainer>,\n    public readonly description: string,\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly intakePeriod: Array<string>,\n    public readonly programConstraints: Array<any>,\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code\n    makeAutoObservable(this)\n  }\n\n  setPlanned() {\n    this.progressionStatus = ProgressionStatus.PLANNED\n  }\n\n  setUnplanned() {\n    this.progressionStatus = ProgressionStatus.UNPLANNED\n  }\n\n  serialize(): SerializedProgram {\n    return {\n      id: this.code,\n    };\n  }\n\n  async deserialize(program: SerializedProgram): Promise<void> {\n    if (program.id !== this.id) {\n      console.error(`ERROR: This program is not ${program.id} (is: ${this.id})`);\n      return;\n    }\n    \n    this.setPlanned();\n  }\n\n  toString() {\n    return `[PROGRAM_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadProgramByCode(programCode: string) {\n//     return db.collection(\"programs\")\n//         .doc(programCode)!\n//         .withConverter(programConverter)\n//         .get().then((doc) => {\n//             if (doc.exists) {\n//                 var program = doc.data()!;\n\n//                 return program;\n//             } else {\n//                 console.log(\"No such document!\");\n//             }\n//         }).catch((error) => {\n//             console.log(\"Error getting document:\", error);\n//             throw new Error();\n//         });\n// }\n\n// let programConverter = {\n//     toFirestore: function (program) {\n//         return {\n//             name: program.code,\n//         };\n//     },\n//     fromFirestore: function (snapshot, options) {\n//         const data = snapshot.data(options);\n\n//         return new ProgramModel(\n//             data.academicItemType,\n//             data.additionalInformation,\n//             data.code,\n//             Number(data.creditPoints),\n//             parseCurriculumContainers(data.curriculumStructure),\n//             data.description,\n//             data.facultyName,\n//             Number(data.implementationYear),\n//             data.intakePeriod,\n//             data.programConstraints,\n//             data.schoolName,\n//             data.studyLevel,\n//             data.title,\n//             data.urlMap\n//         );\n//     }\n// };","import { makeAutoObservable } from 'mobx';\nimport { ICurriculumContainer, IProgressionEntity, ISpecialisation, ProgressionStatus } from '../interfaces/ModelInterfaces';\nimport { SerializedSpecialisation, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\n\nexport class SpecialisationModel implements ISpecialisation, IProgressionEntity, ISerializableEntity {\n  public readonly id: string\n  public progressionStatus: ProgressionStatus = ProgressionStatus.UNPLANNED\n\n  constructor(\n    public readonly code: string,\n    public readonly title: string,\n    public readonly academicItemType: string,\n    public readonly creditPoints: number,\n    public readonly structureSummary: string,\n    public readonly curriculumStructure: Array<ICurriculumContainer>,\n    public readonly description: string,\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly keywords: string[],\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code\n    makeAutoObservable(this)\n  }\n\n  setPlanned() {\n    this.progressionStatus = ProgressionStatus.PLANNED\n  }\n\n  setUnplanned() {\n    this.progressionStatus = ProgressionStatus.UNPLANNED\n  }\n\n  serialize(): SerializedSpecialisation {\n    return {\n      id: this.code,\n    };\n  }\n\n  async deserialize(specialisation: SerializedSpecialisation) {\n    if (specialisation.id !== this.id) {\n      console.error(`ERROR: This specialisation is not ${specialisation.id} (is: ${this.id})`);\n      return;\n    }\n\n    this.setPlanned();   \n  }\n\n  toString() {\n    return `[SPECIALISATION_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadSpecialisationByCode(specialisationCode: string) {\n//     return db.collection(\"specialisations\")\n//         .doc(specialisationCode)!\n//         .withConverter(specialisationConverter)\n//         .get().then((doc) => {\n//             if (doc.exists) {\n//                 var specialisation = doc.data()!;\n\n//                 return specialisation;\n//             } else {\n//                 console.log(\"No such document!\");\n//             }\n//         }).catch((error) => {\n//             console.log(\"Error getting document:\", error);\n//             throw new Error();\n//         });\n// }\n\n// let specialisationConverter = {\n//     toFirestore: function (specialisation) {\n//         return {\n//             name: specialisation.code,\n//         };\n//     },\n//     fromFirestore: function (snapshot, options) {\n//         const data = snapshot.data(options);\n\n//         return new SpecialisationModel(\n//             data.academicItemType,\n//             data.code,\n//             Number(data.creditPoints),\n//             parseCurriculumContainers(data.curriculumStructure),\n//             data.description,\n//             data.facultyName,\n//             Number(data.implementationYear),\n//             data.keywords,\n//             data.schoolName,\n//             data.studyLevel,\n//             data.title,\n//             data.urlMap,\n//         );\n//     }\n// };","import { action, makeAutoObservable, reaction, transaction, when } from \"mobx\";\nimport { IProgressionEntity, ProgressionStatus, StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { SerializedProgressionState, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\nimport { parseCurriculumContainers } from \"../models/CurriculumModel\";\nimport { ProgramModel } from \"../models/ProgramModel\";\nimport { SpecialisationModel } from \"../models/SpecialisationModel\";\nimport { UserState } from \"./UserState\";\nimport axios from \"axios\"\n\nexport class ProgressionState implements ISerializableEntity {\n  constructor(\n    userState: UserState\n  ) {\n    makeAutoObservable(this)\n    this._userState = userState\n    reaction(\n      () => this._userState.studyLevel,\n      () => {\n        this._isUpdated = false;\n        this._updateStudyLevel()\n      },\n      { fireImmediately: true }\n    )\n    userState.registerStudyLevelUpdateActionCallback(() => Promise.resolve(this._updateStudyLevel()));\n  }\n\n  private _userState: UserState\n  private _programMapById = new Map<string, ProgramModel>();\n  private _specialisationMapById = new Map<string, SpecialisationModel>();\n  private _isUpdated: boolean = false;\n\n  get isUpdated(): boolean {\n    return this._isUpdated;\n  }\n\n  private _updateStudyLevel = async () => {\n    await this.loadAllPrograms(this._userState.studyLevel);\n    await this.loadAllSpecialisations(this._userState.studyLevel);\n    this._isUpdated = true;\n  };\n\n  get allPrograms() {\n    return [...this._programMapById.values()]\n  }\n\n  get allSpecialisations() {\n    return [...this._specialisationMapById.values()]\n  }\n\n  getProgramById(id: string) {\n    return this._programMapById.get(id)\n  }\n\n  getSpecialisationById(id: string) {\n    return this._specialisationMapById.get(id)\n  }\n\n  get plannedPrograms(): ProgramModel[] {\n    return this.allPrograms.filter(program => program.progressionStatus === ProgressionStatus.PLANNED)\n  }\n\n  get plannedSpecialisations(): SpecialisationModel[] {\n    return this.allSpecialisations.filter(specialisation => specialisation.progressionStatus === ProgressionStatus.PLANNED)\n  }\n\n  get plannedProgressionEntities(): IProgressionEntity[] {\n    let result: IProgressionEntity[] = this.plannedPrograms\n    result = result.concat(this.plannedSpecialisations)\n    return result\n  }\n\n  private resetHard(): void {\n    this._programMapById.forEach((program) => {\n      program.setUnplanned();\n    });\n    this._specialisationMapById.forEach((specialisation) => {\n      specialisation.setUnplanned();\n    });\n  }\n\n  addProgram(program: ProgramModel) {\n    this._programMapById.set(program.id, program)\n  }\n  addSpecialisation(specialisation: SpecialisationModel) {\n    this._specialisationMapById.set(specialisation.id, specialisation)\n  }\n\n  serialize(): SerializedProgressionState {\n    return {\n      programs: this.plannedPrograms.map((programModel) => {\n        return programModel.serialize();\n      }),\n      specialisations: this.plannedSpecialisations.map((specialisationModel) => {\n        return specialisationModel.serialize();\n      }),\n    }\n  }\n\n  async deserialize(json: TermtanglesSerialized) {\n    if (!json.progressionState) {\n      return;\n    }\n\n    await when(() => { return this._isUpdated; });\n\n    this.resetHard();\n    const serializedProgressionState = json.progressionState;\n    if (serializedProgressionState.programs) {\n      serializedProgressionState.programs.forEach((serializedProgram) => {\n        if (!serializedProgram.id) return;\n\n        const programModel = this.getProgramById(serializedProgram.id);\n        if (programModel) {\n          programModel.deserialize(serializedProgram);\n        } else {\n          console.error(`ERROR: ${serializedProgram.id} is not a valid program.`);\n        }\n      });\n    }\n    if (serializedProgressionState.specialisations) {\n      serializedProgressionState.specialisations.forEach((serializedSpecialisation) => {\n        if (!serializedSpecialisation.id) return;\n\n        const specialisationModel = this.getSpecialisationById(serializedSpecialisation.id);\n        if (specialisationModel) {\n          specialisationModel.deserialize(serializedSpecialisation);\n        } else {\n          console.error(`ERROR: ${serializedSpecialisation.id} is not a valid specialisation.`);\n        }\n      });\n    }\n  }\n\n  private loadAllPrograms = action((studyLevel: StudyLevel) => {\n    return axios.get(`https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_programs.json`)\n    .then(response => {\n      transaction(() => {\n        this._programMapById.clear()\n        response.data.forEach(programObj => {\n          let program = new ProgramModel(\n            programObj.code,\n            programObj.title,\n            programObj.academicItemType,\n            programObj.additionalInfo,\n            programObj.creditPoints,\n            programObj.structureSummary,\n            parseCurriculumContainers(programObj.curriculumStructure),\n            programObj.description,\n            programObj.facultyName,\n            programObj.implementationYear,\n            programObj.intakePeriod,\n            programObj.programConstraints,\n            programObj.schoolName,\n            programObj.studyLevel,\n            programObj.urlMap\n          )\n\n          this.addProgram(program);\n        })\n      })\n    })\n  })\n\n  private loadAllSpecialisations = action((studyLevel: StudyLevel) => {\n    return axios.get(`https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_specialisations.json`)\n      .then(response => {\n        transaction(() => {\n          this._specialisationMapById.clear()\n          response.data.forEach(specialisationObj => {\n            let specialisation = new SpecialisationModel(\n              specialisationObj.code,\n              specialisationObj.title,\n              specialisationObj.academicItemType,\n              specialisationObj.creditPoints,\n              specialisationObj.structureSummary,\n              parseCurriculumContainers(specialisationObj.curriculumStructure),\n              specialisationObj.description,\n              specialisationObj.facultyName,\n              specialisationObj.implementationYear,\n              specialisationObj.keywords,\n              specialisationObj.schoolName,\n              specialisationObj.studyLevel,\n              specialisationObj.urlMap,\n            )\n\n            this.addSpecialisation(specialisation);\n          })\n        })\n    })\n  });\n}\n\n","import { CourseModel } from '../models/CourseModel';\r\nimport { ProgramModel } from '../models/ProgramModel';\r\nimport { SpecialisationModel } from '../models/SpecialisationModel';\r\nimport { CourseState } from './CourseState';\r\nimport { ProgressionState } from './ProgressionState';\r\n\r\n\r\nexport class SearchDataState {\r\n  constructor(\r\n    private _courseState: CourseState,\r\n    private _progressionState: ProgressionState,\r\n  ) {}\r\n\r\n  get courseSearchData(): CourseModel[] {\r\n    return this._courseState.allCourses.sort((a, b) => (a.code > b.code) ? 1 : -1)\r\n  }\r\n  get programSearchData(): ProgramModel[] {\r\n    return this._progressionState.allPrograms.sort((a, b) => (a.title > b.title) ? 1 : -1)\r\n  }\r\n  get specialisationSearchData(): SpecialisationModel[] {\r\n    return this._progressionState.allSpecialisations.sort((a, b) => (a.title > b.title) ? 1 : -1)\r\n  }\r\n}\r\n","import { makeAutoObservable, when } from \"mobx\";\nimport { StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { SerializedUserState, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\n\nconst stringToStudyLevelMap = ((str: string) => {\n  switch(str) {\n    case \"undergraduate\": return StudyLevel.UNDERGRADUATE;\n    case \"postgraduate\": return StudyLevel.POSTGRADUATE;\n    case \"research\": return StudyLevel.RESEARCH;\n    default: return undefined;\n  }\n});\n\nexport class UserState implements ISerializableEntity {\n  constructor() {\n    makeAutoObservable(this)\n  }\n\n  private _studyLevel: StudyLevel = StudyLevel.UNDERGRADUATE\n  private _isUpdated: boolean = true;\n  private _studyLevelUpdateActionCallbacks: (() => Promise<void>)[] = [];\n\n  get studyLevel() {\n    return this._studyLevel\n  }\n\n  async setStudyLevel (studyLevel: StudyLevel) {\n    if (this._studyLevel !== studyLevel) {\n      this._studyLevel = studyLevel;\n      const studyLevelPromises: Promise<void>[] = this._studyLevelUpdateActionCallbacks.map(callback => callback());\n      return Promise.all(studyLevelPromises);\n    }\n  }\n\n  set isUpdated(isUpdated: boolean) {\n    this._isUpdated = isUpdated;\n  }\n  \n  get isUpdated(): boolean {\n    return this._isUpdated;\n  }\n\n  registerStudyLevelUpdateActionCallback(updateAction: () => Promise<void>) {\n    this._studyLevelUpdateActionCallbacks.push(updateAction);\n  }\n\n  serialize(): SerializedUserState {\n    return {studyLevel: this._studyLevel};\n  }\n\n  async deserialize(json: TermtanglesSerialized): Promise<void> {\n    if (!json.userState) {\n      throw \"ERROR: User state not included.\";\n    }\n\n    const serializedUserState = json.userState;\n    if (!serializedUserState.studyLevel) {\n      throw `ERROR: User state must include a studyLevel parameter.`;\n    }\n\n    const level = stringToStudyLevelMap(serializedUserState.studyLevel);\n    if (!level) {\n      throw `ERROR: ${serializedUserState.studyLevel} is not a valid study level.`\n    }\n\n    await this.setStudyLevel(level);\n  }\n}\n","import { createContext } from 'react'\nimport { CourseState } from '../states/CourseState'\nimport { ProgressionState } from '../states/ProgressionState';\nimport { SearchDataState } from '../states/SearchDataState';\nimport { UserState } from '../states/UserState';\n\nconst userState = new UserState();\nconst courseState = new CourseState(userState);\nconst progressionState = new ProgressionState(userState);\nconst searchDataState = new SearchDataState(courseState, progressionState);\n\nexport const ApplicationContext = createContext({\n    userState,\n    courseState,\n    progressionState,\n    searchDataState,\n})\n","\nimport { Grid, Item, Pagination } from 'semantic-ui-react'\nimport styled from 'styled-components'\n\nexport const ResultItem = styled(Item)`\n  &&& {\n    border: 0px solid lightgrey;\n    padding: 6px;\n    display: flex;\n    align-items: flex-start;\n    justify-content: space-between;\n    margin:0px\n  }\n  &&&&{\n    padding:1em 0;\n  }\n`\n\nexport const ResultItemHeader = styled(Item.Header)`\n`\n\nexport const ResultItemContent = styled(Item.Content)`\n  &&&&& {\n    flex: 1;\n    padding:0;\n  }\n`\n\nexport const ResultItemExtra = styled(Item.Extra)`\n  &&&& {\n    margin: 0;\n    text-align: right;\n    flex: 1;\n  }\n`\n\nexport const ResultCollection = styled(Item.Group)`\n  && {\n    padding: 15px 0px 10px 0px;\n    margin: 0px;\n  }\n`\n\nexport const ResultsPagination = styled(Pagination)`\n  max-height: 40px;\n`\n\nexport const ResultsColumn = styled(Grid.Column)`\n`\n\n","import { Observer, observer } from \"mobx-react\"\nimport { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { CourseModel, CourseStatus } from \"../../../models/CourseModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra, ResultItemHeader } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  course: T\n}\n\nexport const CourseResultView = observer((props: IResultViewProps<CourseModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseOver={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <ResultItemHeader>{props.course.code}</ResultItemHeader>\n              <Item.Description>{props.course.title}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n              ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.course.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.course.courseStatus === CourseStatus.PLANNED\n                        ? <Icon color=\"red\" className=\"bookmark\" />\n                        : props.course.courseStatus === CourseStatus.ALLOCATED\n                          ? <Icon color=\"orange\" className=\"calendar alternate outline\" />\n                          : props.course.courseStatus === CourseStatus.COMPLETED\n                            ? <Icon color=\"green\" className=\"check\" />\n                            : \"\"\n                    }\n\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.course.courseStatus !== CourseStatus.PLANNED && props.course.courseStatus !== CourseStatus.ALLOCATED}\n                        icon={props.course.courseStatus === CourseStatus.ALLOCATED ? 'calendar alternate outline' : 'bookmark'}\n                        content={props.course.courseStatus === CourseStatus.ALLOCATED ? 'Scheduled' : 'Interested'}\n                        color={props.course.courseStatus === CourseStatus.ALLOCATED ? 'orange' : 'blue'}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.course.courseStatus === CourseStatus.PLANNED || props.course.courseStatus === CourseStatus.ALLOCATED) {\n                            props.course.setUnplanned()\n                          } else {\n                            props.course.setPlanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {props.course.courseStatus !== CourseStatus.COMPLETED}\n                        icon='check'\n                        content='Done'\n                        color=\"green\"\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.course.courseStatus === CourseStatus.COMPLETED) {\n                            props.course.setUnplanned()\n                          } else {\n                            props.course.setCompleted()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.course.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { ProgressionStatus } from \"../../../interfaces/ModelInterfaces\"\nimport { SpecialisationModel } from \"../../../models/SpecialisationModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  specialisation: T\n}\n\nexport const SpecialisationResultView = observer((props: IResultViewProps<SpecialisationModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener, noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseEnter={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <Item.Header>{props.specialisation.title}</Item.Header>\n              <Item.Description>{props.specialisation.academicItemType} - {props.specialisation.code}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n              ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.specialisation.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.specialisation.progressionStatus === ProgressionStatus.PLANNED\n                        ? <Icon color=\"green\" className=\"calendar alternate outline\" />\n                        : <></>\n                    }\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED}\n                        icon={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"plus circle\" : \"minus circle\"}\n                        content={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"Add\" : \"Remove\"}\n                        color={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"green\" : \"red\"}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED) {\n                            props.specialisation.setPlanned()\n                          } else {\n                            props.specialisation.setUnplanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.specialisation.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\";\nimport { ApplicationContext } from \"../../../contexts/ApplicationContext\";\nimport { CurriculumElement } from \"../../../models/CurriculumModel\";\nimport React, { useContext } from \"react\";\nimport { CourseResultView } from \"../../SearchPanel/Results/CourseResultView\";\nimport { SpecialisationResultView } from \"../../SearchPanel/Results/SpecialisationResultView\";\nimport { ResultCollection } from \"../../SearchPanel/SearchPanelStyles\";\n\nexport interface ICurriculumElementViewProps {\n  entityId: string,\n  curriculumElements: CurriculumElement[]\n}\n\nexport const CurriculumElementsView = observer((props: ICurriculumElementViewProps) => {\n  const applicationContext = useContext(ApplicationContext);\n  return <Observer>\n    {\n      () => {\n        return props.curriculumElements.length > 0\n          ? <ResultCollection divided>\n            {\n              props.curriculumElements\n                .sort((a, b) => Number(a.order) - Number(b.order))\n                .map(element => {\n                  if (element.isCourse()) {\n                    let course = applicationContext.courseState.getCourseById(element.itemCode)\n                    return course ? <CourseResultView course={course} /> : <></>\n                  } else if (element.isSpecialisation()) {\n                    let specialisation = applicationContext.progressionState.getSpecialisationById(element.itemCode)\n                    return specialisation ? <SpecialisationResultView specialisation={specialisation} /> : <></>\n                  }\n                  return <p>{element.description}</p>\n                })\n            }\n          </ResultCollection>\n          : <></>\n      }\n    }\n  </Observer>\n});\n","import parse from 'html-react-parser';\nimport { Observer, observer } from \"mobx-react\";\nimport React from \"react\";\nimport sanitizeHtml from 'sanitize-html';\nimport { Accordion, Icon, Label } from \"semantic-ui-react\";\nimport styled from 'styled-components';\nimport { CurriculumContainer } from \"../../../models/CurriculumModel\";\nimport { ProgressionPlannerViewModel } from \"../ProgressionPlannerViewModel\";\nimport { CurriculumElementsView } from \"./CurriculumElementsView\";\n\nexport interface ICurriculumContainerViewProps {\n  entityId: string\n  curriculumContainer: CurriculumContainer[]\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n}\n\nexport const CurriculumAccordionCreditPoints = styled(Label)`\n  &&& {\n    margin-left:auto\n    \n  }\n`\n\nexport const CurriculumAccordionTitle = styled(Accordion.Title)`\n  &&& {\n    display:flex;\n  }\n`\nexport const CurriculumDescriptionDiv = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nexport const CurriculumExpandCollapseLink = styled.a`\n  min-width: 80px;\n  text-align: right;\n`\n\nexport const CurriculumContent = styled.div`\n  margin-left:10px;\n`\n\nexport const CurriculumContainerView = observer((props: ICurriculumContainerViewProps) => {\n  const getCreditPointsView = (container: CurriculumContainer) => {\n    const uocOfChildren = props.progressionPlannerViewModel.calculateUocOfChildren(container)\n    if (container.creditPoints > 0) {\n      return <CurriculumAccordionCreditPoints\n        size=\"small\"\n        color={uocOfChildren === container.creditPoints\n          ? \"green\"\n          : uocOfChildren < container.creditPoints\n            ? \"orange\"\n            : \"yellow\"\n        }\n      >\n        {uocOfChildren} / {container.creditPoints} UOC\n      </CurriculumAccordionCreditPoints>\n    } else if (uocOfChildren > 0) {\n      return <CurriculumAccordionCreditPoints\n        size=\"small\"\n        color=\"green\"\n      >\n        {uocOfChildren} UOC\n      </CurriculumAccordionCreditPoints>\n    }\n  }\n\n  return <Observer>\n    {\n      () => {\n        return props.curriculumContainer.length > 0\n          ? <Accordion.Accordion\n            key={props.entityId}\n            exclusive={false}\n            panels={[...props.curriculumContainer]\n              .sort((a, b) => Number(a.order) - Number(b.order))\n              .map(container => {\n                return {\n                  key: container.id,\n                  title: <CurriculumAccordionTitle>\n                    <Icon className={\n                      props.progressionPlannerViewModel.isContainerActive(container.id)\n                      ? \"caret down\"\n                      : \"caret right\"\n                    }/>\n                    {container.title}\n                    {getCreditPointsView(container)}\n                  </CurriculumAccordionTitle>,\n                  content: {\n                    content: <div>\n                      <CurriculumContent>\n                      <CurriculumDescriptionDiv>\n                        <span>{parse(sanitizeHtml(container.description))}</span>\n                        {\n                          container.containers.length > 0\n                            ? <CurriculumExpandCollapseLink\n                              href=\"#\"\n                              onClick={() => props.progressionPlannerViewModel.toggleAllContainers(container)}\n                            >\n                              {\n                                props.progressionPlannerViewModel.isAnySubContainerActive(container)\n                                  ? \"Collapse All\"\n                                  : \"Expand All\"\n                              }\n                            </CurriculumExpandCollapseLink>\n                            : <></>\n                        }\n                      </CurriculumDescriptionDiv>\n                      <CurriculumElementsView entityId={props.entityId} curriculumElements={container.elements} />\n                      </CurriculumContent>\n                      <CurriculumContainerView\n                        entityId={props.entityId}\n                        curriculumContainer={container.containers}\n                        progressionPlannerViewModel={props.progressionPlannerViewModel}\n                      />\n                    </div>\n                  },\n                  active: props.progressionPlannerViewModel.isContainerActive(container.id),\n                  onTitleClick: () => { props.progressionPlannerViewModel.toggleContainer(container.id) }\n                }\n              })}\n          />\n          : <></>\n      }\n    }\n  </Observer>\n});\n","import { Observer, observer } from 'mobx-react';\nimport React from 'react';\nimport { Accordion } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport { IProgressionEntity } from '../../interfaces/ModelInterfaces';\nimport { CurriculumContainerView } from './CurriculumView/CurriculumContainerView';\nimport { ProgressionPlannerViewModel } from './ProgressionPlannerViewModel';\nimport parse from 'html-react-parser';\nimport sanitizeHtml from 'sanitize-html';\n\nexport interface IProgressionEntityViewProps {\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n  entity: IProgressionEntity\n}\n\nconst ProgressionEntityTitle = styled.a`\ncolor: black;\nbackground-color: transparent;\ntext-decoration: none;\n\n&:hover {\n  color: #db2828;\n  background-color: transparent;\n  text-decoration: line-through;\n}\n`\n\nconst ProgressionEntityView = observer((props: IProgressionEntityViewProps) => {\n  return <Observer>\n    {() => {\n      return <>\n        <h2>\n          <ProgressionEntityTitle\n            href=\"#\"\n            onClick={() => props.entity.setUnplanned()}\n          >{props.entity.title}</ProgressionEntityTitle>\n        </h2>\n        <span>{parse(sanitizeHtml(props.entity.structureSummary))}</span>\n        <Accordion fluid styled>\n          <CurriculumContainerView\n            entityId={props.entity.id}\n            curriculumContainer={props.entity.curriculumStructure}\n            progressionPlannerViewModel={props.progressionPlannerViewModel}\n          />\n        </Accordion>\n      </>\n    }}\n  </Observer>\n})\n\nexport default ProgressionEntityView;\n","import { Observer, observer } from 'mobx-react';\nimport React from 'react';\nimport { Container } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport ProgressionEntityView from './ProgressionEntityView';\nimport { ProgressionPlannerViewModel } from './ProgressionPlannerViewModel';\n\nexport const ProgressionContainer = styled(Container)`\n  margin:1em 0;\n`\n\nexport interface IProgressionPlannerProps {\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n}\n\nconst ProgresionPlanner = observer(({ progressionPlannerViewModel }: IProgressionPlannerProps) => {\n  return <Observer>\n    {() => {\n      return (\n        <React.Fragment>\n          <ProgressionContainer>\n            {\n              progressionPlannerViewModel\n                .progressionState\n                .plannedProgressionEntities\n                .map(entity => {\n                  return <ProgressionEntityView\n                    entity={entity}\n                    progressionPlannerViewModel={progressionPlannerViewModel}\n                  />\n                })\n            }\n          </ProgressionContainer>\n        </React.Fragment>\n      )\n    }}\n  </Observer>\n})\n\nexport default ProgresionPlanner;\n","import { makeObservable, observable } from \"mobx\";\nimport { ProgressionStatus } from \"../../interfaces/ModelInterfaces\";\nimport { CourseStatus } from \"../../models/CourseModel\";\nimport { CurriculumContainer } from \"../../models/CurriculumModel\";\nimport { ProgramModel } from \"../../models/ProgramModel\";\nimport { SpecialisationModel } from \"../../models/SpecialisationModel\";\nimport { CourseState } from \"../../states/CourseState\";\nimport { ProgressionState } from \"../../states/ProgressionState\";\n\nexport interface IProgressionPlannerState {\n  id: string,\n  title: string,\n  programs: ProgramModel[],\n  specialisations: SpecialisationModel[],\n}\n\nexport class ProgressionPlannerViewModel {\n  private _progressionState: ProgressionState\n  private _courseState: CourseState\n  private _progressionPlannerState: IProgressionPlannerState\n  private _displayableContainerPanels: Set<string> = new Set<string>()\n\n  constructor(\n    progressionState: ProgressionState,\n    courseState: CourseState,\n  ) {\n    makeObservable<ProgressionPlannerViewModel,\n      \"_displayableContainerPanels\"\n    >(this, {\n      _displayableContainerPanels: observable,\n    })\n\n    this._progressionState = progressionState\n    this._progressionPlannerState = {\n      id: \"progressionPlanner\",\n      title: \"Progression Planner\",\n      programs: [],\n      specialisations: [],\n    }\n    this._courseState = courseState\n  }\n\n  get progressionState() {\n    return this._progressionState;\n  }\n\n  get progressionPlannerState() {\n    return this._progressionPlannerState;\n  }\n\n  calculateUocOfChildren(curriculumContainer: CurriculumContainer): number {\n    return [...this.getUniqueUocOfCurriculumContainer(curriculumContainer).values()].reduce((a, b) => a + b, 0)\n  }\n\n  getUniqueUocOfCurriculumContainer(curriculumContainer: CurriculumContainer): Map<string, number> {\n    let allChildren = new Map<string, number>()\n    curriculumContainer.elements.forEach(element => {\n      if (element.isCourse()) {\n        let course = this._courseState.getCourseById(element.itemCode)\n        if (course && course.courseStatus !== CourseStatus.UNPLANNED) {\n          allChildren.set(element.itemCode, element.creditPoints)\n        }\n      } else if (element.isSpecialisation()) {\n        let specialisation = this.progressionState.getSpecialisationById(element.itemCode)\n        if (specialisation && specialisation.progressionStatus !== ProgressionStatus.UNPLANNED) {\n          allChildren.set(element.itemCode, element.creditPoints)\n        }\n      }\n    })\n    curriculumContainer.containers.forEach(container => {\n      let childResult = this.getUniqueUocOfCurriculumContainer(container)\n      childResult.forEach((value, key) => allChildren.set(key, value))\n    })\n    return allChildren\n  }\n\n  toggleContainer(containerId: string) {\n    if (this._displayableContainerPanels.has(containerId)) {\n      this._displayableContainerPanels.delete(containerId)\n    } else {\n      this._displayableContainerPanels.add(containerId)\n    }\n  }\n\n  isAnySubContainerActive(rootContainer: CurriculumContainer): boolean {\n    return rootContainer.containers.filter(container => {\n      return this._displayableContainerPanels.has(container.id)\n        || this.isAnySubContainerActive(container)\n    }).length > 0\n  }\n\n  toggleAllContainers(rootContainer: CurriculumContainer) {\n    if (this.isAnySubContainerActive(rootContainer)) {\n      rootContainer.containers.forEach(container => {\n        this.setAllContainersInactive(container)\n      })\n    } else {\n      rootContainer.containers.forEach(container => {\n        this.setAllContainersActive(container)\n      })\n    }\n  }\n\n  private setAllContainersActive(rootContainer: CurriculumContainer) {\n    rootContainer.containers.forEach(container => {\n      this.setAllContainersActive(container)\n    })\n    this._displayableContainerPanels.add(rootContainer.id)\n  }\n\n  private setAllContainersInactive(rootContainer: CurriculumContainer) {\n    rootContainer.containers.forEach(container => {\n      this.setAllContainersInactive(container)\n    })\n    this._displayableContainerPanels.delete(rootContainer.id)\n  }\n\n  isContainerActive(containerId: string): boolean {\n    return this._displayableContainerPanels.has(containerId)\n  }\n}\n","import { makeAutoObservable } from \"mobx\";\nexport type FilterValue = string\n\nexport interface IFilterElementState {\n  filterElementName: string\n  numMatchingRecords: number\n}\n\nexport class FilterModel<T> {\n  private _possibleValues: Set<FilterValue> = new Set();\n  private _selectedValues: Set<FilterValue> = new Set();\n  constructor(\n    public readonly name: string,\n    private readonly fnGetTargetValue: (searchResult: T) => FilterValue[],\n  ) {\n    makeAutoObservable(this)\n  }\n\n  private filterResultMapping = new Map<string, number>();\n  public initializeFilter = (allSearchData: T[]) =>{\n    this._possibleValues = new Set(allSearchData\n      .map(result => this.fnGetTargetValue(result))\n      .flat()\n      .filter(value => value !== \"\")\n    )\n  }\n\n  public applyFilter = (searchResults: T[]): T[] => {\n    let results = searchResults\n    if (this._selectedValues.size > 0) {\n      results = searchResults\n        .filter(result => [...this._selectedValues.values()]\n          .filter(filterValue => this.fnGetTargetValue(result).includes(filterValue))\n          .length > 0\n        )\n    }\n    return results\n  }\n\n  public getFilterState(searchResults: T[]): IFilterElementState[] {\n    const isNumerical = [...this._possibleValues.values()].filter(value => isNaN(Number(value))).length === 0\n    return [...this._possibleValues.values()]\n      .sort((a, b) => {\n        if (isNumerical) {\n          return Number(a) - Number(b)\n        } else {\n          return a > b ? 1 : -1\n        }\n      })\n      .map(possibleFilterValue => {\n        return {\n          filterElementName: possibleFilterValue.toString(),\n          numMatchingRecords: searchResults.filter(result => this.fnGetTargetValue(result).includes(possibleFilterValue)).length,\n        }\n      })\n  }\n\n  public isSelected(value: FilterValue) {\n    return this._selectedValues.has(value)\n  }\n\n  public toggleValue(value: FilterValue) {\n    if (!this._possibleValues.has(value)) {\n      console.log(`invalid value toggled: ${value}`)\n      return;\n    }\n    if (this._selectedValues.has(value)) {\n      this._selectedValues.delete(value)\n    } else {\n      this._selectedValues.add(value)\n    }\n  }\n\n  public resetValue(value: FilterValue) {\n    if (!this._possibleValues.has(value)) {\n      console.log(`invalid value toggled: ${value}`)\n      return;\n    }\n    if (this._selectedValues.has(value)) {\n      this._selectedValues.delete(value)\n    }\n  }\n\n}","import { CourseModel } from \"../CourseModel\"\nimport { ProgramModel } from \"../ProgramModel\"\nimport { SpecialisationModel } from \"../SpecialisationModel\"\nimport { FilterModel } from \"./FilterModel\"\n\nexport const getCourseFilters = (allSearchData: CourseModel[]) => {\n  const filters: FilterModel<CourseModel>[] = [\n    new FilterModel<CourseModel>(\"Offering Periods\", (course) => course.termOffering),\n    new FilterModel<CourseModel>(\"Faculty\", (course) => [course.facultyName]),\n    new FilterModel<CourseModel>(\"School\", (course) => [course.schoolName]),\n    new FilterModel<CourseModel>(\"Credit Points\", (course) => [course.creditPoints.toString()]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n\nexport const getProgramFilters = (allSearchData: ProgramModel[]) => {\n  const filters: FilterModel<ProgramModel>[] = [\n    new FilterModel<ProgramModel>(\"Intake Periods\", (program) => program.intakePeriod),\n    new FilterModel<ProgramModel>(\"Faculty\", (program) => [program.facultyName]),\n    new FilterModel<ProgramModel>(\"School\", (program) => [program.schoolName]),\n    new FilterModel<ProgramModel>(\"Credit Points\", (program) => [program.creditPoints.toString()]),\n    new FilterModel<ProgramModel>(\"Academic Item Type\", (program) => [program.academicItemType]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n\nexport const getSpecialisationFilters = (allSearchData: SpecialisationModel[]) => {\n  const filters: FilterModel<SpecialisationModel>[] = [\n    new FilterModel<SpecialisationModel>(\"Faculty\", (specialisation) => [specialisation.facultyName]),\n    new FilterModel<SpecialisationModel>(\"School\", (specialisation) => [specialisation.schoolName]),\n    new FilterModel<SpecialisationModel>(\"Credit Points\", (specialisation) => [specialisation.creditPoints.toString()]),\n    new FilterModel<SpecialisationModel>(\"Academic Item Type\", (specialisation) => [specialisation.academicItemType]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n","/* May remove */\n\nexport const ResetButtonStyle = {\n  backgroundColor: \"#dcdcdc\",\n  border: \"none\",\n  color: \"black\",\n  padding: \"15px 32px\",\n  textDecoration: \"none\",\n  display: \"inline-block\",\n  fontSize: \"16px\",\n  margin: \"4px 2px\",\n  cursor: \"pointer\",\n  width: \"100%\",\n  height: \"100%\"\n}","import { Observer, observer } from \"mobx-react\"\nimport { useState } from \"react\"\nimport { Accordion, Form, Menu } from \"semantic-ui-react\"\nimport { FilterModel } from \"../../../models/Filters/FilterModel\"\n\nexport interface IFilterSectionProps<T> {\n  searchResults: T[]\n  filter: FilterModel<T>\n}\n\nexport const FilterSection = observer(<T,>(props: IFilterSectionProps<T>) => {\n  const [expandedFilters, setExpandedFilters] = useState(new Set<string>())\n\n  return <Observer>\n    {\n      () => {\n        let filterState = props.filter.getFilterState(props.searchResults)\n        return (\n            <Menu.Item key={props.filter.name}>\n              <Accordion.Title\n                active={expandedFilters.has(props.filter.name)}\n                content={props.filter.name}\n                onClick={() => {\n                  let newExpandedFilters = new Set(expandedFilters)\n                  if (expandedFilters.has(props.filter.name)) {\n                    newExpandedFilters.delete(props.filter.name)\n                  } else {\n                    newExpandedFilters.add(props.filter.name)\n                  }\n                  setExpandedFilters(newExpandedFilters)\n                }}\n              />\n              <Accordion.Content\n                active={expandedFilters.has(props.filter.name)}\n                content={\n                  <Form>\n                    <Form.Group grouped>\n                      {\n                        filterState.map(filterElementState => {\n                          return <Form.Checkbox\n                            key={filterElementState.filterElementName}\n                            label={`${filterElementState.filterElementName}`}\n                            name={props.filter.name}\n                            type=\"checkbox\"\n                            value={filterElementState.filterElementName}\n                            checked={props.filter.isSelected(filterElementState.filterElementName)}\n                            onClick={() => {\n                              props.filter.toggleValue(filterElementState.filterElementName)\n                            }}\n                          />\n                        })\n                      }\n                    </Form.Group>\n                  </Form>\n                }\n              />\n            </Menu.Item>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from 'mobx-react'\nimport { Accordion, Menu } from 'semantic-ui-react'\nimport { ResetButtonStyle } from '../../../config/ResetButtonStyle'\nimport { FilterModel } from '../../../models/Filters/FilterModel'\nimport { FilterSection } from './FilterSection'\nimport './ResetButton.css'\nexport interface IFilterMenuProps<T> {\n  searchResults: T[]\n  filters: FilterModel<T>[]\n}\n\nexport const FilterMenuView = observer(<T,>(props: IFilterMenuProps<T>) => {\n  const handlereset = () => {\n    props.filters.forEach((filter) => {\n      filter.getFilterState(props.searchResults).forEach((element) => {\n        filter.resetValue(element.filterElementName)\n      })\n    })\n  }\n\n  return (\n    <Observer>\n      {\n        () => {\n          return <div >\n            <div className=\"resetbutton\">\n              <button style={ResetButtonStyle} onClick={() => handlereset()}>Reset Filter</button>\n            </div>\n            <Accordion fluid as={Menu} vertical>\n              {\n                props.filters.map(filter => {\n                  return <FilterSection\n                    searchResults={props.searchResults}\n                    filter={filter}\n                  />\n                })\n              }\n            </Accordion>\n\n          </div>\n        }\n\n      }\n    </Observer>\n  )\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React from \"react\"\nimport { Item } from \"semantic-ui-react\"\nimport styled from 'styled-components'\nimport { CourseModel } from \"../../../models/CourseModel\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\nimport { CourseResultView } from \"./CourseResultView\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nconst CourseCollection = styled(Item.Group)`\n  &&& {\n    padding: 15px 0px 10px 0px;\n  }\n`\n        \nexport const CourseResultCollectionView = observer((props: IResultCollectionViewProps<CourseModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(course => {\n                return (\n                  <CourseResultView course={course} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { CourseResultCollectionView } from \"../Results/CourseResultCollectionView\"\nimport { ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const CourseSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <Grid.Column key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.courseSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.courseFilters}\n                  />\n                </Grid.Column>\n                <ResultsColumn key=\"results\" width={12}>\n                  <CourseResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.courseSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.courseSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.courseSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { ProgressionStatus } from \"../../../interfaces/ModelInterfaces\"\nimport { ProgramModel } from \"../../../models/ProgramModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  program: T\n}\n\nexport const ProgramResultView = observer((props: IResultViewProps<ProgramModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseEnter={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <Item.Header>{props.program.title}</Item.Header>\n              <Item.Description>{props.program.academicItemType} - {props.program.code}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n                ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.program.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.program.progressionStatus === ProgressionStatus.PLANNED\n                        ? <Icon color=\"green\" className=\"calendar alternate outline\" />\n                        : <></>\n                    }\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.program.progressionStatus === ProgressionStatus.UNPLANNED}\n                        icon={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"plus circle\" : \"minus circle\"}\n                        content={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"Add\" : \"Remove\"}\n                        color={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"green\" : \"red\"}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.program.progressionStatus === ProgressionStatus.UNPLANNED) {\n                            props.program.setPlanned()\n                          } else {\n                            props.program.setUnplanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.program.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport { ProgramModel } from \"../../../models/ProgramModel\"\nimport { ProgramResultView } from \"./ProgramResultView\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nexport const ProgramResultCollectionView = observer((props: IResultCollectionViewProps<ProgramModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(program => {\n                return (\n                  <ProgramResultView program={program} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { ProgramResultCollectionView } from \"../Results/ProgramResultCollectionView\"\nimport { ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const ProgramSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <Grid.Column key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.programSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.programFilters}\n                  />\n                </Grid.Column>\n                <ResultsColumn key=\"results\" width={12}>\n                  <ProgramResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.programSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.programSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.programSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport { SpecialisationModel } from \"../../../models/SpecialisationModel\"\nimport { SpecialisationResultView } from \"./SpecialisationResultView\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nexport const SpecialisationResultCollectionView = observer((props: IResultCollectionViewProps<SpecialisationModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(specialisation => {\n                return (\n                  <SpecialisationResultView specialisation={specialisation} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { SpecialisationResultCollectionView } from \"../Results/SpecialisationResultCollectionView\"\nimport { ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const SpecialisationSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <Grid.Column key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.specialisationSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.specialisationFilters}\n                  />\n                </Grid.Column>\n                <ResultsColumn key=\"results\" width={12}>\n                  <SpecialisationResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.specialisationSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.specialisationSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.specialisationSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from 'mobx-react'\nimport React from 'react'\nimport { Container, Dropdown, Icon, Input, Menu } from 'semantic-ui-react'\nimport styled from 'styled-components'\nimport { SearchPanelItem, SearchPanelViewModel } from './SearchPanelViewModel'\nimport { CourseSearchTab } from './SearchTab/CourseSearchTab'\nimport { ProgramSearchTab } from './SearchTab/ProgramSearchTab'\nimport { SpecialisationSearchTab } from './SearchTab/SpecialisationSearchTab'\n\n\nconst ResultsSubtextContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n  padding: 6px;\n`\n\nconst FoundResults = styled.h4`\n  &&& {\n    margin: 1rem 0 0.5rem 0.5rem\n  }\n`\n\nconst SearchPanel = observer(({ searchPanelViewModel }: { [key: string]: SearchPanelViewModel }) => {\n  const getNumResults = () => {\n    let numResults = -1\n    switch (searchPanelViewModel.activeItem) {\n      case (SearchPanelItem.COURSES):\n        numResults = searchPanelViewModel.searchResults.courseSearchResults.length\n        break\n      case (SearchPanelItem.PROGRAMS):\n        numResults = searchPanelViewModel.searchResults.programSearchResults.length\n        break\n      case (SearchPanelItem.SPECIALISATIONS):\n        numResults = searchPanelViewModel.searchResults.specialisationSearchResults.length\n        break\n    }\n    return numResults\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <React.Fragment>\n            <Container>\n              <Input\n                placeholder=\"Click here to to get started!\"\n                fluid\n                loading={searchPanelViewModel.isLoading}\n                icon={\n                  <Icon\n                    link={searchPanelViewModel.isInputActive}\n                    className={searchPanelViewModel.isInputActive ? \"x\" : \"search\"}\n                    onClick={() => {\n                      searchPanelViewModel.setQueryText(\"\")\n                      searchPanelViewModel.setInputActive(false)\n                    }}\n                  />\n                }\n                onClick={() => {\n                  searchPanelViewModel.setInputActive(true)\n                }}\n                onChange={(e, data) => searchPanelViewModel.setQueryText(data.value)}\n                value={searchPanelViewModel.queryText}\n              />\n              {\n                searchPanelViewModel.shouldShowPanel\n                  ? <>\n                    <Menu pointing secondary>\n                      <Menu.Item\n                        name={\"courses\"}\n                        active={searchPanelViewModel.activeItem === SearchPanelItem.COURSES}\n                        onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.COURSES)}\n                      >\n                        {`Courses (${searchPanelViewModel.searchResults.courseSearchResults.length})`}\n                      </Menu.Item>\n                      <Menu.Item\n                        name={\"programs\"}\n                        active={searchPanelViewModel.activeItem === SearchPanelItem.PROGRAMS}\n                        onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.PROGRAMS)}\n                      >\n                        {`Programs (${searchPanelViewModel.searchResults.programSearchResults.length})`}\n                      </Menu.Item>\n                      <Menu.Item\n                        name={\"specialisations\"}\n                        active={searchPanelViewModel.activeItem === SearchPanelItem.SPECIALISATIONS}\n                        onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.SPECIALISATIONS)}\n                      >\n                        {`Specialisations (${searchPanelViewModel.searchResults.specialisationSearchResults.length})`}\n                      </Menu.Item>\n                    </Menu>\n                    <ResultsSubtextContainer>\n                      <FoundResults>\n                        Found {getNumResults()} result{getNumResults() === 1 ? \"\" : \"s\"}\n                      </FoundResults>\n\n                      <span>\n                        <span style={{ marginRight: \"10px\"}}>Results per page</span>\n                        <Dropdown\n                          text={searchPanelViewModel.resultsPerPage.toString()}\n                          selection\n                          options={[\n                            { text: 10, value: 10 },\n                            { text: 20, value: 20 },\n                            { text: 30, value: 30 },\n                            { text: 50, value: 50 },\n                          ]}\n                          onChange={(e, data) => { searchPanelViewModel.setResultsPerPage(Number(data.value)) }}\n                        />\n                      </span>\n                    </ResultsSubtextContainer>\n                    {\n                      searchPanelViewModel.activeItem === SearchPanelItem.COURSES\n                        ? <CourseSearchTab searchPanelViewModel={searchPanelViewModel} />\n                        : <></>\n                    }\n                    {\n                      searchPanelViewModel.activeItem === SearchPanelItem.PROGRAMS\n                        ? <ProgramSearchTab searchPanelViewModel={searchPanelViewModel} />\n                        : <></>\n                    }\n                    {\n                      searchPanelViewModel.activeItem === SearchPanelItem.SPECIALISATIONS\n                        ? <SpecialisationSearchTab searchPanelViewModel={searchPanelViewModel} />\n                        : <></>\n                    }\n                  </>\n                  : <></>\n              }\n            </Container>\n          </React.Fragment>\n        )\n      }\n    }\n  </Observer>\n\n})\n\nexport default SearchPanel\n","import styled from \"styled-components\"\nimport { AutoPlannerViewModel } from \"./AutoPlannerModel\"\n\nconst AutoPlanButton = styled.button`\n  background-color: forestgreen;\n  border: none;\n  border-radius: 4px;\n  color: white;\n  padding: 15px 32px;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin: 4px 2px;\n  cursor: pointer;\n  width: 100%;\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */ \n`\nconst AutoPlanner = ({ autoPlannerViewModel }: { [key: string]: AutoPlannerViewModel }) => {\n  return (\n    <AutoPlanButton onClick={() => autoPlannerViewModel.autoPlan()}>\n      Auto Plan Degree\n    </AutoPlanButton>\n  )\n};\n\nexport default AutoPlanner;","import { CourseState } from \"../../states/CourseState\";\r\nimport { CourseModel } from \"../../models/CourseModel\";\r\nimport { TermModel } from \"../../models/TermModel\";\r\n\r\nexport class AutoPlannerViewModel {\r\n    private courseState: CourseState;\r\n  \r\n    constructor(courseState: CourseState) {\r\n        this.courseState = courseState;\r\n    }\r\n\r\n    get autoPlanCourseState(): CourseState {\r\n        return this.courseState;\r\n    }\r\n\r\n    autoPlan() {\r\n        let canAllocateCourses: boolean = true;\r\n        let listYearsToTryAllocate: number[] = this.getYearsToTryAllocate(this.courseState.getMaxAllocatedYear);\r\n        let listTermsToTryAllocate: string[] = [\"Term 1\", \"Term 2\", \"Term 3\"]\r\n\r\n        while (canAllocateCourses === true) {\r\n            let coursesToBeAllocated: CourseModel[] = this.courseState.plannedCourses;\r\n            let nCoursesToAllocate: number = coursesToBeAllocated.length;\r\n            let hasChanged = false;\r\n\r\n            // Try for each year, term; if allocation spot is free & pre-req is met, add course to term\r\n            for (var counter = 0; counter < coursesToBeAllocated.length; counter++) {\r\n                let termAllocatedFlag = false;\r\n                for (let i = 0; i < listYearsToTryAllocate.length; i++) {\r\n                    if (termAllocatedFlag === false) {\r\n                        for (let j = 0; j < listTermsToTryAllocate.length; j++) {\r\n                            let canAssignToTerm : string[] | boolean = this.courseState.getMissingRequirementsWhenAssigningCourseToTerm(coursesToBeAllocated[counter], new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]));\r\n                            let termHasSpaceToAllocate : boolean = this.termHasLessThanThreeCourses(listYearsToTryAllocate[i], listTermsToTryAllocate[j], this.courseState.termCourseMap);\r\n                            let termIsDisabled: boolean = new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]).isBefore(new TermModel(2021, \"Term 2\"))\r\n                            if (canAssignToTerm.length === 0) {\r\n                                canAssignToTerm = true;\r\n                            } else {\r\n                                canAssignToTerm = false;\r\n                            }\r\n\r\n                            if (!termIsDisabled && termHasSpaceToAllocate && canAssignToTerm) {\r\n                                this.courseState.assignCourseToTerm(coursesToBeAllocated[counter], new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]));\r\n                                termAllocatedFlag = true;\r\n                                hasChanged = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Terminating condition\r\n            // If there are no changes, this means that there are no more courses that can be allocated\r\n            // and hence terminate allocation attempt\r\n            if (hasChanged === false) {\r\n                canAllocateCourses = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    termHasLessThanThreeCourses(year: number, term: string, allocatedCourses: Map<string, CourseModel[]>) : boolean {\r\n        let dictKey = year + \"_\" + term;\r\n\r\n        if (allocatedCourses.has(dictKey)) {\r\n            // A term already has 3 courses, can't allocate\r\n            if (allocatedCourses.get(dictKey)!.length >= 3) {\r\n                return false;\r\n            }\r\n\r\n            // Term exists in allocatedTerm array, but has less than 3 courses, can allocate\r\n            return true;\r\n        } else {\r\n            // Term has not been allocated, can allocate\r\n            return true;\r\n        }\r\n    }\r\n\r\n    getYearsToTryAllocate(maxYear: number) {\r\n        var list: number[] = [];\r\n\r\n        // Return list of years with excess, incase all previous terms are full\r\n        for (var i = 2021; i <= maxYear + 4; i++) {\r\n            list.push(i);\r\n        }\r\n\r\n        return list;\r\n    }\r\n}","import \"fomantic-ui-css/semantic.min.css\";\nimport { Observer } from 'mobx-react-lite';\nimport React, { useContext } from 'react';\nimport SplitPane from 'react-split-pane';\nimport 'semantic-ui-react';\nimport { Container } from 'semantic-ui-react';\nimport './App.css';\nimport LocalImportExport from \"./containers/LocalImportExport/LocalImportExport\"\nimport { LocalImportExportViewModel } from './containers/LocalImportExport/LocalImportExportViewModel';\nimport { MenuBar } from './containers/MenuBar/MenuBar';\nimport Planner from './containers/Planner/Planner';\nimport { PlannerViewModel } from './containers/Planner/PlannerViewModel';\nimport ProgressionPlanner from './containers/ProgressionPlanner/ProgressionPlanner';\nimport { ProgressionPlannerViewModel } from './containers/ProgressionPlanner/ProgressionPlannerViewModel';\nimport SearchPanel from './containers/SearchPanel/SearchPanel';\nimport { SearchPanelViewModel } from './containers/SearchPanel/SearchPanelViewModel';\nimport { ApplicationContext } from './contexts/ApplicationContext';\nimport AutoPlanner from './containers/AutoPlan/AutoPlannerView';\nimport { AutoPlannerViewModel } from \"./containers/AutoPlan/AutoPlannerModel\";\n\nconst App = () => {\n  const applicationContext = useContext(ApplicationContext)\n\n  const searchPanelViewModel = new SearchPanelViewModel(applicationContext.searchDataState);\n  const plannerViewModel = new PlannerViewModel(applicationContext.courseState);\n  const progressionPlannerViewModel = new ProgressionPlannerViewModel(applicationContext.progressionState, applicationContext.courseState);\n  const localImportExportModel = new LocalImportExportViewModel(applicationContext.userState, applicationContext.progressionState, applicationContext.courseState);\n  const autoPlannerViewModel = new AutoPlannerViewModel(applicationContext.courseState);\n\n  return (\n    <ApplicationContext.Provider value={applicationContext}>\n      <div className=\"ui maincontainer\">\n        <MenuBar userState={applicationContext.userState} />\n        <SplitPane\n          className=\"split-pane-flex\"\n          split=\"vertical\"\n          defaultSize={\"min(50vw, 1000px)\"}\n          primary=\"second\"\n        >\n          <Container style={{ padding: 10 }} fluid>\n            <SearchPanel searchPanelViewModel={searchPanelViewModel} />\n            <Observer>\n              {\n                () => {\n                  return (\n                    !searchPanelViewModel.shouldShowPanel\n                      ? <ProgressionPlanner progressionPlannerViewModel={progressionPlannerViewModel} />\n                      : <></>\n                  )\n                }\n              }\n            </Observer>\n          </Container>\n          <Container style={{ padding: 10, paddingLeft: 50 }} fluid>\n            <LocalImportExport localImportExportViewModel={localImportExportModel} />\n            <AutoPlanner autoPlannerViewModel={autoPlannerViewModel} />\n            <Planner plannerViewModel={plannerViewModel} />\n          </Container>\n        </SplitPane>\n      </div>\n    </ApplicationContext.Provider>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}