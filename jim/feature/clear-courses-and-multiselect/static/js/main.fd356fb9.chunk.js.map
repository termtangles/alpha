{"version":3,"sources":["interfaces/ModelInterfaces.ts","containers/LocalImportExport/LocalImportExport.tsx","containers/LocalImportExport/LocalImportExportViewModel.ts","containers/MenuBar/MenuBar.tsx","containers/Planner/CourseView/CourseView.tsx","models/CourseModel.ts","containers/Planner/CourseGroupView/CourseGroupView.tsx","containers/Planner/YearView/YearView.tsx","models/TermModel.ts","containers/SearchPanel/SearchPanelViewModel.tsx","containers/Planner/Planner.tsx","containers/Planner/PlannerViewModel.tsx","helpers/ConditionalTreeTraverser.ts","states/CourseState.ts","models/Validations/Validations.ts","models/CurriculumModel.ts","models/ProgramModel.ts","models/SpecialisationModel.ts","states/ProgressionState.ts","states/SearchDataState.ts","states/UserState.ts","contexts/ApplicationContext.ts","containers/SearchPanel/SearchPanelStyles.ts","containers/SearchPanel/Results/CourseResultView.tsx","containers/SearchPanel/Results/SpecialisationResultView.tsx","containers/ProgressionPlanner/CurriculumView/CurriculumElementsView.tsx","containers/ProgressionPlanner/CurriculumView/CurriculumContainerView.tsx","containers/ProgressionPlanner/ProgressionEntityView.tsx","containers/ProgressionPlanner/ProgressionPlanner.tsx","containers/ProgressionPlanner/ProgressionPlannerViewModel.ts","models/Filters/FilterModel.ts","models/Filters/Filters.ts","config/ResetButtonStyle.ts","containers/SearchPanel/Filter/FilterSection.tsx","containers/SearchPanel/Filter/FilterMenuView.tsx","containers/SearchPanel/Results/CourseResultCollectionView.tsx","containers/SearchPanel/SearchTab/CourseSearchTab.tsx","containers/SearchPanel/Results/ProgramResultView.tsx","containers/SearchPanel/Results/ProgramResultCollectionView.tsx","containers/SearchPanel/SearchTab/ProgramSearchTab.tsx","containers/SearchPanel/Results/SpecialisationResultCollectionView.tsx","containers/SearchPanel/SearchTab/SpecialisationSearchTab.tsx","containers/SearchPanel/SearchPanel.tsx","containers/AutoPlan/AutoPlannerView.tsx","containers/AutoPlan/AutoPlannerModel.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ProgressionStatus","ErrorCode","StudyLevel","ImportExportButton","styled","button","props","primary","css","ImportExportButtonContainer","div","LocalImportExport","localImportExportViewModel","inputRef","React","useRef","Fragment","onClick","export","current","click","ref","onChange","event","import","type","style","display","accept","SerializableVersionNumber","_versionNumber","this","imported","a","_version","console","log","LocalImportExportViewModel","userState","progressionState","courseState","_serializables","Map","set","data","FileSaver","saveAs","Blob","JSON","stringify","DateTime","now","toFormat","studyLevel","forEach","serializable","key","serialize","serializeToFile","json","parse","Promise","resolve","get","deserialize","then","catch","error","message","file","target","files","reader","FileReader","onload","ev","result","deserializeFromString","toString","value","readAsText","MenuBarView","Menu","MenuBar","observer","useState","undefined","studyLevelChangeAction","setStudyLevelChangeAction","pointing","Item","header","name","active","UNDERGRADUATE","setStudyLevel","POSTGRADUATE","RESEARCH","Modal","size","open","onClose","Header","Content","Actions","Button","negative","positive","Container","isSelected","isPrerequisiteOfCurrentDraggable","hasErrors","isDragging","isGhosting","horizontal","isRegionSelecting","SelectionCount","UnselectableText","p","tooltipStyle","fontSize","CourseView","CourseStatus","termOffering","allocatedPeriod","output","slice","sort","join","formatTermOffering","course","allocatedTerm","errorList","errors","missing","missingFormatted","regex","length","replace","i","push","formatErrors","useEffect","registerDraggableRef","draggableRef","deregisterDraggableRef","contextRef","isCourseContextOpen","setIsCourseContextOpen","draggableId","code","index","droppableIndex","provided","snapshot","draggableProps","dragHandleProps","el","innerRef","prerequisitesOfCurrentDraggable","has","id","multiSelect","onCourseClick","onContextMenu","contextMenu","onCourseContextMenu","data-draggable","Popup","basic","context","setIsAnyContextOpen","isAnyContextOpen","items","getContextMenuItems","onItemClick","e","preventDefault","secondary","vertical","title","Tooltip","aria-label","aria-multiline","arrow","selectedCourses","Title","h3","CourseList","isDraggingOver","isValidDroppable","isMultiSelectDragging","isPossibleTermOfCurrentDraggable","courseID","TermHeader","UocLabel","Label","getSelectedMap","memoizeOne","reduce","previous","CourseGroupView","isPossibleTerm","term","currentDraggableProps","possibleTerms","filter","_term","equals","totalUoc","courses","map","creditPoints","b","color","content","droppableId","direction","droppableProps","draggingCourseId","prerequisiteCourseIds","placeholder","YearView","year","courseGroups","courseGroup","TermModel","makeAutoObservable","checkTermConstraints","Error","mappingName","parseInt","split","update","obj","tryGetTermNumber","serializedTerm","SearchPanelItem","CourseModel","contentTypeLabel","corequisites","description","effectiveDate","enrolmentRules","exclusion","facultyName","implementationYear","keywords","prerequisites","schoolName","urlMap","courseStatus","UNPLANNED","_errors","Set","ALLOCATED","clear","COMPLETED","PLANNED","add","delete","status","period","setPlanned","setCompleted","termModel","termFromSerializedData","setAllocated","YearPlanner","Planner","plannerViewModel","window","addEventListener","onWindowKeyDown","onWindowContextMenu","onDragEnter","onDragExit","onMouseUp","removeEventListener","plannerState","setIsRegionSelecting","draggableItemRef","draggableBoxRef","registerDraggable","courseModel","deregisterDraggable","handleSelectionChange","useCallback","box","draggableBox","includes","boxesIntersect","toggleSelectionInGroup","DragSelection","useSelectionContainer","onSelectionStart","entries","rect","getBoundingClientRect","onSelectionChange","onSelectionEnd","setIsDragging","defaultPrevented","unselectAllCourses","ctrlKey","toggleSelection","newCourses","indexOf","splice","areMultipleItems","menuItems","remove","icon","moveSelectedToRemoved","setUnplanned","plan","moveSelectedToPlanned","complete","moveSelectedToCompleted","Object","values","isWindowContextOpen","setIsWindowContextOpen","currentOpenContextStateSetter","left","clientX","top","clientY","right","bottom","height","width","multiSelectProps","navigator","platform","metaKey","wasToggleInSelectionGroupKeyUsed","contextMenuProps","contextIsOpenSetter","contextPositionRef","find","selectedCourse","onBeforeCapture","onDragStart","initial","getCourseById","calculateDisplayableTerms","getMissingRequirementsWhenAssigningCourseToTerm","getFlattenedPrerequisiteList","onDragEnd","destination","source","reason","setCourseByDroppableId","getAllGroups","group","courseInGroup","spliceByGroupId","clearCurrentDraggableProps","completedGroup","plannedGroup","yearGroups","yearGroup","PlannerViewModel","_courseState","_plannerState","_selectedCourses","_draggingCourseId","_currentDraggableProps","makeObservable","observable","computed","action","allocatedGroups","synchronizePlannerState","state","sourceDroppableId","destDroppableId","fromMappingName","referenceCourses","targetCourses","expectedCourses","actualCourses","coursesToRemove","coursesToAdd","maxAllocatedYear","getMaxAllocatedYear","displayableTerms","Date","getFullYear","uniqueYears","getMappingName","getFullName","newPlannerState","synchronizeCourseList","termCourseMap","plannedCourses","completedCourses","groupId","start","deleteCount","getCourseGroupById","conditionalTreeTraverser","treeNode","fnIsLeafValid","invalidations","or","childNode","and","isAndConditionalTree","CourseState","_userState","validations","getTermName","addError","COURSE_NOT_OFFERED_IN_SELECTED_TERM","getMissingPrerequisitesBeforeTerm","PREREQUISITE_REQUIREMENT_NOT_MET","getMissingPrerequisitesPlanned","PREREQUISITES_NOT_PLANNED","conflictingExclusionCourses","exclusionCourseCode","exclusionCourse","EXCLUSION_COURSE_CONFLICT","coursesMapById","coursesMapByActiveStatus","_isUpdated","reaction","_updateStudyLevel","fireImmediately","registerStudyLevelUpdateActionCallback","axios","response","transaction","_resetCourseMap","courseObj","addCourse","_loadAllCourses","mapping","courseList","allCourses","concat","allocatedCourses","uniqueTerms","keys","maxYear","courseStatusEnum","isNaN","Number","runValidations","_course","clearErrors","fnValidate","prerequisiteTree","courseCode","isBefore","resp","courseIsOffered","activeCourses","serializedCourseState","when","resetHard","serializedCourse","CurriculumContainer","elements","containers","order","uuidv4","CurriculumElement","itemCode","url","toLowerCase","parseCurriculumContainers","childrenData","rootContainerList","childContainerList","elementList","children","relationships","parseCurriculumElements","container","relationData","relationshipList","relationshipObj","ProgramModel","academicItemType","additionalInfo","structureSummary","curriculumStructure","intakePeriod","programConstraints","progressionStatus","program","SpecialisationModel","specialisation","ProgressionState","_programMapById","_specialisationMapById","loadAllPrograms","loadAllSpecialisations","programObj","addProgram","specialisationObj","addSpecialisation","allPrograms","allSpecialisations","plannedPrograms","plannedSpecialisations","programs","programModel","specialisations","specialisationModel","serializedProgressionState","serializedProgram","getProgramById","serializedSpecialisation","getSpecialisationById","SearchDataState","_progressionState","stringToStudyLevelMap","str","_studyLevel","_studyLevelUpdateActionCallbacks","studyLevelPromises","callback","all","isUpdated","updateAction","serializedUserState","level","searchDataState","ApplicationContext","createContext","ResultItem","ResultItemHeader","ResultItemContent","ResultItemExtra","Extra","ResultCollection","Group","ResultsPagination","Pagination","ResultsColumn","Grid","Column","CourseResultView","showOptions","setShowOptions","onMouseOver","onMouseLeave","Description","newWindow","opener","openInNewTab","Icon","className","SpecialisationResultView","onMouseEnter","CurriculumElementsView","applicationContext","useContext","curriculumElements","divided","element","isCourse","isSpecialisation","CurriculumAccordionCreditPoints","CurriculumAccordionTitle","Accordion","CurriculumDescriptionDiv","CurriculumExpandCollapseLink","CurriculumContent","CurriculumContainerView","getCreditPointsView","uocOfChildren","progressionPlannerViewModel","calculateUocOfChildren","curriculumContainer","exclusive","panels","isContainerActive","sanitizeHtml","href","toggleAllContainers","isAnySubContainerActive","entityId","onTitleClick","toggleContainer","ProgressionEntityTitle","ProgressionEntityView","entity","fluid","ProgressionContainer","ProgresionPlanner","plannedProgressionEntities","ProgressionPlannerViewModel","_progressionPlannerState","_displayableContainerPanels","getUniqueUocOfCurriculumContainer","allChildren","containerId","rootContainer","setAllContainersInactive","setAllContainersActive","FilterModel","fnGetTargetValue","_possibleValues","_selectedValues","filterResultMapping","initializeFilter","allSearchData","flat","applyFilter","searchResults","results","filterValue","isNumerical","possibleFilterValue","filterElementName","numMatchingRecords","SearchPanelViewModel","queryText","isLoading","resultsPerPage","isInputActive","searchFilters","courseFilters","programFilters","specialisationFilters","courseSearchResults","programSearchResults","specialisationSearchResults","activeItem","COURSES","setActiveItem","item","courseSearchData","setIsLoading","filters","getCourseFilters","programSearchData","getProgramFilters","specialisationSearchData","getSpecialisationFilters","autorun","searchCourses","searchPrograms","searchSpecialisations","runInAction","ResetButtonStyle","backgroundColor","border","padding","textDecoration","margin","cursor","FilterSection","expandedFilters","setExpandedFilters","filterState","getFilterState","newExpandedFilters","Form","grouped","filterElementState","Checkbox","label","checked","toggleValue","FilterMenuView","resetValue","as","CourseResultCollectionView","CourseSearchTab","activePageNumber","setActivePageNumber","columns","Row","searchPanelViewModel","Math","min","totalPages","ceil","onPageChange","activePage","ProgramResultView","ProgramResultCollectionView","ProgramSearchTab","SpecialisationResultCollectionView","SpecialisationSearchTab","ResultsSubtextContainer","FoundResults","h4","SearchPanel","getNumResults","numResults","PROGRAMS","SPECIALISATIONS","Input","loading","link","setQueryText","setInputActive","shouldShowPanel","marginRight","Dropdown","text","selection","options","setResultsPerPage","AutoPlanButton","AutoPlanner","autoPlannerViewModel","autoPlan","AutoPlannerViewModel","canAllocateCourses","listYearsToTryAllocate","getYearsToTryAllocate","listTermsToTryAllocate","coursesToBeAllocated","hasChanged","counter","termAllocatedFlag","j","canAssignToTerm","termHasSpaceToAllocate","termHasLessThanThreeCourses","termIsDisabled","assignCourseToTerm","dictKey","list","App","localImportExportModel","Provider","defaultSize","ProgressionPlanner","paddingLeft","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd356fb9.chunk.js","sourcesContent":["export interface ICurriculumContainer {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    creditPoints: number;\r\n    elements: ICurriculumElement[];\r\n    containers: ICurriculumContainer[];\r\n    order: number;\r\n}\r\n\r\nexport interface ICurriculumElement {\r\n    name: string;\r\n    description: string;\r\n    type: string;\r\n    creditPoints: number;\r\n    itemCode: string;\r\n    url: string;\r\n    order: number;\r\n    isCourse: () => boolean;\r\n    isSpecialisation: () => boolean;\r\n}\r\n\r\nexport interface IOrConditionalTree {\r\n    or: ConditionalTree[]\r\n}\r\nexport interface IAndConditionalTree {\r\n    and: ConditionalTree[]\r\n}\r\n\r\nexport const isOrConditionalTree = (obj: any): obj is IOrConditionalTree => {\r\n    return obj && obj.or\r\n}\r\n\r\nexport const isAndConditionalTree = (obj: any): obj is IAndConditionalTree => {\r\n    return obj && obj.and\r\n}\r\n\r\nexport type ConditionalTree = IOrConditionalTree | IAndConditionalTree | string\r\n\r\nexport interface ICourse {\r\n    id: string;\r\n    code: string;\r\n    contentTypeLabel: string;\r\n    corequisites: string[];\r\n    creditPoints: number;\r\n    description: string;\r\n    effectiveDate: Date; // Form (new Date('YYYY-MM-DD'));\r\n    enrolmentRules: string[];\r\n    exclusion: string[];\r\n    facultyName: string;\r\n    implementationYear: number;\r\n    keywords: string[];\r\n    prerequisites: ConditionalTree;\r\n    schoolName: string;\r\n    studyLevel: string;\r\n    termOffering: string[];\r\n    title: string;\r\n    urlMap: string;\r\n}\r\n\r\nexport interface IProgram {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    additionalInfo: string;\r\n    implementationYear: number;\r\n    intakePeriod: Array<string>;\r\n    programConstraints: Array<any>;\r\n    studyLevel: string;\r\n}\r\n\r\nexport interface ISpecialisation {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    implementationYear: number;\r\n    keywords: string[];\r\n    studyLevel: string;\r\n    urlMap: string;\r\n}\r\n\r\nexport interface IProgressionEntity {\r\n    id: string;\r\n    code: string;\r\n    title: string;\r\n    description: string;\r\n    academicItemType: string;\r\n    creditPoints: number;\r\n    structureSummary: string,\r\n    curriculumStructure: Array<ICurriculumContainer>;\r\n    facultyName: string;\r\n    schoolName: string;\r\n    progressionStatus: ProgressionStatus,\r\n    setPlanned: () => void,\r\n    setUnplanned: () => void,\r\n}\r\n\r\nexport enum ProgressionStatus {\r\n    UNPLANNED,\r\n    PLANNED,\r\n}\r\n\r\nexport interface IValidatableEntity {\r\n    addError: (error: IError) => void\r\n    removeError: (error: IError) => void\r\n    hasErrors: () => boolean\r\n    clearErrors: () => void\r\n    errors: IError[]\r\n}\r\n\r\nexport enum ErrorCode {\r\n    UNKNOWN,\r\n    COURSE_NOT_OFFERED_IN_SELECTED_TERM,\r\n    PREREQUISITES_NOT_PLANNED,  \r\n    PREREQUISITE_REQUIREMENT_NOT_MET,\r\n    COREQUISITE_REQUIREMENT_NOT_MET,\r\n    EXCLUSION_COURSE_CONFLICT,\r\n}\r\n\r\nexport interface IError {\r\n    code: ErrorCode,\r\n    message: string,\r\n    missing: string,\r\n}\r\n\r\nexport enum StudyLevel {\r\n    UNDERGRADUATE=\"undergraduate\",\r\n    POSTGRADUATE=\"postgraduate\",\r\n    RESEARCH=\"research\",\r\n}\r\n","import React from 'react';\nimport { LocalImportExportViewModel } from \"./LocalImportExportViewModel\"\nimport styled, { css } from \"styled-components\"\n\nconst ImportExportButton = styled.button`\n  background: transparent;\n  border-radius: 4px;\n  border: 2px solid darkgrey;\n  color: black;\n  margin: 4px 2px;\n  padding: 15px 32px;\n  font-size: 20px;\n  display: inline-block;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n\n  transition-duration: 0.2s;\n  :hover {\n    background: #f2f2f2;\n  }\n\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */ \n\n  ${props => props.primary && css`\n    background: darkgrey;\n\n    :hover {\n      background: lightgrey;\n    }\n  `}\n`;\n\nconst ImportExportButtonContainer = styled.div`\n  width: 48%;\n  display: inline;\n  background: transparent;\n  float: left;\n  margin: 0% 1%;\n`;\n\nconst LocalImportExport = ({ localImportExportViewModel }: { [key: string]: LocalImportExportViewModel }) => {\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  return (\n    <React.Fragment>\n      <ImportExportButtonContainer>\n        <ImportExportButton primary onClick={() => { localImportExportViewModel.export() }}>\n          Export\n        </ImportExportButton>\n      </ImportExportButtonContainer>\n      <ImportExportButtonContainer>\n        <ImportExportButton onClick={() => { inputRef.current?.click() }}>\n          Import\n        </ImportExportButton>\n        <input\n          ref={inputRef}\n          onChange={(event) => localImportExportViewModel.import(event)}\n          type=\"file\"\n          style={{ display: \"none\" }}\n          accept=\"application/JSON\"\n        />\n      </ImportExportButtonContainer>\n    </React.Fragment >\n  )\n};\n\nexport default LocalImportExport;","import { CourseState } from \"../../states/CourseState\"\nimport { ProgressionState } from \"../../states/ProgressionState\"\nimport React from \"react\"\nimport { UserState } from \"../../states/UserState\"\nimport { ISerializableEntity, TermtanglesSerialized } from \"../../interfaces/SerializableInterfaces\"\nimport { DateTime } from \"luxon\"\nimport FileSaver from \"file-saver\"\n\nexport class SerializableVersionNumber implements ISerializableEntity {\n  private _versionNumber: number = 1;\n\n  serialize(): Object {\n    return this._versionNumber;\n  }\n\n  async deserialize(imported: TermtanglesSerialized): Promise<void> {\n    if (!imported._version) {\n      throw \"ERROR: Version not included.\";\n    }\n\n    console.log(\"Termtangle data version: \" + imported._version);\n  }\n}\n\nexport class LocalImportExportViewModel {\n  private _serializables = new Map<string, ISerializableEntity>();\n\n  constructor (userState: UserState, progressionState: ProgressionState, courseState: CourseState) {\n    this._serializables.set(\"_version\", new SerializableVersionNumber());\n    this._serializables.set(\"userState\", userState);\n    this._serializables.set(\"progressionState\", progressionState);\n    this._serializables.set(\"courseState\", courseState);\n  }\n\n  serializeToFile(data: TermtanglesSerialized) {\n    FileSaver.saveAs(\n      new Blob([JSON.stringify(data)], { type: \"application/json;charset=utf-8\" }),\n      `termtangles_${DateTime.now().toFormat(\"yyyyMMdd_HHmmssSSS\")}.json`,\n    );\n  }\n\n  export() {\n    const data: TermtanglesSerialized = {\n      _version: 0,\n      userState: {studyLevel: \"\"}\n    };\n    this._serializables.forEach((serializable, key) => {\n      data[key] = serializable.serialize();\n    });\n    this.serializeToFile(data);\n  }\n\n  async deserializeFromString (data: string) {\n    try {\n      const json: TermtanglesSerialized = JSON.parse(data);\n\n      return Promise.resolve(\n        this._serializables.get(\"_version\")?.deserialize(json).then(() => \n          this._serializables.get(\"userState\")?.deserialize(json).then(() => \n            Promise.resolve([\n              this._serializables.get(\"progressionState\")?.deserialize(json),\n              this._serializables.get(\"courseState\")?.deserialize(json),\n            ])\n          )\n        )\n      ).catch((error) => { console.error(error) })\n    } catch (e) {\n      console.error(`ERROR: Invalid JSON (${e.message})`);\n    }\n  }\n\n  import (event: React.ChangeEvent<HTMLInputElement>) {\n    const file: Blob = event.target.files![0];\n    \n    let reader = new FileReader();\n    reader.onload = async (ev) => {\n      if (ev.target?.result) {\n        await this.deserializeFromString(ev.target.result.toString());\n        event.target.value = \"\";\n      }\n    }\n    reader.readAsText(file);\n  }\n}\n","import styled from 'styled-components'\nimport { Observer, observer } from 'mobx-react';\nimport React, { useState } from 'react';\nimport { Button, Menu, Modal } from 'semantic-ui-react';\nimport { StudyLevel } from '../../interfaces/ModelInterfaces';\nimport { UserState } from '../../states/UserState';\n\nexport interface IMenuBarProps {\n  userState: UserState\n}\n\nconst MenuBarView = styled(Menu)`\n  &&{\n    margin: auto 0 auto 0;\n  }\n`\n\nexport const MenuBar = observer((props: IMenuBarProps) => {\n  const [studyLevelChangeAction, setStudyLevelChangeAction] = useState<(() => void) | undefined>(undefined)\n  return <Observer>\n    {() => {\n      return (\n        <React.Fragment>\n          <MenuBarView pointing>\n            <Menu.Item header>Termtangles</Menu.Item>\n            <Menu.Item\n              name={\"Undergraduate\"}\n              active={props.userState.studyLevel === StudyLevel.UNDERGRADUATE}\n              onClick={\n                () => props.userState.studyLevel !== StudyLevel.UNDERGRADUATE\n                  ? setStudyLevelChangeAction(() => () => props.userState.setStudyLevel(StudyLevel.UNDERGRADUATE))\n                  : {}\n              }\n            />\n            <Menu.Item\n              name={\"Postgraduate\"}\n              active={props.userState.studyLevel === StudyLevel.POSTGRADUATE}\n              onClick={\n                () => props.userState.studyLevel !== StudyLevel.POSTGRADUATE\n                  ? setStudyLevelChangeAction(() => () => props.userState.setStudyLevel(StudyLevel.POSTGRADUATE))\n                  : {}\n              }\n            />\n            <Menu.Item\n              name={\"Research\"}\n              active={props.userState.studyLevel === StudyLevel.RESEARCH}\n              onClick={\n                () => props.userState.studyLevel !== StudyLevel.RESEARCH\n                  ? setStudyLevelChangeAction(() => () => props.userState.setStudyLevel(StudyLevel.RESEARCH))\n                  : {}\n              }\n            />\n          </MenuBarView>\n\n          <Modal\n            size='small'\n            open={studyLevelChangeAction !== undefined}\n            onClose={() => setStudyLevelChangeAction(undefined)}\n          >\n            <Modal.Header>Study Level Change</Modal.Header>\n            <Modal.Content>\n              <p>Changing study level will reset all current progress. Do you want to continue?</p>\n            </Modal.Content>\n            <Modal.Actions>\n              <Button negative onClick={() => setStudyLevelChangeAction(undefined)}>\n                No\n              </Button>\n              <Button positive onClick={() => {\n                if (studyLevelChangeAction) {\n                  studyLevelChangeAction()\n                }\n                setStudyLevelChangeAction(undefined)\n              }}>\n                Yes\n              </Button>\n            </Modal.Actions>\n          </Modal>\n\n        </React.Fragment>\n      )\n    }}\n  </Observer>\n})\n","import styled from 'styled-components'\nimport { CourseModel } from '../../../models/CourseModel';\nimport { Draggable, DraggableProvided, DraggableStateSnapshot } from 'react-beautiful-dnd'\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { IError } from '../../../interfaces/ModelInterfaces';\nimport { TermModel } from '../../../models/TermModel';\nimport { Menu, MenuItemProps, Popup } from 'semantic-ui-react';\nimport React from 'react';\nimport { IMultiSelectProps, IContextMenuProps } from '../Planner';\nimport { useEffect } from 'react';\n\nconst getBackgroundColor = (props) => {\n  return (\n    props.isPrerequisiteOfCurrentDraggable\n      ? '#c5eafc'\n      : props.hasErrors()\n        ? '#f5bfc8'\n        : props.isDragging\n          ? 'lightgrey'\n          : 'white'\n  )\n}\n\nconst Container = styled.div`\n  border: ${(props) =>\n    props.isSelected\n      ? \"2px dashed royalblue\"\n      : \"2px solid lightgrey\"\n  };\n  border-radius: 8px;\n  padding: 8px;\n  margin: 0px 2px 8px 2px;\n  background-color: ${getBackgroundColor};\n  ${(props) =>\n    props.isDragging\n      ? `box-shadow: 2px 2px 1px lightgrey;`\n      : ''\n  }\n  \n  ${(props) =>\n    props.isGhosting\n      ? 'opacity: 0.9; color: darkgrey;'\n      : ''\n  }\n\n  /* needed for SelectionCount */\n  position: relative;\n\n  ${props => props.horizontal ? \"\" : \"flex-grow: 1;\"}\n  height: fit-content;\n  max-width: 350px;\n\n  &:active {\n    outline: none;\n    ${props => props.isRegionSelecting ? \"\" : \"border: 2px inset lightgrey;\"}\n  }\n\n\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */\n`\nconst SelectionCount = styled.div`\n  right: -20px;\n  top: -20px;\n  color: white;\n  background: royalblue;\n  border-radius: 50%;\n  height: 35px;\n  width: 35px;\n  line-height: 35px;\n  position: absolute;\n  text-align: center;\n  font-size: 15px;\n  \n`;\n\nconst UnselectableText = styled.p`\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */      \n`\n\nconst tooltipStyle = {\n  fontSize: 13,\n}\n\ninterface ICourseViewProps {\n  droppableIndex: number\n  course: CourseModel\n  prerequisitesOfCurrentDraggable: Set<string>\n  horizontal?: boolean\n  isSelected: boolean\n  isGhosting: boolean\n\n  registerDraggableRef: (courseModel: CourseModel, ref: React.MutableRefObject<any>) => void\n  deregisterDraggableRef: (courseModel: CourseModel) => void\n\n  multiSelect: IMultiSelectProps;\n  contextMenu: IContextMenuProps;\n  isRegionSelecting: boolean;\n}\n\nconst CourseView = (props: ICourseViewProps) => {\n  let termOffering = formatTermOffering(props.course.termOffering, props.course.allocatedTerm);\n  let errorList: string[] = formatErrors(props.course.errors);\n\n  useEffect(() => {\n    props.registerDraggableRef(props.course, draggableRef);\n\n    return (() => props.deregisterDraggableRef(props.course));\n  })\n\n  // const onKeyDown = (event: KeyboardEvent, provided: DraggableProvided, snapshot: DraggableStateSnapshot) => {\n  //   if (event.defaultPrevented) return;\n\n  //   if (snapshot.isDragging) return;\n\n  //   if (event.key !== \"enter\") return;\n\n  //   event.preventDefault();\n  //   performAction(event);\n  // }\n\n  // Drag region selection\n  const draggableRef = React.useRef<HTMLDivElement | null | undefined>();\n  //props.regionSelect.registerDraggable(props.course, draggableRef);\n\n  const contextRef = React.useRef<any>();\n  const [isCourseContextOpen, setIsCourseContextOpen] = React.useState(false);\n\n  return (\n    <Draggable draggableId={props.course.code} index={props.droppableIndex} >\n      {((provided, snapshot) => {\n        return (\n          <Container\n            horizontal={props.horizontal}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            ref={(el) => {\n              provided.innerRef(el);\n              draggableRef.current = el;\n            }}\n            isDragging={snapshot.isDragging}\n            isPrerequisiteOfCurrentDraggable={props.prerequisitesOfCurrentDraggable.has(props.course.id)}\n            hasErrors={() => props.course.hasErrors()}\n            isSelected={props.isSelected}\n            onClick={(event: MouseEvent) => props.multiSelect.onCourseClick(props.course, event)}\n            //onKeyDown={(event: KeyboardEvent) => onKeyDown(event, provided, snapshot)}\n            isGhosting={props.isGhosting}\n            onContextMenu={(event: MouseEvent) => {\n              props.contextMenu.onCourseContextMenu(props.course, setIsCourseContextOpen, contextRef, event);\n              setIsCourseContextOpen(true);\n            }}\n            isRegionSelecting={props.isRegionSelecting}\n            // https://github.com/AirLabsTeam/react-drag-to-select#working-with-draggable-elements\n            // Tell region select this is a draggable.\n            data-draggable={true}\n          >\n            <Popup\n              basic\n              context={contextRef}\n              onClose={() => {\n                setIsCourseContextOpen(false);\n                props.contextMenu.setIsAnyContextOpen(false);\n              }}\n              open={isCourseContextOpen && props.contextMenu.isAnyContextOpen}\n            >\n              <Menu\n                items={props.contextMenu.getContextMenuItems(props.course)}\n                onItemClick={(e) => {\n                  e.preventDefault();\n                  setIsCourseContextOpen(false);\n                  props.contextMenu.setIsAnyContextOpen(false);\n                }}\n                secondary\n                vertical\n              />\n            </Popup>\n\n            {!props.isRegionSelecting ? (\n              <Tooltip title={\n                <span>\n                  <UnselectableText style={tooltipStyle}>{termOffering}</UnselectableText>\n                  <UnselectableText style={tooltipStyle}>{errorList[0]}</UnselectableText>\n                  <UnselectableText style={tooltipStyle}>{errorList[1]}</UnselectableText>\n                </span>}\n                aria-label=\"add\" aria-multiline=\"true\" arrow={true}\n              >\n                <UnselectableText> {props.course.code} - {props.course.title}</UnselectableText>\n              </Tooltip>\n            ) : <UnselectableText> {props.course.code} - {props.course.title}</UnselectableText>}\n\n            {snapshot.isDragging && props.multiSelect.selectedCourses.length > 1 ? (\n              <SelectionCount>{props.multiSelect.selectedCourses.length}</SelectionCount>\n            ) : undefined}\n          </Container>\n        )\n      })}\n    </Draggable>\n  )\n}\n\nfunction formatErrors(errors: IError[]): string[] {\n  let output: string[] = [];\n  let missing: string[] = [];\n  let missingFormatted: string[] = [];\n  const regex = /<br\\/>/ig;\n\n  if (errors.length === 0) {\n    return [\"\"];\n  }\n\n  if (errors.length === 1) {\n    return [errors[0].message.replace(regex, \"\"), `${errors[0].missing} `];\n  }\n\n  for (let i = 0; i < errors.length; i++) {\n    output.push(errors[i].message.replace(regex, \"\"));\n    missing.push(errors[i].missing);\n  }\n\n  // Format missing arr for empty elements and remove from array before joining\n  for (let i = 0; i < errors.length; i++) {\n    if (missing[i] !== \"\") {\n      missingFormatted.push(missing[i]);\n    }\n  }\n\n  return [output.join(\" & \"), missingFormatted.join(\" & \")];\n}\n\nfunction formatTermOffering(termOffering: string[], allocatedPeriod: TermModel | undefined) {\n  termOffering = termOffering.slice().sort();\n  let output: string = termOffering.join(\", \");\n\n  output = `Term Offerings: ${output} `;\n\n  return output;\n}\n\nexport default CourseView\n","import { makeAutoObservable } from \"mobx\";\nimport { TermModel } from \"./TermModel\";\nimport { SerializedCourse, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\nimport { ICourse, ConditionalTree, IValidatableEntity, IError } from '../interfaces/ModelInterfaces';\n\nexport enum CourseStatus {\n  UNPLANNED,\n  PLANNED,\n  ALLOCATED,\n  COMPLETED,\n}\n\nexport class CourseModel implements ICourse, IValidatableEntity, ISerializableEntity {\n  allocatedTerm: TermModel | undefined = undefined;\n  public readonly id: string\n  public courseStatus: CourseStatus = CourseStatus.UNPLANNED // Default unplanned\n\n  private _errors: Set<IError> = new Set<IError>()\n\n  constructor(\n    public readonly code: string,\n    public readonly contentTypeLabel: string,\n    public readonly corequisites: string[],\n    public readonly creditPoints: number,\n    public readonly description: string,\n    public readonly effectiveDate: Date, // Form (new Date('YYYY-MM-DD'));\n    public readonly enrolmentRules: string[],\n    public readonly exclusion: string[],\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly keywords: string[],\n    public readonly prerequisites: ConditionalTree,\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly termOffering: string[],\n    public readonly title: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code;\n    makeAutoObservable(this)\n  }\n\n  setAllocated(term: TermModel) {\n    this.courseStatus = CourseStatus.ALLOCATED\n    this.allocatedTerm = term\n  }\n\n  setUnplanned() {\n    this._errors.clear()\n    this.courseStatus = CourseStatus.UNPLANNED\n    this.allocatedTerm = undefined\n  }\n\n  setCompleted() {\n    this._errors.clear()\n    this.courseStatus = CourseStatus.COMPLETED\n    this.allocatedTerm = undefined\n  }\n\n  setPlanned() {\n    this.courseStatus = CourseStatus.PLANNED\n    this.allocatedTerm = undefined\n  }\n\n  //#region IValidatableEntity\n  addError(error: IError) {\n    this._errors.add(error)\n  }\n\n  removeError (error: IError) {\n    this._errors.delete(error)\n  }\n\n  hasErrors(): boolean {\n    return this._errors.size > 0\n  }\n\n  clearErrors() {\n    this._errors.clear()\n  }\n\n  get errors(): IError[] {\n    return [...this._errors]\n  }\n  //#endregion\n\n  serialize(): SerializedCourse {\n    if (this.courseStatus !== CourseStatus.ALLOCATED) {\n      return {\n        id: this.id,\n        status: CourseStatus[this.courseStatus],\n      }\n    } else {\n      return {\n        id: this.id,\n        status: CourseStatus[this.courseStatus],\n        period: this.allocatedTerm?.serialize(),\n      }\n    }\n  }\n\n  async deserialize(course: SerializedCourse) {\n    if (course.id !== this.id) {\n      console.error(`ERROR: This course is not ${course.id} (is: ${this.id})`);\n      return;\n    }\n\n    switch(course.status) {\n      case (CourseStatus[CourseStatus.PLANNED]): {\n        this.setPlanned();\n        break;\n      }\n      case (CourseStatus[CourseStatus.COMPLETED]): {\n        this.setCompleted();\n        break;\n      }\n      case (CourseStatus[CourseStatus.ALLOCATED]): {\n        if (course.period) {\n          try {\n            let termModel = TermModel.termFromSerializedData(course.period);\n            this.setAllocated(termModel);\n          } catch (e) {\n            console.error(`ERROR: invalid term period passed in ${course.period} (${e.message})`);\n          }\n          \n        } else {\n          console.error(`ERROR: Allocated course status with no period ${course.id}`);\n        }\n        break;\n      }\n      default: {\n        console.error(`ERROR: ${course.status} is not a valid status`);\n      }\n    }\n  }\n\n  toString() {\n    return `[COURSE_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadCourseByCode(courseCode: string) {\n//   return db.collection(\"courses\")\n//     .doc(courseCode)!\n//     .withConverter(courseConverter)\n//     .get().then((doc) => {\n//       if (doc.exists) {\n//         var course = doc.data()!;\n\n//         return course;\n//       } else {\n//         console.log(\"No such document!\");\n//       }\n//     }).catch((error) => {\n//       console.log(\"Error getting document:\", error);\n//       throw new Error();\n//     });\n// }\n\n// let courseConverter = {\n//   toFirestore: function (course) {\n//     return {\n//       name: course.code,\n//     };\n//   },\n//   fromFirestore: function (snapshot, options) {\n//     const data = snapshot.data(options);\n//     let effectiveDate = new Date(data.effectiveDate);\n\n//     return new CourseModel(\n//       data.code,\n//       data.contentTypeLabel,\n//       data.corequisites,\n//       Number(data.creditPoints),\n//       data.description,\n//       effectiveDate,\n//       data.enrolmentRules,\n//       data.exclusion,\n//       data.facultyName,\n//       Number(data.implementationYear),\n//       data.keywords,\n//       data.prerequisites,\n//       data.schoolName,\n//       data.studyLevel,\n//       data.termOffering,\n//       data.title,\n//       data.urlMap,\n//     );\n//   }\n// };","import { Droppable } from 'react-beautiful-dnd';\nimport { Label } from 'semantic-ui-react';\nimport styled from 'styled-components'\nimport { CourseModel } from '../../../models/CourseModel';\nimport { TermModel } from '../../../models/TermModel';\nimport CourseView from '../CourseView/CourseView';\nimport { ICourseGroup, ICurrentDraggableProps } from '../PlannerViewModel';\nimport { MenuItemProps } from 'semantic-ui-react'\nimport memoizeOne from \"memoize-one\"\nimport { IMultiSelectProps, IContextMenuProps } from '../Planner';\n\nconst Container = styled.div`\n  margin: 8px;\n  border: 1px solid lightgrey;\n  border-radius:2px;\n\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  ${props => !props.horizontal ? \"max-width: 350px\" : \"\"};\n  ${props => props.title === \"Planned\" ? \"min-width: 350px\" : \"\"};\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */ \n`\n\nconst Title = styled.h3`\n  padding: 6px;\n  margin: 0 0;\n  display: flex;\n  width: 200px;\n`;\n\nconst CourseList = styled.div`\n  padding: 6px;\n  min-height: 100px;\n  transition: background-color 0.2s ease;\n  background-color: ${props =>\n  (props.isDraggingOver\n    ? props.isValidDroppable || props.isMultiSelectDragging\n      ? '#8debb7'\n      : '#ff99b0'\n    : props.isPossibleTermOfCurrentDraggable\n      ? '#cafae0'\n      : (props.courseID === \"completed\")\n        ? '#edf2f4'\n        : (props.courseID === \"planned\")\n          ? '#edf2f4'\n          : '#edf2f4'\n  )\n  };\n  flex-grow: 1;\n  display: flex;\n  flex-direction: ${props => props.horizontal ? \"row\" : \"column\"};\n  flex-flow: row ${props => props.horizontal ? \"wrap\" : \"nowrap\"};\n  align-content: flex-start;\n  max-width: inherit;\n`;\n\n\n\nconst TermHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`\n\nconst UocLabel = styled(Label)`\n  && {\n    margin: auto 0 auto 0;\n    height: fit-content;\n    vertical-align: middle;\n    white-space: nowrap;\n  } \n`\n\ninterface ITermViewProps {\n  id: string\n  title: string\n  courses: CourseModel[]\n  term: TermModel | null\n  currentDraggableProps: ICurrentDraggableProps\n  horizontal?: boolean\n\n  registerDraggableRef: (courseModel: CourseModel, ref: React.MutableRefObject<any>) => void\n  deregisterDraggableRef: (courseModel: CourseModel) => void\n\n  multiSelect: IMultiSelectProps;\n  contextMenu: IContextMenuProps;\n  isRegionSelecting: boolean;\n}\n\nconst getSelectedMap = memoizeOne((selectedCourses: CourseModel[]) =>\n  selectedCourses.reduce((previous, current) => {\n    previous[current.id] = true;\n    return previous;\n  }, {}),\n);\n\nconst CourseGroupView = (props: ITermViewProps) => {\n  const isPossibleTerm = (term: TermModel | null): boolean => {\n    return props.currentDraggableProps.possibleTerms.filter(_term => _term.equals(term)).length > 0\n  }\n  const totalUoc = props.courses.map(course => course.creditPoints).reduce((a, b) => a + b, 0)\n\n  return (\n    <Container horizontal={props.horizontal} title={props.title}>\n      <TermHeader>\n        <Title>{props.title}</Title>\n        {\n          props.term\n            ? <UocLabel\n              color={(totalUoc === 18 || props.courses.length === 3)\n                ? \"green\"\n                : totalUoc < 18\n                  ? \"orange\"\n                  : \"yellow\"\n              }\n              content={`${totalUoc} UOC`}\n              size={\"small\"}\n            />\n            : <></>\n        }\n      </TermHeader>\n      <Droppable\n        droppableId={props.id}\n        direction={props.horizontal ? 'horizontal' : 'vertical'}\n      >\n        {\n          (provided, snapshot) => (\n            <CourseList\n              horizontal\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              isDraggingOver={snapshot.isDraggingOver}\n              courseID={provided.droppableProps['data-rbd-droppable-id']}\n              isPossibleTermOfCurrentDraggable={isPossibleTerm(props.term)}\n              isValidDroppable={props.term === null || isPossibleTerm(props.term)}\n              isMultiSelectDragging={props.multiSelect.selectedCourses.length > 1}\n            >\n              {\n                props.courses ? props.courses.map((course, index) => {\n                  const isSelected: boolean = !!getSelectedMap(props.multiSelect.selectedCourses)[course.id]\n                  const isGhosting: boolean = isSelected && !!props.multiSelect.draggingCourseId && props.multiSelect.draggingCourseId !== course.id;\n                  return (\n                    <CourseView\n                      horizontal={props.horizontal}\n                      key={course.code}\n                      course={course}\n                      droppableIndex={index}\n                      prerequisitesOfCurrentDraggable={props.currentDraggableProps.prerequisiteCourseIds}\n                      isSelected={isSelected}\n                      isGhosting={isGhosting}\n                      registerDraggableRef={props.registerDraggableRef}\n                      deregisterDraggableRef={props.deregisterDraggableRef}\n                      multiSelect={props.multiSelect}\n                      contextMenu={props.contextMenu}\n                      isRegionSelecting={props.isRegionSelecting}\n                    />\n                  )\n                })\n                  : undefined\n              }\n              {provided.placeholder}\n            </CourseList>\n          )\n        }\n      </Droppable>\n    </Container>\n  )\n};\nexport default CourseGroupView\n","import { MenuItemProps } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport { CourseModel } from '../../../models/CourseModel';\nimport CourseGroupView from '../CourseGroupView/CourseGroupView';\nimport { IContextMenuProps, IMultiSelectProps } from '../Planner';\nimport { ICourseGroup, ICurrentDraggableProps } from '../PlannerViewModel';\n\nconst Container = styled.div`\n    margin: 8px;\n    border: 1px solid lightgrey;\n    border-radius:2px;\n    width: 250px;\n    -webkit-user-select: none;  /* Chrome all / Safari all */\n    -moz-user-select: none;     /* Firefox all */\n    -ms-user-select: none;      /* IE 10+ */\n    user-select: none;          /* Likely future */ \n`\n\nconst Title = styled.h3`\n    padding: 6px;\n    margin: 3px;\n    display: flex;\n    width: 200px;\n`;\n\ninterface IYearViewProps {\n  id: string,\n  title: string,\n  year: number,\n  courseGroups: ICourseGroup[],\n  currentDraggableProps: ICurrentDraggableProps,\n\n  registerDraggableRef: (courseModel: CourseModel, ref: React.MutableRefObject<any>) => void\n  deregisterDraggableRef: (courseModel: CourseModel) => void\n\n  multiSelect: IMultiSelectProps;\n  contextMenu: IContextMenuProps;\n  isRegionSelecting: boolean;\n}\n\nconst YearView = (props: IYearViewProps) => {\n  return (\n    <Container>\n      <Title>{props.year}</Title>\n      {\n        props.courseGroups.map(courseGroup => {\n          // console.log(`Rendering term ${courseGroup.title} with courses ${courseGroup.courses}`)\n          return (\n            <CourseGroupView\n              key={courseGroup.id}\n              id={courseGroup.id}\n              title={courseGroup.title}\n              courses={courseGroup.courses}\n              term={courseGroup.term}\n              currentDraggableProps={props.currentDraggableProps}\n              registerDraggableRef={props.registerDraggableRef}\n              deregisterDraggableRef={props.deregisterDraggableRef}\n              multiSelect={props.multiSelect}\n              contextMenu={props.contextMenu}\n              isRegionSelecting={props.isRegionSelecting}\n            />\n          )\n        })\n      }\n    </Container>\n  )\n};\nexport default YearView\n","import { makeAutoObservable } from \"mobx\";\nimport { SerializedTerm, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\n\nexport class TermModel implements ISerializableEntity {\n    year: number;\n    name: string;\n\n    constructor(\n        year: number,\n        name: string,\n    ) {\n        makeAutoObservable(this);\n        this.checkTermConstraints(year, name);\n        \n        this.year = year;\n        this.name = name;\n    }\n\n    static termFromSerializedData(serializedTerm: SerializedTerm) {\n        return new TermModel(serializedTerm.year, serializedTerm.name);\n    }\n\n    private checkTermConstraints(year?: number, name?: string) {\n        if (!year) throw Error(`ERROR: ${year} is not a valid term year.`);\n        if (!name) throw Error(`ERROR: ${name} is not a valid term name.`);\n\n        // Do other term checks here\n    }\n\n    // getShortName() {\n    //     if (this.tryGetTermNumber()) {\n    //         return `${this.year % 100}T${this.tryGetTermNumber()}`\n    //     }\n    //     return `${this.year % 100} ${this.name}`\n    // }\n\n    get getMappingName() {\n        return `${this.year}_${this.name}`\n    }\n\n    update(year: number, name: string) {\n        this.year = year\n        this.name = name\n    }\n\n    updateFromMappingName(mappingName: string) {\n        let year = parseInt(mappingName.split('_')[0])\n        let name = mappingName.split('_')[1]\n        this.update(year, name)\n    }\n\n    get getFullName() {\n        return `${this.year} ${this.name}`\n    }\n\n    get getTermName() {\n        return `${this.name}`\n    }\n\n    static fromMappingName(mappingName: string) {\n        let year = parseInt(mappingName.split('_')[0])\n        let term_name = mappingName.split('_')[1]\n\n        return new TermModel(year, term_name)\n    }\n\n    private tryGetTermNumber(): number | undefined {\n        switch (this.name) {\n            case \"Summer Term\":\n                return 0\n            case \"Term 1\":\n                return 1\n            case \"Term 2\":\n                return 2\n            case \"Term 3\":\n                return 3\n            default:\n                return undefined\n        }\n    }\n\n    public equals(obj: TermModel | null): boolean {\n        if (!obj) {\n            return false\n        }\n        return this.year === obj.year && this.name === obj.name\n    }\n\n    public isBefore(term: TermModel) {\n        return this.year < term.year\n            || (term.year === this.year && ( (this.tryGetTermNumber() ?? 99) < (term.tryGetTermNumber() ?? 99)) );\n    }\n\n    serialize(): SerializedTerm {\n        return {\n            year: this.year,\n            name: this.name,\n        };\n    }\n\n    deserialize(serializedTerm: SerializedTerm): Promise<void> {\n        throw Error(`ERROR: use static method termFromSerializedData to construct the term from serialized data ${serializedTerm}.`);\n    }\n}\n","import { autorun, makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport { CourseModel } from \"../../models/CourseModel\";\nimport { FilterModel } from \"../../models/Filters/FilterModel\";\nimport { getCourseFilters, getProgramFilters, getSpecialisationFilters } from \"../../models/Filters/Filters\";\nimport { ProgramModel } from \"../../models/ProgramModel\";\nimport { SpecialisationModel } from \"../../models/SpecialisationModel\";\nimport { SearchDataState } from \"../../states/SearchDataState\";\n\nexport interface ISearchQuery<T> {\n  queryText: string,\n  filters: FilterModel<T>[],\n}\n\nexport interface ISearchResults {\n  courseSearchResults: CourseModel[],\n  programSearchResults: ProgramModel[],\n  specialisationSearchResults: SpecialisationModel[],\n}\n\nexport interface ISearchFilters {\n  courseFilters: FilterModel<CourseModel>[],\n  programFilters: FilterModel<ProgramModel>[],\n  specialisationFilters: FilterModel<SpecialisationModel>[],\n}\n\nexport enum SearchPanelItem {\n  COURSES,\n  PROGRAMS,\n  SPECIALISATIONS,\n}\n\nexport class SearchPanelViewModel {\n  constructor(\n    public readonly searchDataState: SearchDataState,\n  ) {\n    makeAutoObservable<SearchPanelViewModel>(this)\n\n    reaction(() => searchDataState.courseSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.courseFilters = getCourseFilters(searchDataState.courseSearchData)\n    }, {fireImmediately: true})\n\n    reaction(() => searchDataState.programSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.programFilters = getProgramFilters(searchDataState.programSearchData)\n    }, {fireImmediately: true})\n\n    reaction(() => searchDataState.specialisationSearchData, () => {\n      this.setIsLoading(false)\n      this.searchFilters.specialisationFilters = getSpecialisationFilters(searchDataState.specialisationSearchData)\n    }, {fireImmediately: true})\n\n    autorun(() => {\n      this.searchCourses()\n    });\n\n    autorun(() => {\n      this.searchPrograms()\n    });\n\n    autorun(() => {\n      this.searchSpecialisations()\n    });\n  }\n\n  public queryText: string = \"\"\n  public isLoading: boolean = true\n  public resultsPerPage: number = 10\n  public isInputActive: boolean = false\n  public searchFilters: ISearchFilters = {\n    courseFilters: [],\n    programFilters: [],\n    specialisationFilters: [],\n  }\n  public searchResults: ISearchResults = {\n    courseSearchResults: [],\n    programSearchResults: [],\n    specialisationSearchResults: [],\n  }\n  public activeItem: SearchPanelItem = SearchPanelItem.COURSES\n\n  public setActiveItem = (item: SearchPanelItem) => {\n    this.activeItem = item\n  }\n\n  get shouldShowPanel() {\n    return this.isInputActive || this.queryText.length > 0\n  }\n\n  setInputActive(isInputActive: boolean) {\n    this.isInputActive = isInputActive;\n  }\n\n  setQueryText(queryText: string) {\n    this.queryText = queryText\n  }\n\n  setIsLoading(isLoading: boolean) {\n    this.isLoading = isLoading\n  }\n\n  setResultsPerPage(resultsPerPage: number) {\n    this.resultsPerPage = resultsPerPage\n  }\n\n  searchCourses() {\n    let results = this.searchDataState.courseSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.courseSearchData\n        .filter(course => {\n          return course.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || course.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.courseFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.courseSearchResults = results)\n  }\n  \n\n  searchPrograms() {\n    let results = this.searchDataState.programSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.programSearchData\n        .filter(program => {\n          return program.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || program.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.programFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.programSearchResults = results)\n  }\n\n  searchSpecialisations() {\n    let results = this.searchDataState.specialisationSearchData\n    if (this.queryText !== \"\") {\n      results = this.searchDataState.specialisationSearchData\n        .filter(specialisation => {\n          return specialisation.code.toLowerCase().includes(this.queryText.toLowerCase())\n            || specialisation.title.toLowerCase().includes(this.queryText.toLowerCase())\n        })\n    }\n    this.searchFilters.specialisationFilters.forEach((filter) => {\n      results = filter.applyFilter(results)\n    })\n    runInAction(() => this.searchResults.specialisationSearchResults = results)\n  }\n\n\n}\n","import { Observer, observer } from 'mobx-react';\nimport React, { useEffect, useCallback, useRef, useState } from 'react';\nimport styled from 'styled-components'\nimport { DragDropContext, DragStart, DropResult } from 'react-beautiful-dnd';\nimport { TermModel } from '../../models/TermModel';\nimport { ICourseGroup, PlannerViewModel } from './PlannerViewModel';\nimport CourseGroupView from './CourseGroupView/CourseGroupView';\nimport YearView from './YearView/YearView';\nimport { CourseModel, CourseStatus } from '../../models/CourseModel';\nimport { Menu, MenuItemProps, Popup } from 'semantic-ui-react';\nimport { Box, boxesIntersect, useSelectionContainer } from 'react-drag-to-select'\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n`\n\nconst YearPlanner = styled.div`\n  display: inherit;\n  overflow: auto;\n`\n\nexport interface IMultiSelectProps {\n  selectedCourses: CourseModel[];\n  draggingCourseId?: string;\n  onCourseClick: (course: CourseModel, event: MouseEvent) => void;\n}\n\nexport interface IContextMenuProps {\n  getContextMenuItems: (course: CourseModel) => MenuItemProps[];\n  isAnyContextOpen: boolean;\n  setIsAnyContextOpen: (b: boolean) => void;\n  currentOpenContextStateSetter: React.MutableRefObject<any>;\n  onCourseContextMenu: (course: CourseModel, contextIsOpenSetter: React.Dispatch<React.SetStateAction<boolean>>, contextPositionRef: React.MutableRefObject<any>, event: MouseEvent) => void;\n}\n\nconst Planner = observer(({ plannerViewModel }: { [key: string]: PlannerViewModel }) => {\n  return <Observer>\n    {() => {\n      useEffect(() => {\n        window.addEventListener(\"keydown\", onWindowKeyDown);\n        window.addEventListener(\"contextmenu\", onWindowContextMenu);\n        window.addEventListener(\"dragenter\", onDragEnter);\n        window.addEventListener(\"dragexit\", onDragExit);\n        window.addEventListener(\"mouseup\", onMouseUp);\n\n        return () => {\n          window.removeEventListener(\"keydown\", onWindowKeyDown);\n          window.removeEventListener(\"contextmenu\", onWindowContextMenu);\n          window.removeEventListener(\"dragenter\", onDragEnter);\n          window.removeEventListener(\"dragexit\", onDragExit);\n          window.removeEventListener(\"mouseup\", onMouseUp);\n        }\n      });\n\n      const courseState = plannerViewModel.courseState;\n      const plannerState = plannerViewModel.plannerState;\n\n      // Drag region selection\n      const [isRegionSelecting, setIsRegionSelecting] = useState(false);\n      const draggableItemRef = useRef<Map<CourseModel, HTMLDivElement>>(new Map<CourseModel, HTMLDivElement>());\n      const draggableBoxRef = useRef<[CourseModel, Box][]>([]);\n\n      const registerDraggable = (courseModel: CourseModel, ref: React.MutableRefObject<HTMLDivElement | null | undefined>) => {\n        if (!ref.current) return;\n        draggableItemRef.current?.set(courseModel, ref.current);\n      }\n\n      const deregisterDraggable = (courseModel: CourseModel) => {\n        draggableItemRef.current?.delete(courseModel);\n      }\n\n      const handleSelectionChange = useCallback((box: Box) => {\n        draggableBoxRef.current\n          .filter(([courseModel, draggableBox]) => {\n            const isSelected: boolean = plannerViewModel.selectedCourses.includes(courseModel);\n            const isIntersecting: boolean = boxesIntersect(box, draggableBox);\n\n            return (isSelected !== isIntersecting);\n          }, [])\n          .forEach(([courseModel, _]) => toggleSelectionInGroup(courseModel));\n      }, []);\n\n      const { DragSelection } = useSelectionContainer({\n        onSelectionStart: () => {\n          setIsRegionSelecting(true);\n          draggableBoxRef.current = [...draggableItemRef.current.entries()].reduce((previous: [CourseModel, Box][], [courseModel, div]) => {\n            const rect = div.getBoundingClientRect();\n            return [\n              ...previous,\n              [courseModel, rect]\n            ];\n          }, []);\n        },\n        onSelectionChange: handleSelectionChange,\n        onSelectionEnd: () => {\n          draggableBoxRef.current = [];\n        }\n      });\n\n      // Dragging\n      const [isDragging, setIsDragging] = React.useState(false);\n      const onDragStart = (initial: DragStart) => {\n        setIsDragging(true);\n        const selected: CourseModel | undefined = plannerViewModel.selectedCourses.find(\n          (course: CourseModel): boolean => course.id === initial.draggableId,\n        );\n\n        if (!selected) plannerViewModel.unselectAllCourses();\n\n        plannerViewModel.draggingCourseId = initial.draggableId;\n\n        const course = courseState.getCourseById(initial.draggableId);\n\n        if (!course) return;\n\n        // Don't calculate validations if we are multi selecting\n        if (plannerViewModel.selectedCourses.length > 1) return;\n\n        plannerViewModel.currentDraggableProps = {\n          ...plannerViewModel.currentDraggableProps,\n          possibleTerms: plannerViewModel.calculateDisplayableTerms().filter(term => {\n            return courseState.getMissingRequirementsWhenAssigningCourseToTerm(course, term).length === 0\n          }),\n          prerequisiteCourseIds: new Set<string>(courseState.getFlattenedPrerequisiteList(course.prerequisites))\n        }\n      }\n\n      const onDragEnd = (result: DropResult) => {\n        const { destination, source } = result;\n        if (!destination || result.reason === \"CANCEL\") {\n          plannerViewModel.draggingCourseId = undefined;\n          return;\n        }\n        if (!plannerViewModel.draggingCourseId) return;\n\n        plannerViewModel.selectedCourses.forEach((course: CourseModel) =>\n          plannerViewModel.setCourseByDroppableId(course, source.droppableId, destination.droppableId)\n        );\n\n        const allGroups = plannerViewModel.getAllGroups();\n        allGroups.forEach((group: ICourseGroup) => {\n          group.courses = group.courses.filter((courseInGroup: CourseModel) =>\n            !plannerViewModel.selectedCourses.find((selectedCourse: CourseModel) =>\n              selectedCourse.id === courseInGroup.id\n            )\n          )\n        })\n        plannerViewModel.spliceByGroupId(destination.droppableId, destination.index, 0, ...plannerViewModel.selectedCourses)\n\n        const draggingCourseIsSelected: boolean = !!plannerViewModel.selectedCourses.find((courseModel) => {\n          return courseModel.id === plannerViewModel.draggingCourseId;\n        });\n        if (!draggingCourseIsSelected) {\n          const courseModel = courseState.getCourseById(plannerViewModel.draggingCourseId);\n          if (courseModel) {\n            plannerViewModel.setCourseByDroppableId(courseModel, source.droppableId, destination.droppableId);\n            plannerViewModel.spliceByGroupId(source.droppableId, source.index, 1);\n            plannerViewModel.spliceByGroupId(destination.droppableId, destination.index + plannerViewModel.selectedCourses.length, 0, courseModel);\n          }\n        }\n\n        plannerViewModel.draggingCourseId = undefined;\n\n        setIsDragging(false);\n\n        plannerViewModel.clearCurrentDraggableProps()\n      }\n\n      const onBeforeCapture = () => {\n        plannerViewModel.currentDraggableProps = {\n          ...plannerViewModel.currentDraggableProps,\n          isDragging: true,\n        }\n      }\n\n      // Multi select\n      const onWindowKeyDown = (event: KeyboardEvent) => {\n        if (event.defaultPrevented) return;\n\n        if (event.key === \"Escape\") plannerViewModel.unselectAllCourses();\n      }\n\n      const onMouseUp = (event: MouseEvent) => {\n        if (isAnyContextOpen) return;\n\n        if (isDragging) return;\n\n        event.preventDefault();\n\n        if (isRegionSelecting) {\n          setIsRegionSelecting(false);\n          return;\n        }\n\n        if (event.button !== 0) return;\n        if (event.ctrlKey) return;\n\n        plannerViewModel.unselectAllCourses();\n      }\n\n      const onDragEnter = (event) => {\n        event.preventDefault();\n      }\n\n      const onDragExit = (event) => {\n        event.preventDefault();\n      }\n\n      const toggleSelection = (course: CourseModel) => {\n        const selectedCourses = plannerViewModel.selectedCourses;\n        const wasSelected: boolean = selectedCourses.includes(course);\n\n        const newCourses = (() => {\n          // Task not previously selected or part of the selected group, now the only selected item\n          if (!wasSelected || selectedCourses.length > 1) {\n            return [course];\n          }\n\n          // Task previously selected but not in a group, clear the selection\n          return [];\n        })();\n\n        plannerViewModel.selectedCourses = newCourses;\n      }\n\n      const toggleSelectionInGroup = (course: CourseModel) => {\n        const selectedCourses = plannerViewModel.selectedCourses;\n        const index: number = selectedCourses.indexOf(course);\n\n        // if not selected - add it to the selected items\n        if (index === -1) {\n          plannerViewModel.selectedCourses = [...selectedCourses, course];\n          return;\n        }\n\n        // it was previously selected and now needs to be removed from the group\n        const newCourses: CourseModel[] = [...selectedCourses];\n        newCourses.splice(index, 1);\n        plannerViewModel.selectedCourses = newCourses;\n      };\n\n      const onCourseClick = (course: CourseModel, event: MouseEvent) => {\n        const wasToggleInSelectionGroupKeyUsed = (event: MouseEvent | KeyboardEvent) => {\n          return navigator.platform.includes('Mac')\n            ? event.metaKey\n            : event.ctrlKey;\n        };\n\n        if (event.defaultPrevented) return;\n\n        if (event.button !== 0) return;\n\n        if (isRegionSelecting) return;\n\n        event.preventDefault();\n        if (isAnyContextOpen) return;\n\n        if (wasToggleInSelectionGroupKeyUsed(event)) {\n          toggleSelectionInGroup(course);\n          return;\n        }\n\n        toggleSelection(course);\n      }\n\n      // Context Menu\n      const getContextMenuItems = (course?: CourseModel): MenuItemProps[] => {\n        const areMultipleItems = plannerViewModel.selectedCourses.length > 1;\n        const menuItems: { [key: string]: MenuItemProps } = {\n          remove: {\n            key: 'remove',\n            content: `Remove ${areMultipleItems ? \"all courses\" : \"course\"}`,\n            icon: 'delete calendar',\n            onClick: () => {\n              const moveSelectedToRemoved = () => {\n                plannerViewModel.selectedCourses.forEach((courseModel) => courseModel.setUnplanned());\n                plannerViewModel.unselectAllCourses();\n              }\n              if (!course) {\n                moveSelectedToRemoved();\n              } else {\n                if (plannerViewModel.selectedCourses.includes(course)) moveSelectedToRemoved();\n                course.setUnplanned();\n              }\n            }\n          },\n          plan: {\n            key: 'plan',\n            content: `Move ${areMultipleItems ? \"all courses\" : \"course\"} to planned`,\n            icon: 'bookmark',\n            onClick: () => {\n              const moveSelectedToPlanned = () => {\n                plannerViewModel.selectedCourses.forEach((courseModel) => courseModel.setPlanned());\n              }\n              if (!course) {\n                moveSelectedToPlanned();\n              } else {\n                if (plannerViewModel.selectedCourses.includes(course)) moveSelectedToPlanned();\n                course.setPlanned();\n              }\n            }\n          },\n          complete: {\n            key: 'complete',\n            content: `Move ${areMultipleItems ? \"all courses\" : \"course\"} to completed`,\n            icon: 'checked calendar',\n            onClick: () => {\n              const moveSelectedToCompleted = () => {\n                plannerViewModel.selectedCourses.forEach((courseModel) => courseModel.setCompleted());\n              }\n              if (!course) {\n                moveSelectedToCompleted();\n              } else {\n                if (plannerViewModel.selectedCourses.includes(course)) moveSelectedToCompleted();\n                course.setCompleted();\n              }\n            }\n          },\n        };\n        if (course) {\n          if (course.courseStatus === CourseStatus.UNPLANNED) {\n            const { remove, ...items } = menuItems;\n            return Object.values(items);\n          } else if (course.courseStatus === CourseStatus.PLANNED) {\n            const { plan, ...items } = menuItems;\n            return Object.values(items);\n          } else if (course.courseStatus === CourseStatus.COMPLETED) {\n            const { complete, ...items } = menuItems;\n            return Object.values(items);\n          }\n        }\n        return Object.values(menuItems);\n      }\n\n      const [isAnyContextOpen, setIsAnyContextOpen] = React.useState(false);\n      const [isWindowContextOpen, setIsWindowContextOpen] = React.useState(false);\n\n      const currentOpenContextStateSetter = React.useRef<React.Dispatch<React.SetStateAction<boolean>>>();\n\n      const contextRef = React.useRef<any>();\n\n      const onWindowContextMenu = (event) => {\n        if (event.defaultPrevented) return;\n\n        // Don't use context when no items selected. Possibly change this.\n        if (plannerViewModel.selectedCourses.length === 0) return;\n\n        event.preventDefault();\n\n        if (isAnyContextOpen && currentOpenContextStateSetter.current) {\n          currentOpenContextStateSetter.current(false);\n        }\n\n        currentOpenContextStateSetter.current = setIsWindowContextOpen;\n\n        contextRef.current = {\n          getBoundingClientRect: () => ({\n            left: event.clientX,\n            top: event.clientY,\n            right: event.clientX + 1,\n            bottom: event.clientY + 1,\n            height: 0,\n            width: 0,\n          }),\n        }\n        setIsAnyContextOpen(true)\n        setIsWindowContextOpen(true)\n      }\n\n      const onCourseContextMenu = (\n        course: CourseModel,\n        contextIsOpenSetter: React.Dispatch<React.SetStateAction<boolean>>,\n        contextPositionRef: React.MutableRefObject<any>,\n        event: MouseEvent\n      ) => {\n        event.preventDefault()\n\n        if (isAnyContextOpen && currentOpenContextStateSetter.current) {\n          currentOpenContextStateSetter.current(false);\n        }\n\n        currentOpenContextStateSetter.current = contextIsOpenSetter;\n\n        contextPositionRef.current = {\n          getBoundingClientRect: () => ({\n            left: event.clientX,\n            top: event.clientY,\n            right: event.clientX + 1,\n            bottom: event.clientY + 1,\n            height: 0,\n            width: 0,\n          }),\n        }\n\n        // If course not in selectedCourses, toggle selection\n        if (!plannerViewModel.selectedCourses.find((selectedCourse: CourseModel) => selectedCourse.id === course.id)) {\n          toggleSelection(course);\n        }\n\n        setIsAnyContextOpen(true);\n      }\n\n      const multiSelectProps: IMultiSelectProps = {\n        selectedCourses: plannerViewModel.selectedCourses,\n        draggingCourseId: plannerViewModel.draggingCourseId,\n        onCourseClick: onCourseClick,\n      };\n\n      const contextMenuProps: IContextMenuProps = {\n        getContextMenuItems: getContextMenuItems,\n        isAnyContextOpen: isAnyContextOpen,\n        setIsAnyContextOpen: setIsAnyContextOpen,\n        currentOpenContextStateSetter: currentOpenContextStateSetter,\n        onCourseContextMenu: onCourseContextMenu,\n      }\n\n      return (\n        <React.Fragment>\n          <DragSelection />\n          <Popup\n            basic\n            context={contextRef}\n            onClose={() => {\n              setIsAnyContextOpen(false)\n              setIsWindowContextOpen(false)\n            }}\n            open={isWindowContextOpen}\n          >\n            <Menu\n              items={getContextMenuItems()}\n              onItemClick={(e) => {\n                e.preventDefault();\n                setIsAnyContextOpen(false)\n                setIsWindowContextOpen(false)\n              }}\n              secondary\n              vertical\n            />\n          </Popup>\n          <DragDropContext\n            onBeforeCapture={onBeforeCapture}\n            onDragStart={onDragStart}\n            onDragEnd={onDragEnd}\n          >\n            {\n              <CourseGroupView\n                horizontal={true}\n                key={plannerState.completedGroup.id}\n                id={plannerState.completedGroup.id}\n                title={plannerState.completedGroup.title}\n                term={null}\n                courses={plannerState.completedGroup.courses}\n                currentDraggableProps={plannerViewModel.currentDraggableProps}\n                multiSelect={multiSelectProps}\n                contextMenu={contextMenuProps}\n                isRegionSelecting={isRegionSelecting}\n                registerDraggableRef={registerDraggable}\n                deregisterDraggableRef={deregisterDraggable}\n              />\n            }\n            <Container>\n              {\n                <CourseGroupView\n                  horizontal={false}\n                  key={plannerState.plannedGroup.id}\n                  id={plannerState.plannedGroup.id}\n                  title={plannerState.plannedGroup.title}\n                  term={null}\n                  courses={plannerState.plannedGroup.courses}\n                  currentDraggableProps={plannerViewModel.currentDraggableProps}\n                  multiSelect={multiSelectProps}\n                  contextMenu={contextMenuProps}\n                  isRegionSelecting={isRegionSelecting}\n                  registerDraggableRef={registerDraggable}\n                  deregisterDraggableRef={deregisterDraggable}\n                />\n              }\n              <YearPlanner>\n                {\n                  plannerState.yearGroups.map(yearGroup => {\n                    return <YearView\n                      id={yearGroup.id}\n                      title={yearGroup.title}\n                      year={yearGroup.year}\n                      courseGroups={yearGroup.courseGroups}\n                      currentDraggableProps={plannerViewModel.currentDraggableProps}\n                      multiSelect={multiSelectProps}\n                      contextMenu={contextMenuProps}\n                      isRegionSelecting={isRegionSelecting}\n                      registerDraggableRef={registerDraggable}\n                      deregisterDraggableRef={deregisterDraggable}\n                    />\n                  })\n                }\n              </YearPlanner>\n            </Container>\n            {\n              plannerViewModel.currentDraggableProps.isDragging\n                ?\n                <CourseGroupView\n                  horizontal={true}\n                  key={\"trash\"}\n                  id={\"trash\"}\n                  title={\"Remove\"}\n                  term={null}\n                  courses={[]}\n                  currentDraggableProps={plannerViewModel.currentDraggableProps}\n                  multiSelect={multiSelectProps}\n                  contextMenu={contextMenuProps}\n                  isRegionSelecting={isRegionSelecting}\n                  registerDraggableRef={registerDraggable}\n                  deregisterDraggableRef={deregisterDraggable}\n                />\n                : <></>\n            }\n          </DragDropContext>\n        </React.Fragment>\n      )\n    }}\n  </Observer >\n})\n\nexport default Planner;\n","import { action, computed, makeObservable, observable } from \"mobx\";\nimport { CourseModel, CourseStatus } from \"../../models/CourseModel\";\nimport { TermModel } from \"../../models/TermModel\";\nimport { CourseState } from \"../../states/CourseState\";\n\nexport interface ICourseGroup {\n  id: string,\n  title: string,\n  term: TermModel | null,\n  courses: CourseModel[],\n}\n\nexport interface IYearGroup {\n  id: string,\n  year: number\n  title: string,\n  courseGroups: ICourseGroup[],\n}\n\nexport interface IPlannerState {\n  id: string,\n  title: string,\n  allocatedGroups: ICourseGroup[],\n  yearGroups: IYearGroup[],\n  completedGroup: ICourseGroup,\n  plannedGroup: ICourseGroup,\n}\n\nexport interface ICurrentDraggableProps {\n  isDragging: boolean,\n  possibleTerms: TermModel[]\n  prerequisiteCourseIds: Set<string>\n}\n\nexport class PlannerViewModel {\n  constructor(courseState: CourseState) {\n    makeObservable<PlannerViewModel,\n      \"_currentDraggableProps\"\n    >(this, {\n      _currentDraggableProps: observable,\n      currentDraggableProps: computed,\n      clearCurrentDraggableProps: action,\n    })\n\n    this._courseState = courseState\n    this._plannerState = {\n      id: \"plannerState\",\n      title: \"Visualizer\",\n      allocatedGroups: [],\n      yearGroups: [],\n      completedGroup: {\n        id: \"completed\",\n        title: \"Completed\",\n        term: null,\n        courses: [],\n      },\n      plannedGroup: {\n        id: \"planned\",\n        title: \"Planned\",\n        term: null,\n        courses: [],\n      },\n    }\n\n    makeObservable<PlannerViewModel,\n      \"_selectedCourses\"\n    >(this, {\n      _selectedCourses: observable,\n      selectedCourses: computed,\n    });\n\n    makeObservable<PlannerViewModel,\n      \"_draggingCourseId\"\n    >(this, {\n      _draggingCourseId: observable,\n      draggingCourseId: computed,\n    });\n  }\n\n  private _courseState: CourseState\n  get courseState(): CourseState {\n    return this._courseState\n  }\n\n  private _plannerState: IPlannerState\n  get plannerState(): IPlannerState {\n    this.synchronizePlannerState()\n    return this._plannerState\n  }\n\n  //#region selectedCourses\n\n  private _selectedCourses: CourseModel[] = [];\n\n  get selectedCourses(): CourseModel[] {\n    return this._selectedCourses;\n  }\n\n  set selectedCourses(state: CourseModel[]) {\n    this._selectedCourses = state;\n  }\n\n  unselectAllCourses() {\n    this.selectedCourses = [];\n  }\n\n  //#endregion\n\n  setCourseByDroppableId(course: CourseModel, sourceDroppableId: string, destDroppableId: string) {\n    if (sourceDroppableId === destDroppableId) return;\n\n    if (destDroppableId === \"trash\") {\n      course.setUnplanned()\n    } else if (destDroppableId === \"completed\") {\n      course.setCompleted()\n    } else if (destDroppableId === \"planned\") {\n      course.setPlanned()\n    } else {\n      course.setAllocated(TermModel.fromMappingName(destDroppableId))\n    }\n  }\n\n  //#region draggingCourseId\n\n  private _draggingCourseId: undefined | string = undefined;\n  get draggingCourseId(): undefined | string {\n    return this._draggingCourseId;\n  }\n  set draggingCourseId(id: undefined | string) {\n    this._draggingCourseId = id;\n  }\n\n  //#endregion\n\n  private synchronizeCourseList(referenceCourses: CourseModel[], targetCourses: CourseModel[]): void {\n    let expectedCourses = new Set(referenceCourses)\n    let actualCourses = new Set(targetCourses)\n\n    let coursesToRemove = new Set([...actualCourses].filter(course => !expectedCourses.has(course)))\n    let coursesToAdd = new Set([...expectedCourses].filter(course => !actualCourses.has(course)))\n\n    coursesToRemove.forEach(course => {\n      let index = targetCourses.indexOf(course)\n      targetCourses.splice(index, 1)\n    })\n\n    coursesToAdd.forEach(course => {\n      targetCourses.push(course)\n    })\n  }\n\n  calculateDisplayableTerms(): TermModel[] {\n    let maxAllocatedYear = this._courseState.getMaxAllocatedYear\n    const currentYear = new Date().getFullYear()\n    let displayableTerms: TermModel[] = []\n    for (let year: number = currentYear; year <= maxAllocatedYear + 1; ++year) {\n      displayableTerms.push(new TermModel(year, \"Summer Term\"))\n      displayableTerms.push(new TermModel(year, \"Term 1\"))\n      displayableTerms.push(new TermModel(year, \"Term 2\"))\n      displayableTerms.push(new TermModel(year, \"Term 3\"))\n    }\n    return displayableTerms\n  }\n\n  synchronizePlannerState(): void {\n    const displayableTerms = this.calculateDisplayableTerms()\n    const uniqueYears = [...new Set(displayableTerms.map(term => term.year))].sort()\n    const allocatedGroups: ICourseGroup[] = displayableTerms.map((term: TermModel) => {\n      return {\n        id: term.getMappingName,\n        title: term.getFullName,\n        term: term,\n        courses: this._plannerState.allocatedGroups.find(group => group.id === term.getMappingName)?.courses ?? [],\n      }\n    })\n    let newPlannerState: IPlannerState = {\n      ...this._plannerState,\n      allocatedGroups: allocatedGroups,\n      yearGroups: uniqueYears.map((year: number) => {\n        return {\n          id: `yearGroup_${year.toString()}`,\n          title: year.toString(),\n          year: year,\n          courseGroups: allocatedGroups.filter(group => group.term?.year === year) ?? [],\n        }\n      }),\n    }\n\n    newPlannerState.allocatedGroups.forEach((courseGroup: ICourseGroup) => {\n      this.synchronizeCourseList(this._courseState.termCourseMap.get(courseGroup.id) ?? [], courseGroup.courses)\n    })\n\n    newPlannerState.yearGroups.forEach(yearGroup => {\n      yearGroup.courseGroups.forEach((courseGroup: ICourseGroup) => {\n        this.synchronizeCourseList(this._courseState.termCourseMap.get(courseGroup.id) ?? [], courseGroup.courses)\n      })\n    })\n\n    this.synchronizeCourseList(this._courseState.plannedCourses, newPlannerState.plannedGroup.courses)\n    this.synchronizeCourseList(this._courseState.completedCourses, newPlannerState.completedGroup.courses)\n    this._plannerState = newPlannerState\n  }\n\n  private getCourseGroupById(groupId: string): ICourseGroup | undefined {\n    if (this._plannerState.completedGroup.id === groupId) {\n      return this._plannerState.completedGroup\n    } else if (this._plannerState.plannedGroup.id === groupId) {\n      return this._plannerState.plannedGroup\n    } else {\n      return this._plannerState.allocatedGroups.find(group => group.id === groupId)\n    }\n  }\n\n  getAllGroups(): ICourseGroup[] {\n    return [this._plannerState.completedGroup, this._plannerState.plannedGroup, ...this._plannerState.allocatedGroups];\n  }\n\n  spliceByGroupId(droppableId: string, start: number, deleteCount?: number): CourseModel[];\n\n  spliceByGroupId(droppableId: string, start: number, deleteCount: number, ...items: CourseModel[]): CourseModel[];\n\n  spliceByGroupId(droppableId: string, start: number, deleteCount?: number, ...items: CourseModel[]): CourseModel[] {\n    const group = this.getCourseGroupById(droppableId);\n    if (!group) return [];\n\n    if (deleteCount) {\n      return group.courses.splice(start, deleteCount, ...items)\n    } else {\n      return group.courses.splice(start, 0, ...items);\n    }\n  }\n\n  //#region currentDraggableProps\n\n  private _currentDraggableProps: ICurrentDraggableProps = {\n    isDragging: false,\n    possibleTerms: [],\n    prerequisiteCourseIds: new Set<string>(),\n  }\n\n  get currentDraggableProps(): ICurrentDraggableProps {\n    return { ...this._currentDraggableProps }\n  }\n\n  set currentDraggableProps(props: ICurrentDraggableProps) {\n    this._currentDraggableProps = props;\n  }\n\n  clearCurrentDraggableProps(): void {\n    this.currentDraggableProps = {\n      isDragging: false,\n      possibleTerms: [],\n      prerequisiteCourseIds: new Set<string>(),\n    }\n  }\n\n  //#endregion\n\n}\n","import { ConditionalTree, isAndConditionalTree, isOrConditionalTree } from \"../interfaces/ModelInterfaces\";\n\n\nexport const conditionalTreeTraverser = (\n  treeNode: ConditionalTree,\n  fnIsLeafValid: (treeNode: ConditionalTree) => boolean,\n): string[] => {\n  let invalidations: string[] = [];\n\n  if (isOrConditionalTree(treeNode)) {\n    for (let childNode of treeNode.or) {\n      let result = conditionalTreeTraverser(childNode, fnIsLeafValid)\n      if (result.length === 0) {\n        invalidations = []\n        break\n      }\n      invalidations.push(...result)\n    }\n  } else if (isAndConditionalTree(treeNode)) {\n    treeNode.and.forEach(childNode => {\n      invalidations.push(...conditionalTreeTraverser(childNode, fnIsLeafValid))\n    })\n  } else if (!fnIsLeafValid(treeNode)) {\n    invalidations.push(treeNode)\n  }\n  // console.log(treeNode)\n  // console.log(invalidations)\n  return invalidations\n}\n","import { action, makeAutoObservable, reaction, transaction, when } from \"mobx\";\nimport { conditionalTreeTraverser } from '../helpers/ConditionalTreeTraverser';\nimport { ConditionalTree, StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { CourseModel, CourseStatus } from \"../models/CourseModel\";\nimport { SerializedCourseState, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\nimport { TermModel } from \"../models/TermModel\";\nimport { getCourseValidations } from \"../models/Validations/Validations\";\nimport { UserState } from \"./UserState\";\nimport axios from \"axios\"\n\nexport class CourseState implements ISerializableEntity {\n  constructor(\n    private _userState: UserState\n  ) {\n    makeAutoObservable(this)\n    reaction(\n      () => this._userState.studyLevel,\n      () => {\n        this._isUpdated = false;\n        this._updateStudyLevel()\n          // .then(() => {\n          //   // this.getCourseById(\"COMP1511\")?.setCompleted()\n    \n          //   this.getCourseById(\"COMP1521\")?.setPlanned()\n    \n          //   this.getCourseById(\"COMP3231\")?.setPlanned()\n          //   let COMP9444 = this.getCourseById(\"COMP9444\")\n          //   if (COMP9444) {\n          //     this.assignCourseToTerm(COMP9444, new TermModel(2021, \"Term 3\"))\n          //   }\n          //   let MATH1081 = this.getCourseById(\"MATH1081\")\n          //   if (MATH1081) {\n          //     this.assignCourseToTerm(MATH1081, new TermModel(2021, \"Term 2\"))\n          //   }\n          //   let COMP2041 = this.getCourseById(\"COMP2041\")\n          //   if (COMP2041) {\n          //     this.assignCourseToTerm(COMP2041, new TermModel(2021, \"Term 2\"))\n          //   }\n          //   let COMP9417 = this.getCourseById(\"COMP9417\")\n          //   if (COMP9417) {\n          //     this.assignCourseToTerm(COMP9417, new TermModel(2022, \"Term 3\"))\n          //   }\n          //   let MATH1231 = this.getCourseById(\"MATH1231\")\n          //   if (MATH1231) {\n          //     this.assignCourseToTerm(MATH1231, new TermModel(2021, \"Term 3\"))\n          //   }\n          // })\n      },\n      { fireImmediately: true }\n    );\n    _userState.registerStudyLevelUpdateActionCallback(() => Promise.resolve(this._updateStudyLevel()));\n  }\n\n  private validations = getCourseValidations(this)\n\n  private coursesMapById = new Map<string, CourseModel>();\n\n  private coursesMapByActiveStatus = new Map<CourseStatus, Map<string, CourseModel>>();\n\n  private _isUpdated: boolean = false;\n\n  get isUpdated(): boolean {\n    return this._isUpdated;\n  }\n\n  get allCourses() {\n    return [...this.coursesMapById.values()]\n  }\n\n  private _resetCourseMap() {\n    this.coursesMapById = new Map<string, CourseModel>();\n    this.coursesMapByActiveStatus = new Map<CourseStatus, Map<string, CourseModel>>();\n    this.coursesMapByActiveStatus.set(CourseStatus.UNPLANNED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.PLANNED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.ALLOCATED, new Map<string, CourseModel>());\n    this.coursesMapByActiveStatus.set(CourseStatus.COMPLETED, new Map<string, CourseModel>());\n  }\n\n  private async _loadAllCourses(studyLevel: StudyLevel) {\n    return axios.get(`https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_courses.json`)\n      .then(response => {\n        transaction(() => {\n          this._resetCourseMap()\n          response.data.forEach(courseObj => {\n            let course = new CourseModel(\n              courseObj.code,\n              courseObj.contentTypeLabel,\n              courseObj.corequisites,\n              courseObj.creditPoints,\n              courseObj.description,\n              courseObj.effectiveDate,\n              courseObj.enrolmentRules,\n              courseObj.exclusion,\n              courseObj.facultyName,\n              courseObj.implementationYear,\n              courseObj.keywords,\n              courseObj.prerequisites,\n              courseObj.schoolName,\n              courseObj.studyLevel,\n              courseObj.termOffering,\n              courseObj.title,\n              courseObj.urlMap,\n            )\n\n            this.addCourse(course)\n          })\n        })\n    });\n  }\n\n  private async _updateStudyLevel() {\n    await this._loadAllCourses(this._userState.studyLevel);\n    this._isUpdated = true;\n  }\n\n  get termCourseMap(): Map<string, CourseModel[]> {\n    // console.log('running mapping')\n    let mapping = new Map<string, CourseModel[]>();\n    this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.forEach(course => {\n      if (!course.allocatedTerm) {\n        return;\n      }\n      let courseList = mapping.get(course.allocatedTerm.getMappingName)\n      if (!courseList) {\n        mapping.set(course.allocatedTerm.getMappingName, [course])\n      } else {\n        courseList.push(course)\n      }\n    })\n    return mapping\n  }\n\n  get completedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.COMPLETED)?.values() ?? []]\n  }\n\n  get plannedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.PLANNED)?.values() ?? []]\n  }\n\n  get allocatedCourses(): CourseModel[] {\n    return [...this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.values() ?? []]\n  }\n\n  get activeCourses(): CourseModel[] {\n    let allCourses: CourseModel[] = [];\n    allCourses = allCourses.concat(this.completedCourses, this.plannedCourses, this.allocatedCourses);\n    return allCourses;\n  }\n\n  get getMaxAllocatedYear(): number {\n    const uniqueTerms = [...this.termCourseMap.keys()]\n    let maxYear = new Date().getFullYear()\n    if (uniqueTerms.length > 0) {\n      maxYear = TermModel.fromMappingName(uniqueTerms.sort().slice(-1)[0]).year\n    }\n    return maxYear\n  }\n\n  getCourseById(id: string): CourseModel | undefined {\n    return this.coursesMapById.get(id)\n  }\n\n  addCourse(course: CourseModel) {\n    this.coursesMapById.set(course.id, course);\n    reaction(() => course.courseStatus, () => {\n      for (let courseStatusEnum in CourseStatus) {\n        if (!isNaN(Number(courseStatusEnum))) continue\n        const courseStatus: CourseStatus = CourseStatus[courseStatusEnum as keyof typeof CourseStatus]\n        if (courseStatus !== course.courseStatus) {\n          this.coursesMapByActiveStatus.get(courseStatus)?.delete(course.id)\n        } else {\n          this.coursesMapByActiveStatus.get(courseStatus)?.set(course.id, course)\n        }\n      }\n    }, {\n      fireImmediately: true,\n    })\n\n    reaction(() => course.courseStatus, () => {\n      this.runValidations();\n    }, {\n      fireImmediately: true,\n    })\n\n    reaction(() => course.allocatedTerm, () => {\n      this.runValidations();\n    }, {\n      fireImmediately: true,\n    })\n  }\n\n  runValidations() {\n    transaction(() => {\n      this.coursesMapByActiveStatus.get(CourseStatus.PLANNED)?.forEach(_course => {\n        _course.clearErrors()\n        this.validations.forEach(fnValidate => {\n          fnValidate(_course)\n        })\n      })\n      this.coursesMapByActiveStatus.get(CourseStatus.ALLOCATED)?.forEach(_course => {\n        _course.clearErrors()\n        this.validations.forEach(fnValidate => {\n          fnValidate(_course)\n        })\n      })\n      this.coursesMapByActiveStatus.get(CourseStatus.COMPLETED)?.forEach(_course => {\n        _course.clearErrors()\n      })\n    })\n  }\n\n  private resetHard() {\n    [...this.coursesMapById.values()].forEach((course) => {\n      course.setUnplanned();\n    });\n  }\n\n  getFlattenedPrerequisiteList(prerequisiteTree: ConditionalTree) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      return false\n    })\n  }\n\n  getMissingPrerequisitesBeforeTerm(prerequisiteTree: ConditionalTree, term: TermModel) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      if (typeof (treeNode) === 'string') {\n        const courseCode: string = treeNode;\n        const course = this.getCourseById(courseCode)\n\n        return course\n          ? ((course.courseStatus === CourseStatus.ALLOCATED && course.allocatedTerm?.isBefore(term))\n            || course.courseStatus === CourseStatus.COMPLETED)\n          : false\n      }\n      return true\n    })\n  }\n\n  getMissingPrerequisitesPlanned(prerequisiteTree: ConditionalTree) {\n    return conditionalTreeTraverser(prerequisiteTree, (treeNode: ConditionalTree) => {\n      if (typeof (treeNode) === 'string') {\n        const courseCode: string = treeNode;\n        const course = this.getCourseById(courseCode)\n        return course\n          ? course.courseStatus !== CourseStatus.UNPLANNED\n          : false\n      }\n      return true\n    })\n  }\n\n  courseIsOffered(term: TermModel, termOffering: string[]): boolean {\n    for (let i = 0; i < termOffering.length; i++) {\n      if (term.getTermName === termOffering[i]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getMissingRequirementsWhenAssigningCourseToTerm(course: CourseModel, term: TermModel): string[] {\n    let resp: string[] = this.getMissingPrerequisitesBeforeTerm(course.prerequisites, term)\n\n    // term = current term input, termOffering = List of avaliable terms\n    if (!this.courseIsOffered(term, course.termOffering)) {\n      resp.push(`Course is not offered in ${term.getFullName}`)\n    }\n\n    return resp\n  }\n\n  assignCourseToTerm(course: CourseModel, term: TermModel): boolean {\n    const invalidations = this.getMissingRequirementsWhenAssigningCourseToTerm(course, term)\n    if (invalidations.length === 0) {\n      course.setAllocated(term)\n      return true\n    }\n\n    return false\n  }\n\n  serialize(): SerializedCourseState {\n    return {\n      courses: this.activeCourses.map((courseModel) => {\n        return courseModel.serialize();\n      })\n    }\n  }\n\n  async deserialize(json: TermtanglesSerialized): Promise<void> {\n    if (!json.courseState) {\n      return;\n    }\n\n    const serializedCourseState = json.courseState;\n    if (!serializedCourseState.courses) {\n      return;\n    }\n\n    await when(() => { return this._isUpdated; })\n\n    this.resetHard();\n\n    serializedCourseState.courses.forEach((serializedCourse) => {\n      if (!serializedCourse.id) return;\n\n      const courseModel = this.getCourseById(serializedCourse.id);\n      if (courseModel) {\n        courseModel.deserialize(serializedCourse);\n      } else {\n        console.error(`ERROR: ${serializedCourse.id} is not a valid course.`);\n      }\n    });\n  }\n}\n","import { ErrorCode } from \"../../interfaces/ModelInterfaces\"\nimport { CourseState } from \"../../states/CourseState\"\nimport { CourseModel, CourseStatus } from \"../CourseModel\"\n\nexport const getCourseValidations = (courseState: CourseState): ((course: CourseModel) => void)[] => {\n  const validations = [\n    (course: CourseModel) => {\n      // console.log(`Running validation COURSE_NOT_OFFERED_IN_SELECTED_TERM on course ${course.code}`)\n      if (course.allocatedTerm && !course.termOffering.includes(course.allocatedTerm.getTermName)) {\n        course.addError({\n          code: ErrorCode.COURSE_NOT_OFFERED_IN_SELECTED_TERM,\n          message: `This course is not offered in ${course.allocatedTerm.getTermName}`,\n          missing: \"\"\n        })\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation PREREQUISITE_REQUIREMENT_NOT_MET on course ${course.code}`)\n      if (course.allocatedTerm) {\n        let missing = courseState.getMissingPrerequisitesBeforeTerm(course.prerequisites, course.allocatedTerm)\n        if (missing.length > 0) {\n          course.addError({\n            code: ErrorCode.PREREQUISITE_REQUIREMENT_NOT_MET,\n            message: `The prerequisites for this course are not satisfied\\n${course.enrolmentRules.join(\";\")}`,\n            missing: `Missing: ${missing}`\n          })\n        }\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation PREREQUISITES_NOT_PLANNED on course ${course.code}`)\n      if (course.courseStatus !== CourseStatus.ALLOCATED) {\n        let missing = courseState.getMissingPrerequisitesPlanned(course.prerequisites)\n        if (missing.length > 0) {\n          course.addError({\n            code: ErrorCode.PREREQUISITES_NOT_PLANNED,\n            message: `A valid combination of prerequisites for this course have not been planned\\n${course.enrolmentRules.join(\";\")}`,\n            missing: `Missing: ${missing}`\n          })\n        }\n      }\n    },\n    (course: CourseModel) => {\n      // console.log(`Running validation EXCLUSION_COURSE_CONFLICT on course ${course.code}`)\n      let conflictingExclusionCourses: string[] = []\n      course.exclusion.forEach((exclusionCourseCode) => {\n        let exclusionCourse = courseState.getCourseById(exclusionCourseCode)\n        if (exclusionCourse && exclusionCourse.courseStatus !== CourseStatus.UNPLANNED) {\n          conflictingExclusionCourses.push(exclusionCourseCode)\n        }\n      })\n      if (conflictingExclusionCourses.length > 0) {\n        course.addError({\n          code: ErrorCode.EXCLUSION_COURSE_CONFLICT,\n          message: `The following exclusion courses conflict with this course ${conflictingExclusionCourses.join(\", \")}`,\n          missing: \"\"\n        })\n      }\n    }\n  ]\n  return validations\n}\n","import { ICurriculumContainer, ICurriculumElement } from \"../interfaces/ModelInterfaces\";\nimport {v4 as uuidv4} from 'uuid';\n\nexport class CurriculumContainer implements ICurriculumContainer {\n    public readonly id: string = uuidv4();\n    constructor(\n        public readonly title: string,\n        public readonly description: string,\n        public readonly creditPoints: number,\n        public readonly elements: ICurriculumElement[],\n        public readonly containers: ICurriculumContainer[],\n        public readonly order: number,\n    ) {\n    }\n\n    toString() {\n        return this.title + ', ' + this.description;\n    }\n}\n\nexport class CurriculumElement implements ICurriculumElement {\n    constructor(\n        public readonly name: string,\n        public readonly description: string,\n        public readonly type: string,\n        public readonly creditPoints: number,\n        public readonly itemCode: string,\n        public readonly url: string,\n        public readonly order: number,\n    ) { }\n\n    public isCourse(): boolean {\n        return this.type.toLowerCase() === \"course\"\n    }\n\n    public isSpecialisation(): boolean {\n        return [\"major\", \"minor\", \"specialisation\", \"honours\"].includes(this.type.toLowerCase())\n    }\n\n    toString() {\n        return this.name + ', ' + this.type;\n    }\n}\n\n// Arg: Array of json data where each json contains data for Children Obj\nexport const parseCurriculumContainers = (childrenData: Array<any>): Array<CurriculumContainer> => {\n    let rootContainerList: CurriculumContainer[] = [];\n    \n    childrenData.forEach((data) => {\n        let childContainerList: CurriculumContainer[] = [];\n        let elementList: CurriculumElement[] = [];\n        // If nested children containers exist, recursively transform jsonData \n        // into Children obj\n        if (data.children.length > 0) {\n            childContainerList = parseCurriculumContainers(data.children);\n        }\n\n        if (data.relationships.length > 0) {\n            elementList = parseCurriculumElements(data.relationships);\n        }\n\n        let container = new CurriculumContainer(\n            data.title,\n            data.description,\n            Number(data.creditPoints),\n            elementList,\n            childContainerList,\n            Number(data.order)\n        );\n\n        rootContainerList.push(container);\n    })\n\n    return rootContainerList;\n}\n\n// Arg: Array of json data where each json contains data for Relationship obj\nexport const parseCurriculumElements = (relationData: Array<any>): Array<CurriculumElement> => {\n    let relationshipList: CurriculumElement[] = [];\n\n    relationData.forEach((data) => {\n        let relationshipObj = new CurriculumElement(\n            data.name,\n            data.description,\n            data.type,\n            Number(data.creditPoints),\n            data.itemCode,\n            data.url,\n            Number(data.order)\n        )\n\n        relationshipList.push(relationshipObj);\n    })\n\n    return relationshipList;\n}\n","import { makeAutoObservable } from 'mobx';\nimport { ICurriculumContainer, IProgram, IProgressionEntity, ProgressionStatus } from '../interfaces/ModelInterfaces';\nimport { SerializedProgram, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\n\nexport class ProgramModel implements IProgram, IProgressionEntity, ISerializableEntity {\n  public readonly id: string\n  public progressionStatus: ProgressionStatus = ProgressionStatus.UNPLANNED\n\n  constructor(\n    public readonly code: string,\n    public readonly title: string,\n    public readonly academicItemType: string,\n    public readonly additionalInfo: string,\n    public readonly creditPoints: number,\n    public readonly structureSummary: string,\n    public readonly curriculumStructure: Array<ICurriculumContainer>,\n    public readonly description: string,\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly intakePeriod: Array<string>,\n    public readonly programConstraints: Array<any>,\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code\n    makeAutoObservable(this)\n  }\n\n  setPlanned() {\n    this.progressionStatus = ProgressionStatus.PLANNED\n  }\n\n  setUnplanned() {\n    this.progressionStatus = ProgressionStatus.UNPLANNED\n  }\n\n  serialize(): SerializedProgram {\n    return {\n      id: this.code,\n    };\n  }\n\n  async deserialize(program: SerializedProgram): Promise<void> {\n    if (program.id !== this.id) {\n      console.error(`ERROR: This program is not ${program.id} (is: ${this.id})`);\n      return;\n    }\n    \n    this.setPlanned();\n  }\n\n  toString() {\n    return `[PROGRAM_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadProgramByCode(programCode: string) {\n//     return db.collection(\"programs\")\n//         .doc(programCode)!\n//         .withConverter(programConverter)\n//         .get().then((doc) => {\n//             if (doc.exists) {\n//                 var program = doc.data()!;\n\n//                 return program;\n//             } else {\n//                 console.log(\"No such document!\");\n//             }\n//         }).catch((error) => {\n//             console.log(\"Error getting document:\", error);\n//             throw new Error();\n//         });\n// }\n\n// let programConverter = {\n//     toFirestore: function (program) {\n//         return {\n//             name: program.code,\n//         };\n//     },\n//     fromFirestore: function (snapshot, options) {\n//         const data = snapshot.data(options);\n\n//         return new ProgramModel(\n//             data.academicItemType,\n//             data.additionalInformation,\n//             data.code,\n//             Number(data.creditPoints),\n//             parseCurriculumContainers(data.curriculumStructure),\n//             data.description,\n//             data.facultyName,\n//             Number(data.implementationYear),\n//             data.intakePeriod,\n//             data.programConstraints,\n//             data.schoolName,\n//             data.studyLevel,\n//             data.title,\n//             data.urlMap\n//         );\n//     }\n// };","import { makeAutoObservable } from 'mobx';\nimport { ICurriculumContainer, IProgressionEntity, ISpecialisation, ProgressionStatus } from '../interfaces/ModelInterfaces';\nimport { SerializedSpecialisation, ISerializableEntity } from \"../interfaces/SerializableInterfaces\"\n\nexport class SpecialisationModel implements ISpecialisation, IProgressionEntity, ISerializableEntity {\n  public readonly id: string\n  public progressionStatus: ProgressionStatus = ProgressionStatus.UNPLANNED\n\n  constructor(\n    public readonly code: string,\n    public readonly title: string,\n    public readonly academicItemType: string,\n    public readonly creditPoints: number,\n    public readonly structureSummary: string,\n    public readonly curriculumStructure: Array<ICurriculumContainer>,\n    public readonly description: string,\n    public readonly facultyName: string,\n    public readonly implementationYear: number,\n    public readonly keywords: string[],\n    public readonly schoolName: string,\n    public readonly studyLevel: string,\n    public readonly urlMap: string,\n  ) {\n    this.id = code\n    makeAutoObservable(this)\n  }\n\n  setPlanned() {\n    this.progressionStatus = ProgressionStatus.PLANNED\n  }\n\n  setUnplanned() {\n    this.progressionStatus = ProgressionStatus.UNPLANNED\n  }\n\n  serialize(): SerializedSpecialisation {\n    return {\n      id: this.code,\n    };\n  }\n\n  async deserialize(specialisation: SerializedSpecialisation) {\n    if (specialisation.id !== this.id) {\n      console.error(`ERROR: This specialisation is not ${specialisation.id} (is: ${this.id})`);\n      return;\n    }\n\n    this.setPlanned();   \n  }\n\n  toString() {\n    return `[SPECIALISATION_${this.id}] ${this.code} - ${this.title}`;\n  }\n}\n\n// export function loadSpecialisationByCode(specialisationCode: string) {\n//     return db.collection(\"specialisations\")\n//         .doc(specialisationCode)!\n//         .withConverter(specialisationConverter)\n//         .get().then((doc) => {\n//             if (doc.exists) {\n//                 var specialisation = doc.data()!;\n\n//                 return specialisation;\n//             } else {\n//                 console.log(\"No such document!\");\n//             }\n//         }).catch((error) => {\n//             console.log(\"Error getting document:\", error);\n//             throw new Error();\n//         });\n// }\n\n// let specialisationConverter = {\n//     toFirestore: function (specialisation) {\n//         return {\n//             name: specialisation.code,\n//         };\n//     },\n//     fromFirestore: function (snapshot, options) {\n//         const data = snapshot.data(options);\n\n//         return new SpecialisationModel(\n//             data.academicItemType,\n//             data.code,\n//             Number(data.creditPoints),\n//             parseCurriculumContainers(data.curriculumStructure),\n//             data.description,\n//             data.facultyName,\n//             Number(data.implementationYear),\n//             data.keywords,\n//             data.schoolName,\n//             data.studyLevel,\n//             data.title,\n//             data.urlMap,\n//         );\n//     }\n// };","import { action, makeAutoObservable, reaction, transaction, when } from \"mobx\";\nimport { IProgressionEntity, ProgressionStatus, StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { SerializedProgressionState, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\nimport { parseCurriculumContainers } from \"../models/CurriculumModel\";\nimport { ProgramModel } from \"../models/ProgramModel\";\nimport { SpecialisationModel } from \"../models/SpecialisationModel\";\nimport { UserState } from \"./UserState\";\nimport axios from \"axios\"\n\nexport class ProgressionState implements ISerializableEntity {\n  constructor(\n    userState: UserState\n  ) {\n    makeAutoObservable(this)\n    this._userState = userState\n    reaction(\n      () => this._userState.studyLevel,\n      () => {\n        this._isUpdated = false;\n        this._updateStudyLevel()\n      },\n      { fireImmediately: true }\n    )\n    userState.registerStudyLevelUpdateActionCallback(() => Promise.resolve(this._updateStudyLevel()));\n  }\n\n  private _userState: UserState\n  private _programMapById = new Map<string, ProgramModel>();\n  private _specialisationMapById = new Map<string, SpecialisationModel>();\n  private _isUpdated: boolean = false;\n\n  get isUpdated(): boolean {\n    return this._isUpdated;\n  }\n\n  private _updateStudyLevel = async () => {\n    await this.loadAllPrograms(this._userState.studyLevel);\n    await this.loadAllSpecialisations(this._userState.studyLevel);\n    this._isUpdated = true;\n  };\n\n  get allPrograms() {\n    return [...this._programMapById.values()]\n  }\n\n  get allSpecialisations() {\n    return [...this._specialisationMapById.values()]\n  }\n\n  getProgramById(id: string) {\n    return this._programMapById.get(id)\n  }\n\n  getSpecialisationById(id: string) {\n    return this._specialisationMapById.get(id)\n  }\n\n  get plannedPrograms(): ProgramModel[] {\n    return this.allPrograms.filter(program => program.progressionStatus === ProgressionStatus.PLANNED)\n  }\n\n  get plannedSpecialisations(): SpecialisationModel[] {\n    return this.allSpecialisations.filter(specialisation => specialisation.progressionStatus === ProgressionStatus.PLANNED)\n  }\n\n  get plannedProgressionEntities(): IProgressionEntity[] {\n    let result: IProgressionEntity[] = this.plannedPrograms\n    result = result.concat(this.plannedSpecialisations)\n    return result\n  }\n\n  private resetHard(): void {\n    this._programMapById.forEach((program) => {\n      program.setUnplanned();\n    });\n    this._specialisationMapById.forEach((specialisation) => {\n      specialisation.setUnplanned();\n    });\n  }\n\n  addProgram(program: ProgramModel) {\n    this._programMapById.set(program.id, program)\n  }\n  addSpecialisation(specialisation: SpecialisationModel) {\n    this._specialisationMapById.set(specialisation.id, specialisation)\n  }\n\n  serialize(): SerializedProgressionState {\n    return {\n      programs: this.plannedPrograms.map((programModel) => {\n        return programModel.serialize();\n      }),\n      specialisations: this.plannedSpecialisations.map((specialisationModel) => {\n        return specialisationModel.serialize();\n      }),\n    }\n  }\n\n  async deserialize(json: TermtanglesSerialized) {\n    if (!json.progressionState) {\n      return;\n    }\n\n    await when(() => { return this._isUpdated; });\n\n    this.resetHard();\n    const serializedProgressionState = json.progressionState;\n    if (serializedProgressionState.programs) {\n      serializedProgressionState.programs.forEach((serializedProgram) => {\n        if (!serializedProgram.id) return;\n\n        const programModel = this.getProgramById(serializedProgram.id);\n        if (programModel) {\n          programModel.deserialize(serializedProgram);\n        } else {\n          console.error(`ERROR: ${serializedProgram.id} is not a valid program.`);\n        }\n      });\n    }\n    if (serializedProgressionState.specialisations) {\n      serializedProgressionState.specialisations.forEach((serializedSpecialisation) => {\n        if (!serializedSpecialisation.id) return;\n\n        const specialisationModel = this.getSpecialisationById(serializedSpecialisation.id);\n        if (specialisationModel) {\n          specialisationModel.deserialize(serializedSpecialisation);\n        } else {\n          console.error(`ERROR: ${serializedSpecialisation.id} is not a valid specialisation.`);\n        }\n      });\n    }\n  }\n\n  private loadAllPrograms = action((studyLevel: StudyLevel) => {\n    return axios.get(`https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_programs.json`)\n    .then(response => {\n      transaction(() => {\n        this._programMapById.clear()\n        response.data.forEach(programObj => {\n          let program = new ProgramModel(\n            programObj.code,\n            programObj.title,\n            programObj.academicItemType,\n            programObj.additionalInfo,\n            programObj.creditPoints,\n            programObj.structureSummary,\n            parseCurriculumContainers(programObj.curriculumStructure),\n            programObj.description,\n            programObj.facultyName,\n            programObj.implementationYear,\n            programObj.intakePeriod,\n            programObj.programConstraints,\n            programObj.schoolName,\n            programObj.studyLevel,\n            programObj.urlMap\n          )\n\n          this.addProgram(program);\n        })\n      })\n    })\n  })\n\n  private loadAllSpecialisations = action((studyLevel: StudyLevel) => {\n    return axios.get(`https://raw.githubusercontent.com/termtangles/termtangles_data/main/publish/${studyLevel.toString()}/all_specialisations.json`)\n      .then(response => {\n        transaction(() => {\n          this._specialisationMapById.clear()\n          response.data.forEach(specialisationObj => {\n            let specialisation = new SpecialisationModel(\n              specialisationObj.code,\n              specialisationObj.title,\n              specialisationObj.academicItemType,\n              specialisationObj.creditPoints,\n              specialisationObj.structureSummary,\n              parseCurriculumContainers(specialisationObj.curriculumStructure),\n              specialisationObj.description,\n              specialisationObj.facultyName,\n              specialisationObj.implementationYear,\n              specialisationObj.keywords,\n              specialisationObj.schoolName,\n              specialisationObj.studyLevel,\n              specialisationObj.urlMap,\n            )\n\n            this.addSpecialisation(specialisation);\n          })\n        })\n    })\n  });\n}\n\n","import { CourseModel } from '../models/CourseModel';\r\nimport { ProgramModel } from '../models/ProgramModel';\r\nimport { SpecialisationModel } from '../models/SpecialisationModel';\r\nimport { CourseState } from './CourseState';\r\nimport { ProgressionState } from './ProgressionState';\r\n\r\n\r\nexport class SearchDataState {\r\n  constructor(\r\n    private _courseState: CourseState,\r\n    private _progressionState: ProgressionState,\r\n  ) {}\r\n\r\n  get courseSearchData(): CourseModel[] {\r\n    return this._courseState.allCourses.sort((a, b) => (a.code > b.code) ? 1 : -1)\r\n  }\r\n  get programSearchData(): ProgramModel[] {\r\n    return this._progressionState.allPrograms.sort((a, b) => (a.title > b.title) ? 1 : -1)\r\n  }\r\n  get specialisationSearchData(): SpecialisationModel[] {\r\n    return this._progressionState.allSpecialisations.sort((a, b) => (a.title > b.title) ? 1 : -1)\r\n  }\r\n}\r\n","import { makeAutoObservable, when } from \"mobx\";\nimport { StudyLevel } from \"../interfaces/ModelInterfaces\";\nimport { SerializedUserState, ISerializableEntity, TermtanglesSerialized } from \"../interfaces/SerializableInterfaces\"\n\nconst stringToStudyLevelMap = ((str: string) => {\n  switch(str) {\n    case \"undergraduate\": return StudyLevel.UNDERGRADUATE;\n    case \"postgraduate\": return StudyLevel.POSTGRADUATE;\n    case \"research\": return StudyLevel.RESEARCH;\n    default: return undefined;\n  }\n});\n\nexport class UserState implements ISerializableEntity {\n  constructor() {\n    makeAutoObservable(this)\n  }\n\n  private _studyLevel: StudyLevel = StudyLevel.UNDERGRADUATE\n  private _isUpdated: boolean = true;\n  private _studyLevelUpdateActionCallbacks: (() => Promise<void>)[] = [];\n\n  get studyLevel() {\n    return this._studyLevel\n  }\n\n  async setStudyLevel (studyLevel: StudyLevel) {\n    if (this._studyLevel !== studyLevel) {\n      this._studyLevel = studyLevel;\n      const studyLevelPromises: Promise<void>[] = this._studyLevelUpdateActionCallbacks.map(callback => callback());\n      return Promise.all(studyLevelPromises);\n    }\n  }\n\n  set isUpdated(isUpdated: boolean) {\n    this._isUpdated = isUpdated;\n  }\n  \n  get isUpdated(): boolean {\n    return this._isUpdated;\n  }\n\n  registerStudyLevelUpdateActionCallback(updateAction: () => Promise<void>) {\n    this._studyLevelUpdateActionCallbacks.push(updateAction);\n  }\n\n  serialize(): SerializedUserState {\n    return {studyLevel: this._studyLevel};\n  }\n\n  async deserialize(json: TermtanglesSerialized): Promise<void> {\n    if (!json.userState) {\n      throw \"ERROR: User state not included.\";\n    }\n\n    const serializedUserState = json.userState;\n    if (!serializedUserState.studyLevel) {\n      throw `ERROR: User state must include a studyLevel parameter.`;\n    }\n\n    const level = stringToStudyLevelMap(serializedUserState.studyLevel);\n    if (!level) {\n      throw `ERROR: ${serializedUserState.studyLevel} is not a valid study level.`\n    }\n\n    await this.setStudyLevel(level);\n  }\n}\n","import { createContext } from 'react'\nimport { CourseState } from '../states/CourseState'\nimport { ProgressionState } from '../states/ProgressionState';\nimport { SearchDataState } from '../states/SearchDataState';\nimport { UserState } from '../states/UserState';\n\nconst userState = new UserState();\nconst courseState = new CourseState(userState);\nconst progressionState = new ProgressionState(userState);\nconst searchDataState = new SearchDataState(courseState, progressionState);\n\nexport const ApplicationContext = createContext({\n    userState,\n    courseState,\n    progressionState,\n    searchDataState,\n})\n","\nimport { Grid, Item, Pagination } from 'semantic-ui-react'\nimport styled from 'styled-components'\n\nexport const ResultItem = styled(Item)`\n  &&& {\n    border: 0px solid lightgrey;\n    padding: 6px;\n    display: flex;\n    align-items: flex-start;\n    justify-content: space-between;\n    margin:0px\n  }\n  &&&&{\n    padding:1em 0;\n  }\n`\n\nexport const ResultItemHeader = styled(Item.Header)`\n`\n\nexport const ResultItemContent = styled(Item.Content)`\n  &&&&& {\n    flex: 1;\n    padding:0;\n  }\n`\n\nexport const ResultItemExtra = styled(Item.Extra)`\n  &&&& {\n    margin: 0;\n    text-align: right;\n    flex: 1;\n  }\n`\n\nexport const ResultCollection = styled(Item.Group)`\n  && {\n    padding: 15px 0px 10px 0px;\n    margin: 0px;\n  }\n`\n\nexport const ResultsPagination = styled(Pagination)`\n  max-height: 40px;\n`\n\nexport const ResultsColumn = styled(Grid.Column)`\n`\n\n","import { Observer, observer } from \"mobx-react\"\nimport { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { CourseModel, CourseStatus } from \"../../../models/CourseModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra, ResultItemHeader } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  course: T\n}\n\nexport const CourseResultView = observer((props: IResultViewProps<CourseModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseOver={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <ResultItemHeader>{props.course.code}</ResultItemHeader>\n              <Item.Description>{props.course.title}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n              ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.course.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.course.courseStatus === CourseStatus.PLANNED\n                        ? <Icon color=\"red\" className=\"bookmark\" />\n                        : props.course.courseStatus === CourseStatus.ALLOCATED\n                          ? <Icon color=\"orange\" className=\"calendar alternate outline\" />\n                          : props.course.courseStatus === CourseStatus.COMPLETED\n                            ? <Icon color=\"green\" className=\"check\" />\n                            : \"\"\n                    }\n\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.course.courseStatus !== CourseStatus.PLANNED && props.course.courseStatus !== CourseStatus.ALLOCATED}\n                        icon={props.course.courseStatus === CourseStatus.ALLOCATED ? 'calendar alternate outline' : 'bookmark'}\n                        content={props.course.courseStatus === CourseStatus.ALLOCATED ? 'Scheduled' : 'Interested'}\n                        color={props.course.courseStatus === CourseStatus.ALLOCATED ? 'orange' : 'blue'}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.course.courseStatus === CourseStatus.PLANNED || props.course.courseStatus === CourseStatus.ALLOCATED) {\n                            props.course.setUnplanned()\n                          } else {\n                            props.course.setPlanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {props.course.courseStatus !== CourseStatus.COMPLETED}\n                        icon='check'\n                        content='Done'\n                        color=\"green\"\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.course.courseStatus === CourseStatus.COMPLETED) {\n                            props.course.setUnplanned()\n                          } else {\n                            props.course.setCompleted()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.course.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { ProgressionStatus } from \"../../../interfaces/ModelInterfaces\"\nimport { SpecialisationModel } from \"../../../models/SpecialisationModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  specialisation: T\n}\n\nexport const SpecialisationResultView = observer((props: IResultViewProps<SpecialisationModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener, noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseEnter={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <Item.Header>{props.specialisation.title}</Item.Header>\n              <Item.Description>{props.specialisation.academicItemType} - {props.specialisation.code}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n              ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.specialisation.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.specialisation.progressionStatus === ProgressionStatus.PLANNED\n                        ? <Icon color=\"green\" className=\"calendar alternate outline\" />\n                        : <></>\n                    }\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED}\n                        icon={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"plus circle\" : \"minus circle\"}\n                        content={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"Add\" : \"Remove\"}\n                        color={props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED ? \"green\" : \"red\"}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.specialisation.progressionStatus === ProgressionStatus.UNPLANNED) {\n                            props.specialisation.setPlanned()\n                          } else {\n                            props.specialisation.setUnplanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.specialisation.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\";\nimport { ApplicationContext } from \"../../../contexts/ApplicationContext\";\nimport { CurriculumElement } from \"../../../models/CurriculumModel\";\nimport React, { useContext } from \"react\";\nimport { CourseResultView } from \"../../SearchPanel/Results/CourseResultView\";\nimport { SpecialisationResultView } from \"../../SearchPanel/Results/SpecialisationResultView\";\nimport { ResultCollection } from \"../../SearchPanel/SearchPanelStyles\";\n\nexport interface ICurriculumElementViewProps {\n  entityId: string,\n  curriculumElements: CurriculumElement[]\n}\n\nexport const CurriculumElementsView = observer((props: ICurriculumElementViewProps) => {\n  const applicationContext = useContext(ApplicationContext);\n  return <Observer>\n    {\n      () => {\n        return props.curriculumElements.length > 0\n          ? <ResultCollection divided>\n            {\n              props.curriculumElements\n                .sort((a, b) => Number(a.order) - Number(b.order))\n                .map(element => {\n                  if (element.isCourse()) {\n                    let course = applicationContext.courseState.getCourseById(element.itemCode)\n                    return course ? <CourseResultView course={course} /> : <></>\n                  } else if (element.isSpecialisation()) {\n                    let specialisation = applicationContext.progressionState.getSpecialisationById(element.itemCode)\n                    return specialisation ? <SpecialisationResultView specialisation={specialisation} /> : <></>\n                  }\n                  return <p>{element.description}</p>\n                })\n            }\n          </ResultCollection>\n          : <></>\n      }\n    }\n  </Observer>\n});\n","import parse from 'html-react-parser';\nimport { Observer, observer } from \"mobx-react\";\nimport React from \"react\";\nimport sanitizeHtml from 'sanitize-html';\nimport { Accordion, Icon, Label } from \"semantic-ui-react\";\nimport styled from 'styled-components';\nimport { CurriculumContainer } from \"../../../models/CurriculumModel\";\nimport { ProgressionPlannerViewModel } from \"../ProgressionPlannerViewModel\";\nimport { CurriculumElementsView } from \"./CurriculumElementsView\";\n\nexport interface ICurriculumContainerViewProps {\n  entityId: string\n  curriculumContainer: CurriculumContainer[]\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n}\n\nexport const CurriculumAccordionCreditPoints = styled(Label)`\n  &&& {\n    margin-left:auto\n    \n  }\n`\n\nexport const CurriculumAccordionTitle = styled(Accordion.Title)`\n  &&& {\n    display:flex;\n  }\n`\nexport const CurriculumDescriptionDiv = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nexport const CurriculumExpandCollapseLink = styled.a`\n  min-width: 80px;\n  text-align: right;\n`\n\nexport const CurriculumContent = styled.div`\n  margin-left:10px;\n`\n\nexport const CurriculumContainerView = observer((props: ICurriculumContainerViewProps) => {\n  const getCreditPointsView = (container: CurriculumContainer) => {\n    const uocOfChildren = props.progressionPlannerViewModel.calculateUocOfChildren(container)\n    if (container.creditPoints > 0) {\n      return <CurriculumAccordionCreditPoints\n        size=\"small\"\n        color={uocOfChildren === container.creditPoints\n          ? \"green\"\n          : uocOfChildren < container.creditPoints\n            ? \"orange\"\n            : \"yellow\"\n        }\n      >\n        {uocOfChildren} / {container.creditPoints} UOC\n      </CurriculumAccordionCreditPoints>\n    } else if (uocOfChildren > 0) {\n      return <CurriculumAccordionCreditPoints\n        size=\"small\"\n        color=\"green\"\n      >\n        {uocOfChildren} UOC\n      </CurriculumAccordionCreditPoints>\n    }\n  }\n\n  return <Observer>\n    {\n      () => {\n        return props.curriculumContainer.length > 0\n          ? <Accordion.Accordion\n            key={props.entityId}\n            exclusive={false}\n            panels={[...props.curriculumContainer]\n              .sort((a, b) => Number(a.order) - Number(b.order))\n              .map(container => {\n                return {\n                  key: container.id,\n                  title: <CurriculumAccordionTitle>\n                    <Icon className={\n                      props.progressionPlannerViewModel.isContainerActive(container.id)\n                      ? \"caret down\"\n                      : \"caret right\"\n                    }/>\n                    {container.title}\n                    {getCreditPointsView(container)}\n                  </CurriculumAccordionTitle>,\n                  content: {\n                    content: <div>\n                      <CurriculumContent>\n                      <CurriculumDescriptionDiv>\n                        <span>{parse(sanitizeHtml(container.description))}</span>\n                        {\n                          container.containers.length > 0\n                            ? <CurriculumExpandCollapseLink\n                              href=\"#\"\n                              onClick={() => props.progressionPlannerViewModel.toggleAllContainers(container)}\n                            >\n                              {\n                                props.progressionPlannerViewModel.isAnySubContainerActive(container)\n                                  ? \"Collapse All\"\n                                  : \"Expand All\"\n                              }\n                            </CurriculumExpandCollapseLink>\n                            : <></>\n                        }\n                      </CurriculumDescriptionDiv>\n                      <CurriculumElementsView entityId={props.entityId} curriculumElements={container.elements} />\n                      </CurriculumContent>\n                      <CurriculumContainerView\n                        entityId={props.entityId}\n                        curriculumContainer={container.containers}\n                        progressionPlannerViewModel={props.progressionPlannerViewModel}\n                      />\n                    </div>\n                  },\n                  active: props.progressionPlannerViewModel.isContainerActive(container.id),\n                  onTitleClick: () => { props.progressionPlannerViewModel.toggleContainer(container.id) }\n                }\n              })}\n          />\n          : <></>\n      }\n    }\n  </Observer>\n});\n","import { Observer, observer } from 'mobx-react';\nimport React from 'react';\nimport { Accordion } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport { IProgressionEntity } from '../../interfaces/ModelInterfaces';\nimport { CurriculumContainerView } from './CurriculumView/CurriculumContainerView';\nimport { ProgressionPlannerViewModel } from './ProgressionPlannerViewModel';\nimport parse from 'html-react-parser';\nimport sanitizeHtml from 'sanitize-html';\n\nexport interface IProgressionEntityViewProps {\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n  entity: IProgressionEntity\n}\n\nconst ProgressionEntityTitle = styled.a`\ncolor: black;\nbackground-color: transparent;\ntext-decoration: none;\n\n&:hover {\n  color: #db2828;\n  background-color: transparent;\n  text-decoration: line-through;\n}\n`\n\nconst ProgressionEntityView = observer((props: IProgressionEntityViewProps) => {\n  return <Observer>\n    {() => {\n      return <>\n        <h2>\n          <ProgressionEntityTitle\n            href=\"#\"\n            onClick={() => props.entity.setUnplanned()}\n          >{props.entity.title}</ProgressionEntityTitle>\n        </h2>\n        <span>{parse(sanitizeHtml(props.entity.structureSummary))}</span>\n        <Accordion fluid styled>\n          <CurriculumContainerView\n            entityId={props.entity.id}\n            curriculumContainer={props.entity.curriculumStructure}\n            progressionPlannerViewModel={props.progressionPlannerViewModel}\n          />\n        </Accordion>\n      </>\n    }}\n  </Observer>\n})\n\nexport default ProgressionEntityView;\n","import { Observer, observer } from 'mobx-react';\nimport React from 'react';\nimport { Container } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport ProgressionEntityView from './ProgressionEntityView';\nimport { ProgressionPlannerViewModel } from './ProgressionPlannerViewModel';\n\nexport const ProgressionContainer = styled(Container)`\n  margin:1em 0;\n`\n\nexport interface IProgressionPlannerProps {\n  progressionPlannerViewModel: ProgressionPlannerViewModel\n}\n\nconst ProgresionPlanner = observer(({ progressionPlannerViewModel }: IProgressionPlannerProps) => {\n  return <Observer>\n    {() => {\n      return (\n        <React.Fragment>\n          <ProgressionContainer>\n            {\n              progressionPlannerViewModel\n                .progressionState\n                .plannedProgressionEntities\n                .map(entity => {\n                  return <ProgressionEntityView\n                    entity={entity}\n                    progressionPlannerViewModel={progressionPlannerViewModel}\n                  />\n                })\n            }\n          </ProgressionContainer>\n        </React.Fragment>\n      )\n    }}\n  </Observer>\n})\n\nexport default ProgresionPlanner;\n","import { makeObservable, observable } from \"mobx\";\nimport { ProgressionStatus } from \"../../interfaces/ModelInterfaces\";\nimport { CourseStatus } from \"../../models/CourseModel\";\nimport { CurriculumContainer } from \"../../models/CurriculumModel\";\nimport { ProgramModel } from \"../../models/ProgramModel\";\nimport { SpecialisationModel } from \"../../models/SpecialisationModel\";\nimport { CourseState } from \"../../states/CourseState\";\nimport { ProgressionState } from \"../../states/ProgressionState\";\n\nexport interface IProgressionPlannerState {\n  id: string,\n  title: string,\n  programs: ProgramModel[],\n  specialisations: SpecialisationModel[],\n}\n\nexport class ProgressionPlannerViewModel {\n  private _progressionState: ProgressionState\n  private _courseState: CourseState\n  private _progressionPlannerState: IProgressionPlannerState\n  private _displayableContainerPanels: Set<string> = new Set<string>()\n\n  constructor(\n    progressionState: ProgressionState,\n    courseState: CourseState,\n  ) {\n    makeObservable<ProgressionPlannerViewModel,\n      \"_displayableContainerPanels\"\n    >(this, {\n      _displayableContainerPanels: observable,\n    })\n\n    this._progressionState = progressionState\n    this._progressionPlannerState = {\n      id: \"progressionPlanner\",\n      title: \"Progression Planner\",\n      programs: [],\n      specialisations: [],\n    }\n    this._courseState = courseState\n  }\n\n  get progressionState() {\n    return this._progressionState;\n  }\n\n  get progressionPlannerState() {\n    return this._progressionPlannerState;\n  }\n\n  calculateUocOfChildren(curriculumContainer: CurriculumContainer): number {\n    return [...this.getUniqueUocOfCurriculumContainer(curriculumContainer).values()].reduce((a, b) => a + b, 0)\n  }\n\n  getUniqueUocOfCurriculumContainer(curriculumContainer: CurriculumContainer): Map<string, number> {\n    let allChildren = new Map<string, number>()\n    curriculumContainer.elements.forEach(element => {\n      if (element.isCourse()) {\n        let course = this._courseState.getCourseById(element.itemCode)\n        if (course && course.courseStatus !== CourseStatus.UNPLANNED) {\n          allChildren.set(element.itemCode, element.creditPoints)\n        }\n      } else if (element.isSpecialisation()) {\n        let specialisation = this.progressionState.getSpecialisationById(element.itemCode)\n        if (specialisation && specialisation.progressionStatus !== ProgressionStatus.UNPLANNED) {\n          allChildren.set(element.itemCode, element.creditPoints)\n        }\n      }\n    })\n    curriculumContainer.containers.forEach(container => {\n      let childResult = this.getUniqueUocOfCurriculumContainer(container)\n      childResult.forEach((value, key) => allChildren.set(key, value))\n    })\n    return allChildren\n  }\n\n  toggleContainer(containerId: string) {\n    if (this._displayableContainerPanels.has(containerId)) {\n      this._displayableContainerPanels.delete(containerId)\n    } else {\n      this._displayableContainerPanels.add(containerId)\n    }\n  }\n\n  isAnySubContainerActive(rootContainer: CurriculumContainer): boolean {\n    return rootContainer.containers.filter(container => {\n      return this._displayableContainerPanels.has(container.id)\n        || this.isAnySubContainerActive(container)\n    }).length > 0\n  }\n\n  toggleAllContainers(rootContainer: CurriculumContainer) {\n    if (this.isAnySubContainerActive(rootContainer)) {\n      rootContainer.containers.forEach(container => {\n        this.setAllContainersInactive(container)\n      })\n    } else {\n      rootContainer.containers.forEach(container => {\n        this.setAllContainersActive(container)\n      })\n    }\n  }\n\n  private setAllContainersActive(rootContainer: CurriculumContainer) {\n    rootContainer.containers.forEach(container => {\n      this.setAllContainersActive(container)\n    })\n    this._displayableContainerPanels.add(rootContainer.id)\n  }\n\n  private setAllContainersInactive(rootContainer: CurriculumContainer) {\n    rootContainer.containers.forEach(container => {\n      this.setAllContainersInactive(container)\n    })\n    this._displayableContainerPanels.delete(rootContainer.id)\n  }\n\n  isContainerActive(containerId: string): boolean {\n    return this._displayableContainerPanels.has(containerId)\n  }\n}\n","import { makeAutoObservable } from \"mobx\";\nexport type FilterValue = string\n\nexport interface IFilterElementState {\n  filterElementName: string\n  numMatchingRecords: number\n}\n\nexport class FilterModel<T> {\n  private _possibleValues: Set<FilterValue> = new Set();\n  private _selectedValues: Set<FilterValue> = new Set();\n  constructor(\n    public readonly name: string,\n    private readonly fnGetTargetValue: (searchResult: T) => FilterValue[],\n  ) {\n    makeAutoObservable(this)\n  }\n\n  private filterResultMapping = new Map<string, number>();\n  public initializeFilter = (allSearchData: T[]) =>{\n    this._possibleValues = new Set(allSearchData\n      .map(result => this.fnGetTargetValue(result))\n      .flat()\n      .filter(value => value !== \"\")\n    )\n  }\n\n  public applyFilter = (searchResults: T[]): T[] => {\n    let results = searchResults\n    if (this._selectedValues.size > 0) {\n      results = searchResults\n        .filter(result => [...this._selectedValues.values()]\n          .filter(filterValue => this.fnGetTargetValue(result).includes(filterValue))\n          .length > 0\n        )\n    }\n    return results\n  }\n\n  public getFilterState(searchResults: T[]): IFilterElementState[] {\n    const isNumerical = [...this._possibleValues.values()].filter(value => isNaN(Number(value))).length === 0\n    return [...this._possibleValues.values()]\n      .sort((a, b) => {\n        if (isNumerical) {\n          return Number(a) - Number(b)\n        } else {\n          return a > b ? 1 : -1\n        }\n      })\n      .map(possibleFilterValue => {\n        return {\n          filterElementName: possibleFilterValue.toString(),\n          numMatchingRecords: searchResults.filter(result => this.fnGetTargetValue(result).includes(possibleFilterValue)).length,\n        }\n      })\n  }\n\n  public isSelected(value: FilterValue) {\n    return this._selectedValues.has(value)\n  }\n\n  public toggleValue(value: FilterValue) {\n    if (!this._possibleValues.has(value)) {\n      console.log(`invalid value toggled: ${value}`)\n      return;\n    }\n    if (this._selectedValues.has(value)) {\n      this._selectedValues.delete(value)\n    } else {\n      this._selectedValues.add(value)\n    }\n  }\n\n  public resetValue(value: FilterValue) {\n    if (!this._possibleValues.has(value)) {\n      console.log(`invalid value toggled: ${value}`)\n      return;\n    }\n    if (this._selectedValues.has(value)) {\n      this._selectedValues.delete(value)\n    }\n  }\n\n}","import { CourseModel } from \"../CourseModel\"\nimport { ProgramModel } from \"../ProgramModel\"\nimport { SpecialisationModel } from \"../SpecialisationModel\"\nimport { FilterModel } from \"./FilterModel\"\n\nexport const getCourseFilters = (allSearchData: CourseModel[]) => {\n  const filters: FilterModel<CourseModel>[] = [\n    new FilterModel<CourseModel>(\"Offering Periods\", (course) => course.termOffering),\n    new FilterModel<CourseModel>(\"Faculty\", (course) => [course.facultyName]),\n    new FilterModel<CourseModel>(\"School\", (course) => [course.schoolName]),\n    new FilterModel<CourseModel>(\"Credit Points\", (course) => [course.creditPoints.toString()]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n\nexport const getProgramFilters = (allSearchData: ProgramModel[]) => {\n  const filters: FilterModel<ProgramModel>[] = [\n    new FilterModel<ProgramModel>(\"Intake Periods\", (program) => program.intakePeriod),\n    new FilterModel<ProgramModel>(\"Faculty\", (program) => [program.facultyName]),\n    new FilterModel<ProgramModel>(\"School\", (program) => [program.schoolName]),\n    new FilterModel<ProgramModel>(\"Credit Points\", (program) => [program.creditPoints.toString()]),\n    new FilterModel<ProgramModel>(\"Academic Item Type\", (program) => [program.academicItemType]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n\nexport const getSpecialisationFilters = (allSearchData: SpecialisationModel[]) => {\n  const filters: FilterModel<SpecialisationModel>[] = [\n    new FilterModel<SpecialisationModel>(\"Faculty\", (specialisation) => [specialisation.facultyName]),\n    new FilterModel<SpecialisationModel>(\"School\", (specialisation) => [specialisation.schoolName]),\n    new FilterModel<SpecialisationModel>(\"Credit Points\", (specialisation) => [specialisation.creditPoints.toString()]),\n    new FilterModel<SpecialisationModel>(\"Academic Item Type\", (specialisation) => [specialisation.academicItemType]),\n  ]\n  filters.forEach(filter => filter.initializeFilter(allSearchData))\n  return filters\n}\n","/* May remove */\n\nexport const ResetButtonStyle = {\n  backgroundColor: \"#dcdcdc\",\n  border: \"none\",\n  color: \"black\",\n  padding: \"15px 32px\",\n  textDecoration: \"none\",\n  display: \"inline-block\",\n  fontSize: \"16px\",\n  margin: \"4px 2px\",\n  cursor: \"pointer\",\n  width: \"100%\",\n  height: \"100%\"\n}","import { Observer, observer } from \"mobx-react\"\nimport { useState } from \"react\"\nimport { Accordion, Form, Menu } from \"semantic-ui-react\"\nimport { FilterModel } from \"../../../models/Filters/FilterModel\"\n\nexport interface IFilterSectionProps<T> {\n  searchResults: T[]\n  filter: FilterModel<T>\n}\n\nexport const FilterSection = observer(<T,>(props: IFilterSectionProps<T>) => {\n  const [expandedFilters, setExpandedFilters] = useState(new Set<string>())\n\n  return <Observer>\n    {\n      () => {\n        let filterState = props.filter.getFilterState(props.searchResults)\n        return (\n            <Menu.Item key={props.filter.name}>\n              <Accordion.Title\n                active={expandedFilters.has(props.filter.name)}\n                content={props.filter.name}\n                onClick={() => {\n                  let newExpandedFilters = new Set(expandedFilters)\n                  if (expandedFilters.has(props.filter.name)) {\n                    newExpandedFilters.delete(props.filter.name)\n                  } else {\n                    newExpandedFilters.add(props.filter.name)\n                  }\n                  setExpandedFilters(newExpandedFilters)\n                }}\n              />\n              <Accordion.Content\n                active={expandedFilters.has(props.filter.name)}\n                content={\n                  <Form>\n                    <Form.Group grouped>\n                      {\n                        filterState.map(filterElementState => {\n                          return <Form.Checkbox\n                            key={filterElementState.filterElementName}\n                            label={`${filterElementState.filterElementName}`}\n                            name={props.filter.name}\n                            type=\"checkbox\"\n                            value={filterElementState.filterElementName}\n                            checked={props.filter.isSelected(filterElementState.filterElementName)}\n                            onClick={() => {\n                              props.filter.toggleValue(filterElementState.filterElementName)\n                            }}\n                          />\n                        })\n                      }\n                    </Form.Group>\n                  </Form>\n                }\n              />\n            </Menu.Item>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from 'mobx-react'\nimport { Accordion, Menu } from 'semantic-ui-react'\nimport { ResetButtonStyle } from '../../../config/ResetButtonStyle'\nimport { FilterModel } from '../../../models/Filters/FilterModel'\nimport { FilterSection } from './FilterSection'\nimport './ResetButton.css'\nexport interface IFilterMenuProps<T> {\n  searchResults: T[]\n  filters: FilterModel<T>[]\n}\n\nexport const FilterMenuView = observer(<T,>(props: IFilterMenuProps<T>) => {\n  const handlereset = () => {\n    props.filters.forEach((filter) => {\n      filter.getFilterState(props.searchResults).forEach((element) => {\n        filter.resetValue(element.filterElementName)\n      })\n    })\n  }\n\n  return (\n    <Observer>\n      {\n        () => {\n          return <div >\n            <div className=\"resetbutton\">\n              <button style={ResetButtonStyle} onClick={() => handlereset()}>Reset Filter</button>\n            </div>\n            <Accordion fluid as={Menu} vertical>\n              {\n                props.filters.map(filter => {\n                  return <FilterSection\n                    searchResults={props.searchResults}\n                    filter={filter}\n                  />\n                })\n              }\n            </Accordion>\n\n          </div>\n        }\n\n      }\n    </Observer>\n  )\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React from \"react\"\nimport { Item } from \"semantic-ui-react\"\nimport styled from 'styled-components'\nimport { CourseModel } from \"../../../models/CourseModel\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\nimport { CourseResultView } from \"./CourseResultView\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nconst CourseCollection = styled(Item.Group)`\n  &&& {\n    padding: 15px 0px 10px 0px;\n  }\n`\n        \nexport const CourseResultCollectionView = observer((props: IResultCollectionViewProps<CourseModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(course => {\n                return (\n                  <CourseResultView course={course} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { CourseResultCollectionView } from \"../Results/CourseResultCollectionView\"\nimport { ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const CourseSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <Grid.Column key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.courseSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.courseFilters}\n                  />\n                </Grid.Column>\n                <ResultsColumn key=\"results\" width={12}>\n                  <CourseResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.courseSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.courseSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.courseSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Button, Icon, Item } from \"semantic-ui-react\"\nimport { ProgressionStatus } from \"../../../interfaces/ModelInterfaces\"\nimport { ProgramModel } from \"../../../models/ProgramModel\"\nimport { ResultItem, ResultItemContent, ResultItemExtra } from \"../SearchPanelStyles\"\n\nexport interface IResultViewProps<T> {\n  program: T\n}\n\nexport const ProgramResultView = observer((props: IResultViewProps<ProgramModel>) => {\n  const [showOptions, setShowOptions] = useState(false)\n\n  const openInNewTab = (url) => {\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer')\n    if (newWindow) newWindow.opener = null\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultItem\n            onMouseEnter={() => setShowOptions(true)}\n            onMouseLeave={() => setShowOptions(false)}\n          >\n            <ResultItemContent>\n              <Item.Header>{props.program.title}</Item.Header>\n              <Item.Description>{props.program.academicItemType} - {props.program.code}</Item.Description>\n            </ResultItemContent>\n            {\n              !showOptions\n                ?\n                <ResultItemContent>\n                  <ResultItemExtra>{props.program.creditPoints} UOC</ResultItemExtra>\n                  <ResultItemExtra>\n                    {\n                      props.program.progressionStatus === ProgressionStatus.PLANNED\n                        ? <Icon color=\"green\" className=\"calendar alternate outline\" />\n                        : <></>\n                    }\n                  </ResultItemExtra>\n                </ResultItemContent>\n                :\n                <ResultItemContent>\n                  <ResultItemExtra>\n                    <Button.Group>\n                      <Button\n                        basic = {props.program.progressionStatus === ProgressionStatus.UNPLANNED}\n                        icon={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"plus circle\" : \"minus circle\"}\n                        content={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"Add\" : \"Remove\"}\n                        color={props.program.progressionStatus === ProgressionStatus.UNPLANNED ? \"green\" : \"red\"}\n                        size=\"medium\"\n                        onClick= {() => {\n                          if (props.program.progressionStatus === ProgressionStatus.UNPLANNED) {\n                            props.program.setPlanned()\n                          } else {\n                            props.program.setUnplanned()\n                          }\n                        }}\n                      />\n                      <Button\n                        basic = {true}\n                        icon={'book'}\n                        content={'Handbook'}\n                        color={'red'}\n                        size=\"medium\"\n                        onClick= {() => openInNewTab(`https://www.handbook.unsw.edu.au${props.program.urlMap}`) }\n                      />\n                    </Button.Group>\n                  </ResultItemExtra>\n                </ResultItemContent>\n            }\n          </ResultItem>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport { ProgramModel } from \"../../../models/ProgramModel\"\nimport { ProgramResultView } from \"./ProgramResultView\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nexport const ProgramResultCollectionView = observer((props: IResultCollectionViewProps<ProgramModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(program => {\n                return (\n                  <ProgramResultView program={program} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { ProgramResultCollectionView } from \"../Results/ProgramResultCollectionView\"\nimport { ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const ProgramSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <Grid.Column key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.programSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.programFilters}\n                  />\n                </Grid.Column>\n                <ResultsColumn key=\"results\" width={12}>\n                  <ProgramResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.programSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.programSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.programSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from \"mobx-react\"\nimport { SpecialisationModel } from \"../../../models/SpecialisationModel\"\nimport { SpecialisationResultView } from \"./SpecialisationResultView\"\nimport { ResultCollection } from \"../SearchPanelStyles\"\n\nexport interface IResultCollectionViewProps<T> {\n  results: T[]\n}\n\nexport const SpecialisationResultCollectionView = observer((props: IResultCollectionViewProps<SpecialisationModel>) => {\n  return <Observer>\n    {\n      () => {\n        return (\n          <ResultCollection divided>\n            {\n              props.results.map(specialisation => {\n                return (\n                  <SpecialisationResultView specialisation={specialisation} />\n                )\n              })\n            }\n          </ResultCollection>\n        )\n      }\n    }\n  </Observer>\n})\n","\nimport { observer, Observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport { Grid } from \"semantic-ui-react\"\nimport { FilterMenuView } from \"../Filter/FilterMenuView\"\nimport { SpecialisationResultCollectionView } from \"../Results/SpecialisationResultCollectionView\"\nimport { ResultsColumn, ResultsPagination } from \"../SearchPanelStyles\"\nimport { ISearchTabProps } from \"./SearchTabInterfaces\"\n\nexport const SpecialisationSearchTab = observer((props: ISearchTabProps) => {\n  const [activePageNumber, setActivePageNumber] = useState(1)\n\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <>\n            <Grid columns={12} divided container>\n              <Grid.Row>\n                <Grid.Column key=\"filter\" width={4}>\n                  <FilterMenuView\n                    searchResults={props.searchPanelViewModel.searchResults.specialisationSearchResults}\n                    filters={props.searchPanelViewModel.searchFilters.specialisationFilters}\n                  />\n                </Grid.Column>\n                <ResultsColumn key=\"results\" width={12}>\n                  <SpecialisationResultCollectionView results={\n                    props.searchPanelViewModel.searchResults.specialisationSearchResults\n                      .slice(\n                        props.searchPanelViewModel.resultsPerPage * (activePageNumber - 1),\n                        Math.min(props.searchPanelViewModel.searchResults.specialisationSearchResults.length, props.searchPanelViewModel.resultsPerPage * activePageNumber),\n                      )\n                  } />\n                  <ResultsPagination\n                    totalPages={Math.ceil(props.searchPanelViewModel.searchResults.specialisationSearchResults.length / props.searchPanelViewModel.resultsPerPage)}\n                    onPageChange={(e, data) => {\n                      setActivePageNumber(Number(data.activePage))\n                      // console.log(data)\n                    }}\n                    activePage={activePageNumber}\n                  />\n                </ResultsColumn>\n              </Grid.Row>\n\n            </Grid>\n          </>\n        )\n      }\n    }\n  </Observer>\n})\n","import { Observer, observer } from 'mobx-react'\nimport React from 'react'\nimport { Container, Dropdown, Icon, Input, Menu } from 'semantic-ui-react'\nimport styled from 'styled-components'\nimport { SearchPanelItem, SearchPanelViewModel } from './SearchPanelViewModel'\nimport { CourseSearchTab } from './SearchTab/CourseSearchTab'\nimport { ProgramSearchTab } from './SearchTab/ProgramSearchTab'\nimport { SpecialisationSearchTab } from './SearchTab/SpecialisationSearchTab'\n\n\nconst ResultsSubtextContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n  padding: 6px;\n`\n\nconst FoundResults = styled.h4`\n  &&& {\n    margin: 1rem 0 0.5rem 0.5rem\n  }\n`\n\nconst SearchPanel = observer(({ searchPanelViewModel }: { [key: string]: SearchPanelViewModel }) => {\n  const getNumResults = () => {\n    let numResults = -1\n    switch (searchPanelViewModel.activeItem) {\n      case (SearchPanelItem.COURSES):\n        numResults = searchPanelViewModel.searchResults.courseSearchResults.length\n        break\n      case (SearchPanelItem.PROGRAMS):\n        numResults = searchPanelViewModel.searchResults.programSearchResults.length\n        break\n      case (SearchPanelItem.SPECIALISATIONS):\n        numResults = searchPanelViewModel.searchResults.specialisationSearchResults.length\n        break\n    }\n    return numResults\n  }\n\n  return <Observer>\n    {\n      () => {\n        return (\n          <React.Fragment>\n            <Container>\n              <Input\n                placeholder=\"Click here to to get started!\"\n                fluid\n                loading={searchPanelViewModel.isLoading}\n                icon={\n                  <Icon\n                    link={searchPanelViewModel.isInputActive}\n                    className={searchPanelViewModel.isInputActive ? \"x\" : \"search\"}\n                    onClick={() => {\n                      searchPanelViewModel.setQueryText(\"\")\n                      searchPanelViewModel.setInputActive(false)\n                    }}\n                  />\n                }\n                onClick={() => {\n                  searchPanelViewModel.setInputActive(true)\n                }}\n                onChange={(e, data) => searchPanelViewModel.setQueryText(data.value)}\n                value={searchPanelViewModel.queryText}\n              />\n              {\n                searchPanelViewModel.shouldShowPanel\n                  ? <>\n                    <Menu pointing secondary>\n                      <Menu.Item\n                        name={\"courses\"}\n                        active={searchPanelViewModel.activeItem === SearchPanelItem.COURSES}\n                        onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.COURSES)}\n                      >\n                        {`Courses (${searchPanelViewModel.searchResults.courseSearchResults.length})`}\n                      </Menu.Item>\n                      <Menu.Item\n                        name={\"programs\"}\n                        active={searchPanelViewModel.activeItem === SearchPanelItem.PROGRAMS}\n                        onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.PROGRAMS)}\n                      >\n                        {`Programs (${searchPanelViewModel.searchResults.programSearchResults.length})`}\n                      </Menu.Item>\n                      <Menu.Item\n                        name={\"specialisations\"}\n                        active={searchPanelViewModel.activeItem === SearchPanelItem.SPECIALISATIONS}\n                        onClick={() => searchPanelViewModel.setActiveItem(SearchPanelItem.SPECIALISATIONS)}\n                      >\n                        {`Specialisations (${searchPanelViewModel.searchResults.specialisationSearchResults.length})`}\n                      </Menu.Item>\n                    </Menu>\n                    <ResultsSubtextContainer>\n                      <FoundResults>\n                        Found {getNumResults()} result{getNumResults() === 1 ? \"\" : \"s\"}\n                      </FoundResults>\n\n                      <span>\n                        <span style={{ marginRight: \"10px\"}}>Results per page</span>\n                        <Dropdown\n                          text={searchPanelViewModel.resultsPerPage.toString()}\n                          selection\n                          options={[\n                            { text: 10, value: 10 },\n                            { text: 20, value: 20 },\n                            { text: 30, value: 30 },\n                            { text: 50, value: 50 },\n                          ]}\n                          onChange={(e, data) => { searchPanelViewModel.setResultsPerPage(Number(data.value)) }}\n                        />\n                      </span>\n                    </ResultsSubtextContainer>\n                    {\n                      searchPanelViewModel.activeItem === SearchPanelItem.COURSES\n                        ? <CourseSearchTab searchPanelViewModel={searchPanelViewModel} />\n                        : <></>\n                    }\n                    {\n                      searchPanelViewModel.activeItem === SearchPanelItem.PROGRAMS\n                        ? <ProgramSearchTab searchPanelViewModel={searchPanelViewModel} />\n                        : <></>\n                    }\n                    {\n                      searchPanelViewModel.activeItem === SearchPanelItem.SPECIALISATIONS\n                        ? <SpecialisationSearchTab searchPanelViewModel={searchPanelViewModel} />\n                        : <></>\n                    }\n                  </>\n                  : <></>\n              }\n            </Container>\n          </React.Fragment>\n        )\n      }\n    }\n  </Observer>\n\n})\n\nexport default SearchPanel\n","import styled from \"styled-components\"\nimport { AutoPlannerViewModel } from \"./AutoPlannerModel\"\n\nconst AutoPlanButton = styled.button`\n  background-color: forestgreen;\n  border: none;\n  border-radius: 4px;\n  color: white;\n  padding: 15px 32px;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin: 4px 2px;\n  cursor: pointer;\n  width: 100%;\n  -webkit-user-select: none;  /* Chrome all / Safari all */\n  -moz-user-select: none;     /* Firefox all */\n  -ms-user-select: none;      /* IE 10+ */\n  user-select: none;          /* Likely future */ \n`\nconst AutoPlanner = ({ autoPlannerViewModel }: { [key: string]: AutoPlannerViewModel }) => {\n  return (\n    <AutoPlanButton onClick={() => autoPlannerViewModel.autoPlan()}>\n      Auto Plan Degree\n    </AutoPlanButton>\n  )\n};\n\nexport default AutoPlanner;","import { CourseState } from \"../../states/CourseState\";\r\nimport { CourseModel } from \"../../models/CourseModel\";\r\nimport { TermModel } from \"../../models/TermModel\";\r\n\r\nexport class AutoPlannerViewModel {\r\n    private courseState: CourseState;\r\n  \r\n    constructor(courseState: CourseState) {\r\n        this.courseState = courseState;\r\n    }\r\n\r\n    get autoPlanCourseState(): CourseState {\r\n        return this.courseState;\r\n    }\r\n\r\n    autoPlan() {\r\n        let canAllocateCourses: boolean = true;\r\n        let listYearsToTryAllocate: number[] = this.getYearsToTryAllocate(this.courseState.getMaxAllocatedYear);\r\n        let listTermsToTryAllocate: string[] = [\"Term 1\", \"Term 2\", \"Term 3\"]\r\n\r\n        while (canAllocateCourses === true) {\r\n            let coursesToBeAllocated: CourseModel[] = this.courseState.plannedCourses;\r\n            let nCoursesToAllocate: number = coursesToBeAllocated.length;\r\n            let hasChanged = false;\r\n\r\n            // Try for each year, term; if allocation spot is free & pre-req is met, add course to term\r\n            for (var counter = 0; counter < coursesToBeAllocated.length; counter++) {\r\n                let termAllocatedFlag = false;\r\n                for (let i = 0; i < listYearsToTryAllocate.length; i++) {\r\n                    if (termAllocatedFlag === false) {\r\n                        for (let j = 0; j < listTermsToTryAllocate.length; j++) {\r\n                            let canAssignToTerm : string[] | boolean = this.courseState.getMissingRequirementsWhenAssigningCourseToTerm(coursesToBeAllocated[counter], new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]));\r\n                            let termHasSpaceToAllocate : boolean = this.termHasLessThanThreeCourses(listYearsToTryAllocate[i], listTermsToTryAllocate[j], this.courseState.termCourseMap);\r\n                            let termIsDisabled: boolean = new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]).isBefore(new TermModel(2021, \"Term 2\"))\r\n                            if (canAssignToTerm.length === 0) {\r\n                                canAssignToTerm = true;\r\n                            } else {\r\n                                canAssignToTerm = false;\r\n                            }\r\n\r\n                            if (!termIsDisabled && termHasSpaceToAllocate && canAssignToTerm) {\r\n                                this.courseState.assignCourseToTerm(coursesToBeAllocated[counter], new TermModel(listYearsToTryAllocate[i], listTermsToTryAllocate[j]));\r\n                                termAllocatedFlag = true;\r\n                                hasChanged = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Terminating condition\r\n            // If there are no changes, this means that there are no more courses that can be allocated\r\n            // and hence terminate allocation attempt\r\n            if (hasChanged === false) {\r\n                canAllocateCourses = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    termHasLessThanThreeCourses(year: number, term: string, allocatedCourses: Map<string, CourseModel[]>) : boolean {\r\n        let dictKey = year + \"_\" + term;\r\n\r\n        if (allocatedCourses.has(dictKey)) {\r\n            // A term already has 3 courses, can't allocate\r\n            if (allocatedCourses.get(dictKey)!.length >= 3) {\r\n                return false;\r\n            }\r\n\r\n            // Term exists in allocatedTerm array, but has less than 3 courses, can allocate\r\n            return true;\r\n        } else {\r\n            // Term has not been allocated, can allocate\r\n            return true;\r\n        }\r\n    }\r\n\r\n    getYearsToTryAllocate(maxYear: number) {\r\n        var list: number[] = [];\r\n\r\n        // Return list of years with excess, incase all previous terms are full\r\n        for (var i = 2021; i <= maxYear + 4; i++) {\r\n            list.push(i);\r\n        }\r\n\r\n        return list;\r\n    }\r\n}","import \"fomantic-ui-css/semantic.min.css\";\nimport { Observer } from 'mobx-react-lite';\nimport React, { useContext } from 'react';\nimport SplitPane from 'react-split-pane';\nimport 'semantic-ui-react';\nimport { Container } from 'semantic-ui-react';\nimport './App.css';\nimport LocalImportExport from \"./containers/LocalImportExport/LocalImportExport\"\nimport { LocalImportExportViewModel } from './containers/LocalImportExport/LocalImportExportViewModel';\nimport { MenuBar } from './containers/MenuBar/MenuBar';\nimport Planner from './containers/Planner/Planner';\nimport { PlannerViewModel } from './containers/Planner/PlannerViewModel';\nimport ProgressionPlanner from './containers/ProgressionPlanner/ProgressionPlanner';\nimport { ProgressionPlannerViewModel } from './containers/ProgressionPlanner/ProgressionPlannerViewModel';\nimport SearchPanel from './containers/SearchPanel/SearchPanel';\nimport { SearchPanelViewModel } from './containers/SearchPanel/SearchPanelViewModel';\nimport { ApplicationContext } from './contexts/ApplicationContext';\nimport AutoPlanner from './containers/AutoPlan/AutoPlannerView';\nimport { AutoPlannerViewModel } from \"./containers/AutoPlan/AutoPlannerModel\";\n\nconst App = () => {\n  const applicationContext = useContext(ApplicationContext)\n\n  const searchPanelViewModel = new SearchPanelViewModel(applicationContext.searchDataState);\n  const plannerViewModel = new PlannerViewModel(applicationContext.courseState);\n  const progressionPlannerViewModel = new ProgressionPlannerViewModel(applicationContext.progressionState, applicationContext.courseState);\n  const localImportExportModel = new LocalImportExportViewModel(applicationContext.userState, applicationContext.progressionState, applicationContext.courseState);\n  const autoPlannerViewModel = new AutoPlannerViewModel(applicationContext.courseState);\n\n  return (\n    <ApplicationContext.Provider value={applicationContext}>\n      <div className=\"ui maincontainer\">\n        <MenuBar userState={applicationContext.userState} />\n        <SplitPane\n          className=\"split-pane-flex\"\n          split=\"vertical\"\n          defaultSize={\"min(50vw, 1000px)\"}\n          primary=\"second\"\n        >\n          <Container style={{ padding: 10 }} fluid>\n            <SearchPanel searchPanelViewModel={searchPanelViewModel} />\n            <Observer>\n              {\n                () => {\n                  return (\n                    !searchPanelViewModel.shouldShowPanel\n                      ? <ProgressionPlanner progressionPlannerViewModel={progressionPlannerViewModel} />\n                      : <></>\n                  )\n                }\n              }\n            </Observer>\n          </Container>\n          <Container style={{ padding: 10, paddingLeft: 50 }} fluid>\n            <LocalImportExport localImportExportViewModel={localImportExportModel} />\n            <AutoPlanner autoPlannerViewModel={autoPlannerViewModel} />\n            <Planner plannerViewModel={plannerViewModel} />\n          </Container>\n        </SplitPane>\n      </div>\n    </ApplicationContext.Provider>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}